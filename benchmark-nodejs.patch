diff --git a/lib/_http_agent.js b/lib/_http_agent.js
index a42c0e8399..94fed28cc4 100644
--- a/lib/_http_agent.js
+++ b/lib/_http_agent.js
@@ -44,22 +44,22 @@ const {
 
 const net = require('net');
 const EventEmitter = require('events');
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 const { AsyncResource } = require('async_hooks');
-const { async_id_symbol } = require('internal/async_hooks').symbols;
+const { async_id_symbol } = require('./internal/async_hooks').symbols;
 const {
   codes: {
     ERR_OUT_OF_RANGE,
   },
-} = require('internal/errors');
-const { once } = require('internal/util');
+} = require('./internal/errors');
+const { once } = require('./internal/util');
 const {
   validateNumber,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kOnKeylog = Symbol('onkeylog');
 const kRequestOptions = Symbol('requestOptions');
diff --git a/lib/_http_client.js b/lib/_http_client.js
index ee694a4724..c00832f011 100644
--- a/lib/_http_client.js
+++ b/lib/_http_client.js
@@ -42,8 +42,8 @@ const {
 } = primordials;
 
 const net = require('net');
-const assert = require('internal/assert');
-const { once } = require('internal/util');
+const assert = require('./internal/assert');
+const { once } = require('./internal/util');
 const {
   _checkIsHttpToken: checkIsHttpToken,
   freeParser,
@@ -55,10 +55,10 @@ const {
 const { OutgoingMessage } = require('_http_outgoing');
 const Agent = require('_http_agent');
 const { Buffer } = require('buffer');
-const { defaultTriggerAsyncIdScope } = require('internal/async_hooks');
-const { URL, urlToHttpOptions, searchParamsSymbol } = require('internal/url');
-const { kOutHeaders, kNeedDrain } = require('internal/http');
-const { connResetException, codes } = require('internal/errors');
+const { defaultTriggerAsyncIdScope } = require('./internal/async_hooks');
+const { URL, urlToHttpOptions, searchParamsSymbol } = require('./internal/url');
+const { kOutHeaders, kNeedDrain } = require('./internal/http');
+const { connResetException, codes } = require('./internal/errors');
 const {
   ERR_HTTP_HEADERS_SENT,
   ERR_INVALID_ARG_TYPE,
@@ -68,16 +68,16 @@ const {
 } = codes;
 const {
   validateInteger,
-} = require('internal/validators');
-const { getTimerDuration } = require('internal/timers');
+} = require('./internal/validators');
+const { getTimerDuration } = require('./internal/timers');
 const {
   DTRACE_HTTP_CLIENT_REQUEST,
   DTRACE_HTTP_CLIENT_RESPONSE
-} = require('internal/dtrace');
+} = require('./internal/dtrace');
 
 const { addAbortSignal, finished } = require('stream');
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/_http_common.js b/lib/_http_common.js
index 796deeff05..b1ad5c02c4 100644
--- a/lib/_http_common.js
+++ b/lib/_http_common.js
@@ -29,10 +29,10 @@ const {
 const { setImmediate } = require('timers');
 
 const { methods, HTTPParser } = internalBinding('http_parser');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const insecureHTTPParser = getOptionValue('--insecure-http-parser');
 
-const FreeList = require('internal/freelist');
+const FreeList = require('./internal/freelist');
 const incoming = require('_http_incoming');
 const {
   IncomingMessage,
@@ -40,7 +40,7 @@ const {
   readStop
 } = incoming;
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/_http_outgoing.js b/lib/_http_outgoing.js
index 27e290a2b9..a5e8ed202f 100644
--- a/lib/_http_outgoing.js
+++ b/lib/_http_outgoing.js
@@ -38,12 +38,12 @@ const {
   Symbol,
 } = primordials;
 
-const { getDefaultHighWaterMark } = require('internal/streams/state');
-const assert = require('internal/assert');
+const { getDefaultHighWaterMark } = require('./internal/streams/state');
+const assert = require('./internal/assert');
 const EE = require('events');
 const Stream = require('stream');
-const internalUtil = require('internal/util');
-const { kOutHeaders, utcDate, kNeedDrain } = require('internal/http');
+const internalUtil = require('./internal/util');
+const { kOutHeaders, utcDate, kNeedDrain } = require('./internal/http');
 const { Buffer } = require('buffer');
 const {
   _checkIsHttpToken: checkIsHttpToken,
@@ -53,7 +53,7 @@ const {
 const {
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol }
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const {
   codes: {
     ERR_HTTP_HEADERS_SENT,
@@ -71,11 +71,11 @@ const {
     ERR_STREAM_DESTROYED
   },
   hideStackFrames
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
-const { isUint8Array } = require('internal/util/types');
+} = require('./internal/errors');
+const { validateString } = require('./internal/validators');
+const { isUint8Array } = require('./internal/util/types');
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/_http_server.js b/lib/_http_server.js
index e2d50cdb2f..164c730f29 100644
--- a/lib/_http_server.js
+++ b/lib/_http_server.js
@@ -33,7 +33,7 @@ const {
 
 const net = require('net');
 const EE = require('events');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const {
   parsers,
   freeParser,
@@ -51,16 +51,16 @@ const {
   kOutHeaders,
   kNeedDrain,
   emitStatistics
-} = require('internal/http');
+} = require('./internal/http');
 const {
   defaultTriggerAsyncIdScope,
   getOrSetAsyncId
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const { IncomingMessage } = require('_http_incoming');
 const {
   connResetException,
   codes
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   ERR_HTTP_REQUEST_TIMEOUT,
   ERR_HTTP_HEADERS_SENT,
@@ -73,15 +73,15 @@ const {
 const {
   validateInteger,
   validateBoolean
-} = require('internal/validators');
+} = require('./internal/validators');
 const Buffer = require('buffer').Buffer;
 const {
   DTRACE_HTTP_SERVER_REQUEST,
   DTRACE_HTTP_SERVER_RESPONSE
-} = require('internal/dtrace');
+} = require('./internal/dtrace');
 const { setTimeout, clearTimeout } = require('timers');
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
@@ -94,7 +94,7 @@ const kServerResponseStatistics = Symbol('ServerResponseStatistics');
 
 const {
   hasObserver,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 
 const STATUS_CODES = {
   100: 'Continue',                   // RFC 7231 6.2.1
diff --git a/lib/_stream_wrap.js b/lib/_stream_wrap.js
index 904128a382..a8a2c5882f 100644
--- a/lib/_stream_wrap.js
+++ b/lib/_stream_wrap.js
@@ -1,5 +1,5 @@
 'use strict';
 
-module.exports = require('internal/js_stream_socket');
+module.exports = require('./internal/js_stream_socket');
 process.emitWarning('The _stream_wrap module is deprecated.',
                     'DeprecationWarning', 'DEP0125');
diff --git a/lib/_tls_common.js b/lib/_tls_common.js
index 21b22a4250..28b9309f85 100644
--- a/lib/_tls_common.js
+++ b/lib/_tls_common.js
@@ -34,7 +34,7 @@ const {
     ERR_TLS_INVALID_PROTOCOL_VERSION,
     ERR_TLS_PROTOCOL_VERSION_CONFLICT,
   },
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   crypto: {
@@ -48,15 +48,15 @@ const {
 
 const {
   validateInteger,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const {
   configSecureContext,
-} = require('internal/tls/secure-context');
+} = require('./internal/tls/secure-context');
 
 const {
   parseCertString,
-} = require('internal/tls/parse-cert-string');
+} = require('./internal/tls/parse-cert-string');
 
 function toV(which, v, def) {
   if (v == null) v = def;
diff --git a/lib/_tls_wrap.js b/lib/_tls_wrap.js
index 57399c602a..4de8b901cc 100644
--- a/lib/_tls_wrap.js
+++ b/lib/_tls_wrap.js
@@ -41,29 +41,29 @@ const {
 const {
   assertCrypto,
   deprecate
-} = require('internal/util');
+} = require('./internal/util');
 
 assertCrypto();
 
 const { setImmediate } = require('timers');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const crypto = require('crypto');
 const EE = require('events');
 const net = require('net');
 const tls = require('tls');
 const common = require('_tls_common');
-const JSStreamSocket = require('internal/js_stream_socket');
+const JSStreamSocket = require('./internal/js_stream_socket');
 const { Buffer } = require('buffer');
-let debug = require('internal/util/debuglog').debuglog('tls', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('tls', (fn) => {
   debug = fn;
 });
 const { TCP, constants: TCPConstants } = internalBinding('tcp_wrap');
 const tls_wrap = internalBinding('tls_wrap');
 const { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { isArrayBufferView } = require('internal/util/types');
+const { owner_symbol } = require('./internal/async_hooks').symbols;
+const { isArrayBufferView } = require('./internal/util/types');
 const { SecureContext: NativeSecureContext } = internalBinding('crypto');
-const { connResetException, codes } = require('internal/errors');
+const { connResetException, codes } = require('./internal/errors');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
@@ -82,7 +82,7 @@ const { onpskexchange: kOnPskExchange } = internalBinding('symbols');
 const {
   getOptionValue,
   getAllowUnauthorized,
-} = require('internal/options');
+} = require('./internal/options');
 const {
   validateBoolean,
   validateBuffer,
@@ -93,10 +93,10 @@ const {
   validateObject,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('./internal/validators');
 const {
   InternalX509Certificate
-} = require('internal/crypto/x509');
+} = require('./internal/crypto/x509');
 const traceTls = getOptionValue('--trace-tls');
 const tlsKeylog = getOptionValue('--tls-keylog');
 const { appendFile } = require('fs');
diff --git a/lib/assert.js b/lib/assert.js
index 89949c0161..791e91e020 100644
--- a/lib/assert.js
+++ b/lib/assert.js
@@ -58,20 +58,20 @@ const {
   },
   isErrorStackTraceLimitWritable,
   overrideStackTrace,
-} = require('internal/errors');
-const AssertionError = require('internal/assert/assertion_error');
+} = require('./internal/errors');
+const AssertionError = require('./internal/assert/assertion_error');
 const { openSync, closeSync, readSync } = require('fs');
-const { inspect } = require('internal/util/inspect');
-const { isPromise, isRegExp } = require('internal/util/types');
-const { EOL } = require('internal/constants');
-const { NativeModule } = require('internal/bootstrap/loaders');
-const { isError } = require('internal/util');
+const { inspect } = require('./internal/util/inspect');
+const { isPromise, isRegExp } = require('./internal/util/types');
+const { EOL } = require('./internal/constants');
+const { NativeModule } = require('./internal/bootstrap/loaders');
+const { isError } = require('./internal/util');
 
 const errorCache = new SafeMap();
-const CallTracker = require('internal/assert/calltracker');
+const CallTracker = require('./internal/assert/calltracker');
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 let isDeepEqual;
 let isDeepStrictEqual;
@@ -80,7 +80,7 @@ let findNodeAround;
 let decoder;
 
 function lazyLoadComparison() {
-  const comparison = require('internal/util/comparisons');
+  const comparison = require('./internal/util/comparisons');
   isDeepEqual = comparison.isDeepEqual;
   isDeepStrictEqual = comparison.isDeepStrictEqual;
 }
@@ -243,8 +243,8 @@ function getCode(fd, line, column) {
 function parseCode(code, offset) {
   // Lazy load acorn.
   if (parseExpressionAt === undefined) {
-    const Parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
-    ({ findNodeAround } = require('internal/deps/acorn/acorn-walk/dist/walk'));
+    const Parser = require('./internal/deps/acorn/acorn/dist/acorn').Parser;
+    ({ findNodeAround } = require('./internal/deps/acorn/acorn-walk/dist/walk'));
 
     parseExpressionAt = FunctionPrototypeBind(Parser.parseExpressionAt, Parser);
   }
diff --git a/lib/async_hooks.js b/lib/async_hooks.js
index 04135ec41c..fd76cb6c6a 100644
--- a/lib/async_hooks.js
+++ b/lib/async_hooks.js
@@ -17,12 +17,12 @@ const {
   ERR_ASYNC_CALLBACK,
   ERR_ASYNC_TYPE,
   ERR_INVALID_ASYNC_ID
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   validateFunction,
   validateString,
-} = require('internal/validators');
-const internal_async_hooks = require('internal/async_hooks');
+} = require('./internal/validators');
+const internal_async_hooks = require('./internal/async_hooks');
 
 // Get functions
 // For userland AsyncResources, make sure to emit a destroy event when the
diff --git a/lib/buffer.js b/lib/buffer.js
index 1f4f0a2e89..4a7557d92a 100644
--- a/lib/buffer.js
+++ b/lib/buffer.js
@@ -78,15 +78,15 @@ const {
   lazyDOMException,
   normalizeEncoding,
   kIsEncodingSymbol
-} = require('internal/util');
+} = require('./internal/util');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
   isUint8Array
-} = require('internal/util/types');
+} = require('./internal/util/types');
 const {
   inspect: utilInspect
-} = require('internal/util/inspect');
+} = require('./internal/util/inspect');
 const { encodings } = internalBinding('string_decoder');
 
 const {
@@ -99,14 +99,14 @@ const {
     ERR_UNKNOWN_ENCODING
   },
   hideStackFrames
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   validateArray,
   validateBuffer,
   validateNumber,
   validateInteger,
   validateString
-} = require('internal/validators');
+} = require('./internal/validators');
 // Provide validateInteger() but with kMaxLength as the default maximum value.
 const validateOffset = (value, name, min = 0, max = kMaxLength) =>
   validateInteger(value, name, min, max);
@@ -116,12 +116,12 @@ const {
   markAsUntransferable,
   addBufferPrototypeMethods,
   createUnsafeBuffer
-} = require('internal/buffer');
+} = require('./internal/buffer');
 
 const {
   Blob,
   resolveObjectURL,
-} = require('internal/blob');
+} = require('./internal/blob');
 
 FastBuffer.prototype.constructor = Buffer;
 Buffer.prototype = FastBuffer.prototype;
@@ -172,7 +172,7 @@ const bufferWarning = 'Buffer() is deprecated due to security and usability ' +
 function showFlaggedDeprecation() {
   if (bufferWarningAlreadyEmitted ||
       ++nodeModulesCheckCounter > 10000 ||
-      (!require('internal/options').getOptionValue('--pending-deprecation') &&
+      (!require('./internal/options').getOptionValue('--pending-deprecation') &&
        isInsideNodeModules())) {
     // We don't emit a warning, because we either:
     // - Already did so, or
diff --git a/lib/child_process.js b/lib/child_process.js
index 62c552d567..92d64d21bb 100644
--- a/lib/child_process.js
+++ b/lib/child_process.js
@@ -48,9 +48,9 @@ const {
   convertToValidSignal,
   createDeferredPromise,
   getSystemErrorName
-} = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
-let debug = require('internal/util/debuglog').debuglog(
+} = require('./internal/util');
+const { isArrayBufferView } = require('./internal/util/types');
+let debug = require('./internal/util/debuglog').debuglog(
   'child_process',
   (fn) => {
     debug = fn;
@@ -62,7 +62,7 @@ const { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');
 const {
   AbortError,
   codes: errorCodes,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   ERR_INVALID_ARG_VALUE,
   ERR_CHILD_PROCESS_IPC_REQUIRED,
@@ -71,15 +71,15 @@ const {
   ERR_OUT_OF_RANGE,
 } = errorCodes;
 const { clearTimeout, setTimeout } = require('timers');
-const { getValidatedPath } = require('internal/fs/utils');
+const { getValidatedPath } = require('./internal/fs/utils');
 const {
   isInt32,
   validateAbortSignal,
   validateBoolean,
   validateObject,
   validateString,
-} = require('internal/validators');
-const child_process = require('internal/child_process');
+} = require('./internal/validators');
+const child_process = require('./internal/child_process');
 const {
   getValidStdio,
   setupChannel,
diff --git a/lib/console.js b/lib/console.js
index 85a89ecc99..e21350da7c 100644
--- a/lib/console.js
+++ b/lib/console.js
@@ -21,4 +21,4 @@
 
 'use strict';
 
-module.exports = require('internal/console/global');
+module.exports = require('./internal/console/global');
diff --git a/lib/crypto.js b/lib/crypto.js
index 6e050068b2..ff9b2cb5c2 100644
--- a/lib/crypto.js
+++ b/lib/crypto.js
@@ -32,14 +32,14 @@ const {
 const {
   assertCrypto,
   deprecate
-} = require('internal/util');
+} = require('./internal/util');
 assertCrypto();
 
 const {
   ERR_CRYPTO_FIPS_FORCED,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const constants = internalBinding('constants').crypto;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const pendingDeprecation = getOptionValue('--pending-deprecation');
 const fipsForced = getOptionValue('--force-fips');
 const {
@@ -57,37 +57,37 @@ const {
   randomFillSync,
   randomInt,
   randomUUID,
-} = require('internal/crypto/random');
+} = require('./internal/crypto/random');
 const {
   pbkdf2,
   pbkdf2Sync
-} = require('internal/crypto/pbkdf2');
+} = require('./internal/crypto/pbkdf2');
 const {
   scrypt,
   scryptSync
-} = require('internal/crypto/scrypt');
+} = require('./internal/crypto/scrypt');
 const {
   hkdf,
   hkdfSync
-} = require('internal/crypto/hkdf');
+} = require('./internal/crypto/hkdf');
 const {
   generateKeyPair,
   generateKeyPairSync,
   generateKey,
   generateKeySync,
-} = require('internal/crypto/keygen');
+} = require('./internal/crypto/keygen');
 const {
   createSecretKey,
   createPublicKey,
   createPrivateKey,
   KeyObject,
-} = require('internal/crypto/keys');
+} = require('./internal/crypto/keys');
 const {
   DiffieHellman,
   DiffieHellmanGroup,
   ECDH,
   diffieHellman
-} = require('internal/crypto/diffiehellman');
+} = require('./internal/crypto/diffiehellman');
 const {
   Cipher,
   Cipheriv,
@@ -98,20 +98,20 @@ const {
   publicDecrypt,
   publicEncrypt,
   getCipherInfo,
-} = require('internal/crypto/cipher');
+} = require('./internal/crypto/cipher');
 const {
   Sign,
   signOneShot,
   Verify,
   verifyOneShot
-} = require('internal/crypto/sig');
+} = require('./internal/crypto/sig');
 const {
   Hash,
   Hmac
-} = require('internal/crypto/hash');
+} = require('./internal/crypto/hash');
 const {
   X509Certificate
-} = require('internal/crypto/x509');
+} = require('./internal/crypto/x509');
 const {
   getCiphers,
   getCurves,
@@ -121,8 +121,8 @@ const {
   setEngine,
   lazyRequire,
   secureHeapUsed,
-} = require('internal/crypto/util');
-const Certificate = require('internal/crypto/certificate');
+} = require('./internal/crypto/util');
+const Certificate = require('./internal/crypto/certificate');
 
 // These helper functions are needed because the constructors can
 // use new, in which case V8 cannot inline the recursive constructor call
@@ -284,7 +284,7 @@ ObjectDefineProperties(module.exports, {
   webcrypto: {
     configurable: false,
     enumerable: true,
-    get() { return lazyRequire('internal/crypto/webcrypto').crypto; }
+    get() { return lazyrequire('./internal/crypto/webcrypto').crypto; }
   },
 
   // Aliases for randomBytes are deprecated.
diff --git a/lib/dgram.js b/lib/dgram.js
index 57d9289853..a72109275d 100644
--- a/lib/dgram.js
+++ b/lib/dgram.js
@@ -32,12 +32,12 @@ const {
   ReflectApply,
 } = primordials;
 
-const errors = require('internal/errors');
+const errors = require('./internal/errors');
 const {
   kStateSymbol,
   _createSocketHandle,
   newHandle,
-} = require('internal/dgram');
+} = require('./internal/dgram');
 const { guessHandleType } = internalBinding('util');
 const {
   ERR_BUFFER_OUT_OF_BOUNDS,
@@ -57,15 +57,15 @@ const {
   validateString,
   validateNumber,
   validatePort,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { Buffer } = require('buffer');
-const { deprecate } = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
+const { deprecate } = require('./internal/util');
+const { isArrayBufferView } = require('./internal/util/types');
 const EventEmitter = require('events');
 const {
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol, owner_symbol }
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const { UV_UDP_REUSEADDR } = internalBinding('constants').os;
 
 const {
diff --git a/lib/diagnostics_channel.js b/lib/diagnostics_channel.js
index 1792980ec1..eee4edaf82 100644
--- a/lib/diagnostics_channel.js
+++ b/lib/diagnostics_channel.js
@@ -14,10 +14,10 @@ const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   }
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const { triggerUncaughtException } = internalBinding('errors');
 
diff --git a/lib/dns.js b/lib/dns.js
index 4eadbd0415..810665ebb9 100644
--- a/lib/dns.js
+++ b/lib/dns.js
@@ -30,10 +30,10 @@ const {
 } = primordials;
 
 const cares = internalBinding('cares_wrap');
-const { toASCII } = require('internal/idna');
-const { isIP } = require('internal/net');
-const { customPromisifyArgs } = require('internal/util');
-const errors = require('internal/errors');
+const { toASCII } = require('./internal/idna');
+const { isIP } = require('./internal/net');
+const { customPromisifyArgs } = require('./internal/util');
+const errors = require('./internal/errors');
 const {
   bindDefaultResolver,
   getDefaultResolver,
@@ -43,7 +43,7 @@ const {
   emitInvalidHostnameWarning,
   getDefaultVerbatim,
   setDefaultResultOrder,
-} = require('internal/dns/utils');
+} = require('./internal/dns/utils');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
@@ -54,7 +54,7 @@ const {
   validatePort,
   validateString,
   validateOneOf,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const {
   GetAddrInfoReqWrap,
@@ -333,7 +333,7 @@ ObjectDefineProperties(module.exports, {
     enumerable: true,
     get() {
       if (promises === null) {
-        promises = require('internal/dns/promises');
+        promises = require('./internal/dns/promises');
         promises.setServers = defaultResolverSetServers;
         promises.setDefaultResultOrder = setDefaultResultOrder;
       }
diff --git a/lib/dns/promises.js b/lib/dns/promises.js
index ad8a2561ef..82014e3883 100644
--- a/lib/dns/promises.js
+++ b/lib/dns/promises.js
@@ -1,5 +1,5 @@
 'use strict';
 
-const dnsPromises = require('internal/dns/promises');
+const dnsPromises = require('../internal/dns/promises');
 dnsPromises.setServers = require('dns').setServers;
 module.exports = dnsPromises;
diff --git a/lib/domain.js b/lib/domain.js
index fcc8bb0a6d..cf6bcdaf31 100644
--- a/lib/domain.js
+++ b/lib/domain.js
@@ -47,9 +47,9 @@ const {
   ERR_DOMAIN_CALLBACK_NOT_AVAILABLE,
   ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE,
   ERR_UNHANDLED_ERROR
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const { createHook } = require('async_hooks');
-const { useDomainTrampoline } = require('internal/async_hooks');
+const { useDomainTrampoline } = require('./internal/async_hooks');
 
 // TODO(addaleax): Use a non-internal solution for this.
 const kWeak = Symbol('kWeak');
diff --git a/lib/events.js b/lib/events.js
index ef8090e577..ea562f732e 100644
--- a/lib/events.js
+++ b/lib/events.js
@@ -50,7 +50,7 @@ const {
   SymbolAsyncIterator,
 } = primordials;
 const kRejection = SymbolFor('nodejs.rejection');
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('./internal/util/inspect');
 
 let spliceOne;
 
@@ -62,13 +62,13 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_UNHANDLED_ERROR
   },
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   validateAbortSignal,
   validateBoolean,
   validateFunction,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kCapture = Symbol('kCapture');
 const kErrorMonitor = Symbol('events.errorMonitor');
@@ -172,7 +172,7 @@ EventEmitter.setMaxListeners =
       defaultMaxListeners = n;
     } else {
       if (isEventTarget === undefined)
-        isEventTarget = require('internal/event_target').isEventTarget;
+        isEventTarget = require('./internal/event_target').isEventTarget;
 
       for (let i = 0; i < eventTargets.length; i++) {
         const target = eventTargets[i];
@@ -590,7 +590,7 @@ EventEmitter.prototype.removeListener =
           list.shift();
         else {
           if (spliceOne === undefined)
-            spliceOne = require('internal/util').spliceOne;
+            spliceOne = require('./internal/util').spliceOne;
           spliceOne(list, position);
         }
 
@@ -780,7 +780,7 @@ function getEventListeners(emitterOrTarget, type) {
     return emitterOrTarget.listeners(type);
   }
   // Require event target lazily to avoid always loading it
-  const { isEventTarget, kEvents } = require('internal/event_target');
+  const { isEventTarget, kEvents } = require('./internal/event_target');
   if (isEventTarget(emitterOrTarget)) {
     const root = emitterOrTarget[kEvents].get(type);
     const listeners = [];
diff --git a/lib/fs.js b/lib/fs.js
index 7e126b84ad..3146a3b17f 100644
--- a/lib/fs.js
+++ b/lib/fs.js
@@ -62,7 +62,7 @@ const {
 } = constants;
 
 const pathModule = require('path');
-const { isArrayBufferView } = require('internal/util/types');
+const { isArrayBufferView } = require('./internal/util/types');
 
 // We need to get the statValues from the binding at the callsite since
 // it's re-initialized after deserialization.
@@ -79,11 +79,11 @@ const {
   AbortError,
   uvErrmapGet,
   uvException
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const { FSReqCallback } = binding;
-const { toPathIfFileURL } = require('internal/url');
-const internalUtil = require('internal/util');
+const { toPathIfFileURL } = require('./internal/url');
+const internalUtil = require('./internal/util');
 const {
   constants: {
     kIoMaxLength,
@@ -117,16 +117,16 @@ const {
   validateRmdirOptions,
   validateStringAfterArrayBufferView,
   warnOnNonPortableTemplate
-} = require('internal/fs/utils');
+} = require('./internal/fs/utils');
 const {
   Dir,
   opendir,
   opendirSync
-} = require('internal/fs/dir');
+} = require('./internal/fs/dir');
 const {
   CHAR_FORWARD_SLASH,
   CHAR_BACKWARD_SLASH,
-} = require('internal/constants');
+} = require('./internal/constants');
 const {
   isUint32,
   parseFileMode,
@@ -137,10 +137,10 @@ const {
   validateFunction,
   validateInteger,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
-const watchers = require('internal/fs/watchers');
-const ReadFileContext = require('internal/fs/read_file_context');
+const watchers = require('./internal/fs/watchers');
+const ReadFileContext = require('./internal/fs/read_file_context');
 
 let truncateWarn = true;
 let fs;
@@ -1080,15 +1080,15 @@ function ftruncateSync(fd, len = 0) {
 
 function lazyLoadCp() {
   if (cpFn === undefined) {
-    ({ cpFn } = require('internal/fs/cp/cp'));
+    ({ cpFn } = require('./internal/fs/cp/cp'));
     cpFn = require('util').callbackify(cpFn);
-    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));
+    ({ cpSyncFn } = require('./internal/fs/cp/cp-sync'));
   }
 }
 
 function lazyLoadRimraf() {
   if (rimraf === undefined)
-    ({ rimraf, rimrafSync } = require('internal/fs/rimraf'));
+    ({ rimraf, rimrafSync } = require('./internal/fs/rimraf'));
 }
 
 /**
@@ -2840,7 +2840,7 @@ function cpSync(src, dest, options) {
 
 function lazyLoadStreams() {
   if (!ReadStream) {
-    ({ ReadStream, WriteStream } = require('internal/fs/streams'));
+    ({ ReadStream, WriteStream } = require('./internal/fs/streams'));
     FileReadStream = ReadStream;
     FileWriteStream = WriteStream;
   }
@@ -3038,7 +3038,7 @@ ObjectDefineProperties(fs, {
     enumerable: true,
     get() {
       if (promises === null)
-        promises = require('internal/fs/promises').exports;
+        promises = require('./internal/fs/promises').exports;
       return promises;
     }
   }
diff --git a/lib/fs/promises.js b/lib/fs/promises.js
index 1fa3a185de..798a206abb 100644
--- a/lib/fs/promises.js
+++ b/lib/fs/promises.js
@@ -1,3 +1,3 @@
 'use strict';
 
-module.exports = require('internal/fs/promises').exports;
+module.exports = require('../internal/fs/promises').exports;
diff --git a/lib/http.js b/lib/http.js
index 38f1297be7..1bbbe7eb42 100644
--- a/lib/http.js
+++ b/lib/http.js
@@ -131,7 +131,7 @@ ObjectDefineProperty(module.exports, 'maxHeaderSize', {
   enumerable: true,
   get() {
     if (maxHeaderSize === undefined) {
-      const { getOptionValue } = require('internal/options');
+      const { getOptionValue } = require('./internal/options');
       maxHeaderSize = getOptionValue('--max-http-header-size');
     }
 
diff --git a/lib/http2.js b/lib/http2.js
index 14b4f57acd..d330e5b1da 100644
--- a/lib/http2.js
+++ b/lib/http2.js
@@ -11,7 +11,7 @@ const {
   sensitiveHeaders,
   Http2ServerRequest,
   Http2ServerResponse
-} = require('internal/http2/core');
+} = require('./internal/http2/core');
 
 module.exports = {
   connect,
diff --git a/lib/https.js b/lib/https.js
index 695a902099..ef378b8e2c 100644
--- a/lib/https.js
+++ b/lib/https.js
@@ -34,7 +34,7 @@ const {
   ReflectConstruct,
 } = primordials;
 
-require('internal/util').assertCrypto();
+require('./internal/util').assertCrypto();
 
 const tls = require('tls');
 const { Agent: HttpAgent } = require('_http_agent');
@@ -44,10 +44,10 @@ const {
   _connectionListener,
 } = require('_http_server');
 const { ClientRequest } = require('_http_client');
-let debug = require('internal/util/debuglog').debuglog('https', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('https', (fn) => {
   debug = fn;
 });
-const { URL, urlToHttpOptions, searchParamsSymbol } = require('internal/url');
+const { URL, urlToHttpOptions, searchParamsSymbol } = require('./internal/url');
 
 function Server(opts, requestListener) {
   if (!(this instanceof Server)) return new Server(opts, requestListener);
diff --git a/lib/inspector.js b/lib/inspector.js
index 46779a0ec2..c8b6150681 100644
--- a/lib/inspector.js
+++ b/lib/inspector.js
@@ -16,19 +16,19 @@ const {
   ERR_INSPECTOR_NOT_CONNECTED,
   ERR_INSPECTOR_NOT_ACTIVE,
   ERR_INSPECTOR_NOT_WORKER,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 
 const { hasInspector } = internalBinding('config');
 if (!hasInspector)
   throw new ERR_INSPECTOR_NOT_AVAILABLE();
 
 const EventEmitter = require('events');
-const { queueMicrotask } = require('internal/process/task_queues');
+const { queueMicrotask } = require('./internal/process/task_queues');
 const {
   validateCallback,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { isMainThread } = require('worker_threads');
 
 const {
@@ -190,6 +190,6 @@ module.exports = {
   waitForDebugger: inspectorWaitForDebugger,
   // This is dynamically added during bootstrap,
   // where the console from the VM is still available
-  console: require('internal/util/inspector').consoleFromVM,
+  console: require('./internal/util/inspector').consoleFromVM,
   Session
 };
diff --git a/lib/internal/abort_controller.js b/lib/internal/abort_controller.js
index c24963b823..c8d90f4420 100644
--- a/lib/internal/abort_controller.js
+++ b/lib/internal/abort_controller.js
@@ -17,17 +17,17 @@ const {
   EventTarget,
   Event,
   kTrustEvent
-} = require('internal/event_target');
+} = require('../internal/event_target');
 const {
   customInspectSymbol,
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('../internal/util');
+const { inspect } = require('../internal/util/inspect');
 const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
     ERR_INVALID_THIS,
   }
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const kAborted = Symbol('kAborted');
 
diff --git a/lib/internal/assert.js b/lib/internal/assert.js
index 0f52faab4b..2145278dab 100644
--- a/lib/internal/assert.js
+++ b/lib/internal/assert.js
@@ -3,7 +3,7 @@
 let error;
 function lazyError() {
   if (!error) {
-    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;
+    error = require('../internal/errors').codes.ERR_INTERNAL_ASSERTION;
   }
   return error;
 }
diff --git a/lib/internal/assert/assertion_error.js b/lib/internal/assert/assertion_error.js
index 837c37b122..726b6af4fb 100644
--- a/lib/internal/assert/assertion_error.js
+++ b/lib/internal/assert/assertion_error.js
@@ -17,14 +17,14 @@ const {
   StringPrototypeSplit,
 } = primordials;
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 const {
   removeColors,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   validateObject,
-} = require('internal/validators');
-const { isErrorStackTraceLimitWritable } = require('internal/errors');
+} = require('../../internal/validators');
+const { isErrorStackTraceLimitWritable } = require('../../internal/errors');
 
 let blue = '';
 let green = '';
diff --git a/lib/internal/assert/calltracker.js b/lib/internal/assert/calltracker.js
index d45fb67d61..3d340bc617 100644
--- a/lib/internal/assert/calltracker.js
+++ b/lib/internal/assert/calltracker.js
@@ -12,11 +12,11 @@ const {
   codes: {
     ERR_UNAVAILABLE_DURING_EXIT,
   },
-} = require('internal/errors');
-const AssertionError = require('internal/assert/assertion_error');
+} = require('../../internal/errors');
+const AssertionError = require('../../internal/assert/assertion_error');
 const {
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const noop = FunctionPrototype;
 
diff --git a/lib/internal/async_hooks.js b/lib/internal/async_hooks.js
index 9aacf4b3ba..b523067677 100644
--- a/lib/internal/async_hooks.js
+++ b/lib/internal/async_hooks.js
@@ -155,7 +155,7 @@ function executionAsyncResource() {
 }
 
 function inspectExceptionValue(e) {
-  inspect ??= require('internal/util/inspect').inspect;
+  inspect ??= require('../internal/util/inspect').inspect;
   return { message: inspect(e) };
 }
 
@@ -169,7 +169,7 @@ function fatalError(e) {
     process._rawDebug(o.stack);
   }
 
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../internal/options');
   if (getOptionValue('--abort-on-uncaught-exception')) {
     process.abort();
   }
diff --git a/lib/internal/blob.js b/lib/internal/blob.js
index 5fb25e04fe..72e3829a0c 100644
--- a/lib/internal/blob.js
+++ b/lib/internal/blob.js
@@ -28,25 +28,25 @@ const {
 const {
   TextDecoder,
   TextEncoder,
-} = require('internal/encoding');
+} = require('../internal/encoding');
 
 const {
   makeTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../internal/util/types');
 
 const {
   createDeferredPromise,
   customInspectSymbol: kInspect,
   emitExperimentalWarning,
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('../internal/util');
+const { inspect } = require('../internal/util/inspect');
 
 const {
   AbortError,
@@ -56,12 +56,12 @@ const {
     ERR_INVALID_THIS,
     ERR_BUFFER_TOO_LARGE,
   }
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateObject,
   isUint32,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const kHandle = Symbol('kHandle');
 const kState = Symbol('kState');
@@ -84,13 +84,13 @@ const enc = new TextEncoder();
 // modules, lazy loading here makes sure that things work.
 
 function lazyURL(id) {
-  URL ??= require('internal/url').URL;
+  URL ??= require('../internal/url').URL;
   return new URL(id);
 }
 
 function lazyReadableStream(options) {
   ReadableStream ??=
-    require('internal/webstreams/readablestream').ReadableStream;
+    require('../internal/webstreams/readablestream').ReadableStream;
   return new ReadableStream(options);
 }
 
diff --git a/lib/internal/blocklist.js b/lib/internal/blocklist.js
index a73f3f19de..f565be790e 100644
--- a/lib/internal/blocklist.js
+++ b/lib/internal/blocklist.js
@@ -12,29 +12,29 @@ const {
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   SocketAddress,
   kHandle: kSocketAddressHandle,
-} = require('internal/socketaddress');
+} = require('../internal/socketaddress');
 
 const {
   JSTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 
 const kHandle = Symbol('kHandle');
 const { owner_symbol } = internalBinding('symbols');
 
 const {
   ERR_INVALID_ARG_VALUE,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
-const { validateInt32, validateString } = require('internal/validators');
+const { validateInt32, validateString } = require('../internal/validators');
 
 class BlockList extends JSTransferable {
   constructor() {
diff --git a/lib/internal/bootstrap/environment.js b/lib/internal/bootstrap/environment.js
index 79a67dae37..c3ffabbe4f 100644
--- a/lib/internal/bootstrap/environment.js
+++ b/lib/internal/bootstrap/environment.js
@@ -7,7 +7,7 @@
 /* global markBootstrapComplete */
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 prepareMainThreadExecution();
 markBootstrapComplete();
diff --git a/lib/internal/bootstrap/loaders.js b/lib/internal/bootstrap/loaders.js
index c392da2468..cf5777b742 100644
--- a/lib/internal/bootstrap/loaders.js
+++ b/lib/internal/bootstrap/loaders.js
@@ -19,7 +19,7 @@
 //   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag
 //   NM_F_LINKED.
 // - internalBinding(): the private internal C++ binding loader, inaccessible
-//   from user land unless through `require('internal/test/binding')`.
+//   from user land unless through `require('../../internal/test/binding')`.
 //   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()
 //   and have their nm_flags set to NM_F_INTERNAL.
 //
@@ -30,7 +30,7 @@
 //   so they can be loaded faster without the cost of I/O. This class makes the
 //   lib/internal/*, deps/internal/* modules and internalBinding() available by
 //   default to core modules, and lets the core modules require itself via
-//   require('internal/bootstrap/loaders') even when this file is not written in
+//   require('../../internal/bootstrap/loaders') even when this file is not written in
 //   CommonJS style.
 //
 // Other objects:
@@ -136,7 +136,7 @@ const legacyWrapperList = new SafeSet([
           'DEP0111');
       }
       if (legacyWrapperList.has(module)) {
-        return nativeModuleRequire('internal/legacy/processbinding')[module]();
+        return nativeModulerequire('../../internal/legacy/processbinding')[module]();
       }
       return internalBinding(module);
     }
diff --git a/lib/internal/bootstrap/node.js b/lib/internal/bootstrap/node.js
index 58f7396990..7f3c0191f1 100644
--- a/lib/internal/bootstrap/node.js
+++ b/lib/internal/bootstrap/node.js
@@ -52,7 +52,7 @@ const {
   globalThis,
 } = primordials;
 const config = internalBinding('config');
-const { deprecate } = require('internal/util');
+const { deprecate } = require('../../internal/util');
 
 setupProcessObject();
 
@@ -135,10 +135,10 @@ ObjectDefineProperty(process, 'config', {
   }
 });
 
-require('internal/worker/js_transferable').setup();
+require('../../internal/worker/js_transferable').setup();
 
 // Bootstrappers for all threads, including worker threads and main thread
-const perThreadSetup = require('internal/process/per_thread');
+const perThreadSetup = require('../../internal/process/per_thread');
 const rawMethods = internalBinding('process_methods');
 
 // Set up methods on the process object for all threads
@@ -181,13 +181,13 @@ if (credentials.implementsPosixCredentials) {
 // process. They use the same functions as the JS embedder API. These callbacks
 // are setup immediately to prevent async_wrap.setupHooks() from being hijacked
 // and the cost of doing so is negligible.
-const { nativeHooks } = require('internal/async_hooks');
+const { nativeHooks } = require('../../internal/async_hooks');
 internalBinding('async_wrap').setupHooks(nativeHooks);
 
 const {
   setupTaskQueue,
   queueMicrotask
-} = require('internal/process/task_queues');
+} = require('../../internal/process/task_queues');
 
 if (!config.noBrowserGlobals) {
   // Override global console from the one provided by the VM
@@ -196,7 +196,7 @@ if (!config.noBrowserGlobals) {
   exposeNamespace(globalThis, 'console',
                   createGlobalConsole(globalThis.console));
 
-  const { URL, URLSearchParams } = require('internal/url');
+  const { URL, URLSearchParams } = require('../../internal/url');
   // https://url.spec.whatwg.org/#url
   exposeInterface(globalThis, 'URL', URL);
   // https://url.spec.whatwg.org/#urlsearchparams
@@ -204,7 +204,7 @@ if (!config.noBrowserGlobals) {
 
   const {
     TextEncoder, TextDecoder
-  } = require('internal/encoding');
+  } = require('../../internal/encoding');
   // https://encoding.spec.whatwg.org/#textencoder
   exposeInterface(globalThis, 'TextEncoder', TextEncoder);
   // https://encoding.spec.whatwg.org/#textdecoder
@@ -213,21 +213,21 @@ if (!config.noBrowserGlobals) {
   const {
     AbortController,
     AbortSignal,
-  } = require('internal/abort_controller');
+  } = require('../../internal/abort_controller');
   exposeInterface(globalThis, 'AbortController', AbortController);
   exposeInterface(globalThis, 'AbortSignal', AbortSignal);
 
   const {
     EventTarget,
     Event,
-  } = require('internal/event_target');
+  } = require('../../internal/event_target');
   exposeInterface(globalThis, 'EventTarget', EventTarget);
   exposeInterface(globalThis, 'Event', Event);
   const {
     MessageChannel,
     MessagePort,
     MessageEvent,
-  } = require('internal/worker/io');
+  } = require('../../internal/worker/io');
   exposeInterface(globalThis, 'MessageChannel', MessageChannel);
   exposeInterface(globalThis, 'MessagePort', MessagePort);
   exposeInterface(globalThis, 'MessageEvent', MessageEvent);
@@ -316,7 +316,7 @@ ObjectDefineProperty(process, 'features', {
     onGlobalUncaughtException,
     setUncaughtExceptionCaptureCallback,
     hasUncaughtExceptionCaptureCallback
-  } = require('internal/process/execution');
+  } = require('../../internal/process/execution');
 
   // For legacy reasons this is still called `_fatalException`, even
   // though it is now a global uncaught exception handler.
@@ -331,7 +331,7 @@ ObjectDefineProperty(process, 'features', {
     hasUncaughtExceptionCaptureCallback;
 }
 
-const { emitWarning } = require('internal/process/warning');
+const { emitWarning } = require('../../internal/process/warning');
 process.emitWarning = emitWarning;
 
 // We initialize the tick callbacks and the timer callbacks last during
@@ -346,7 +346,7 @@ process.emitWarning = emitWarning;
   // TODO(joyeecheung): either remove it or make it public
   process._tickCallback = runNextTicks;
 
-  const { getTimerCallbacks } = require('internal/timers');
+  const { getTimerCallbacks } = require('../../internal/timers');
   const { setupTimers } = internalBinding('timers');
   const { processImmediate, processTimers } = getTimerCallbacks(runNextTicks);
   // Sets two per-Environment callbacks that will be run from libuv:
@@ -374,7 +374,7 @@ function setupPrepareStackTrace() {
       beforeInspector,
       afterInspector
     }
-  } = require('internal/errors');
+  } = require('../../internal/errors');
   // Tell our PrepareStackTraceCallback passed to the V8 API
   // to call prepareStackTrace().
   setPrepareStackTraceCallback(prepareStackTrace);
@@ -448,9 +448,9 @@ function setupBuffer() {
 
 function createGlobalConsole(consoleFromVM) {
   const consoleFromNode =
-    require('internal/console/global');
+    require('../../internal/console/global');
   if (config.hasInspector) {
-    const inspector = require('internal/util/inspector');
+    const inspector = require('../../internal/util/inspector');
     // This will be exposed by `require('inspector').console` later.
     inspector.consoleFromVM = consoleFromVM;
     // TODO(joyeecheung): postpone this until the first time inspector
diff --git a/lib/internal/bootstrap/pre_execution.js b/lib/internal/bootstrap/pre_execution.js
index f2a1064190..878158cb7f 100644
--- a/lib/internal/bootstrap/pre_execution.js
+++ b/lib/internal/bootstrap/pre_execution.js
@@ -12,12 +12,12 @@ const {
 const {
   getOptionValue,
   getEmbedderOptions,
-} = require('internal/options');
-const { reconnectZeroFillToggle } = require('internal/buffer');
+} = require('../../internal/options');
+const { reconnectZeroFillToggle } = require('../../internal/buffer');
 
 const { Buffer } = require('buffer');
-const { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;
-const assert = require('internal/assert');
+const { ERR_MANIFEST_ASSERT_INTEGRITY } = require('../../internal/errors').codes;
+const assert = require('../../internal/assert');
 
 function prepareMainThreadExecution(expandArgv1 = false) {
   // TODO(joyeecheung): this is also necessary for workers when they deserialize
@@ -72,7 +72,7 @@ function prepareMainThreadExecution(expandArgv1 = false) {
   initializeCJSLoader();
   initializeESMLoader();
 
-  const CJSLoader = require('internal/modules/cjs/loader');
+  const CJSLoader = require('../../internal/modules/cjs/loader');
   assert(!CJSLoader.hasLoadedAnyUserCJSModule);
   loadPreloadModules();
   initializeFrozenIntrinsics();
@@ -88,7 +88,7 @@ function patchProcessObject(expandArgv1) {
   const {
     hrtime,
     hrtimeBigInt
-  } = require('internal/process/per_thread').getFastAPIs(binding);
+  } = require('../../internal/process/per_thread').getFastAPIs(binding);
 
   process.hrtime = hrtime;
   process.hrtime.bigint = hrtimeBigInt;
@@ -141,7 +141,7 @@ function addReadOnlyProcessAlias(name, option, enumerable = true) {
 function setupWarningHandler() {
   const {
     onWarning
-  } = require('internal/process/warning');
+  } = require('../../internal/process/warning');
   if (getOptionValue('--warnings') &&
     process.env.NODE_NO_WARNINGS !== '1') {
     process.on('warning', onWarning);
@@ -151,11 +151,11 @@ function setupWarningHandler() {
 // Setup User-facing NODE_V8_COVERAGE environment variable that writes
 // ScriptCoverage to a specified file.
 function setupCoverageHooks(dir) {
-  const cwd = require('internal/process/execution').tryGetCwd();
+  const cwd = require('../../internal/process/execution').tryGetCwd();
   const { resolve } = require('path');
   const coverageDirectory = resolve(cwd, dir);
   const { sourceMapCacheToObject } =
-    require('internal/source_map/source_map_cache');
+    require('../../internal/source_map/source_map_cache');
 
   if (process.features.inspector) {
     internalBinding('profiler').setCoverageDirectory(coverageDirectory);
@@ -173,14 +173,14 @@ function setupStacktracePrinterOnSigint() {
   if (!getOptionValue('--trace-sigint')) {
     return;
   }
-  const { SigintWatchdog } = require('internal/watchdog');
+  const { SigintWatchdog } = require('../../internal/watchdog');
 
   const watchdog = new SigintWatchdog();
   watchdog.start();
 }
 
 function initializeReport() {
-  const { report } = require('internal/process/report');
+  const { report } = require('../../internal/process/report');
   ObjectDefineProperty(process, 'report', {
     enumerable: false,
     configurable: true,
@@ -191,15 +191,15 @@ function initializeReport() {
 }
 
 function setupDebugEnv() {
-  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);
+  require('../../internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);
   if (getOptionValue('--expose-internals')) {
-    require('internal/bootstrap/loaders').NativeModule.exposeInternals();
+    require('../../internal/bootstrap/loaders').NativeModule.exposeInternals();
   }
 }
 
 // This has to be called after initializeReport() is called
 function initializeReportSignalHandlers() {
-  const { addSignalHandler } = require('internal/process/report');
+  const { addSignalHandler } = require('../../internal/process/report');
 
   addSignalHandler();
 }
@@ -210,7 +210,7 @@ function initializeHeapSnapshotSignalHandlers() {
   if (!signal)
     return;
 
-  require('internal/validators').validateSignalName(signal);
+  require('../../internal/validators').validateSignalName(signal);
   const { writeHeapSnapshot } = require('v8');
 
   process.on(signal, () => {
@@ -220,13 +220,13 @@ function initializeHeapSnapshotSignalHandlers() {
 
 function setupTraceCategoryState() {
   const { isTraceCategoryEnabled } = internalBinding('trace_events');
-  const { toggleTraceCategoryState } = require('internal/process/per_thread');
+  const { toggleTraceCategoryState } = require('../../internal/process/per_thread');
   toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));
 }
 
 function setupPerfHooks() {
-  require('internal/perf/performance').refreshTimeOrigin();
-  require('internal/perf/utils').refreshTimeOrigin();
+  require('../../internal/perf/performance').refreshTimeOrigin();
+  require('../../internal/perf/utils').refreshTimeOrigin();
 }
 
 function setupInspectorHooks() {
@@ -239,7 +239,7 @@ function setupInspectorHooks() {
     const {
       enable,
       disable
-    } = require('internal/inspector_async_hook');
+    } = require('../../internal/inspector_async_hook');
     internalBinding('inspector').registerAsyncHook(enable, disable);
   }
 }
@@ -248,13 +248,13 @@ function setupInspectorHooks() {
 // this is used to deprecate APIs implemented in C++ where the deprecation
 // utilities are not easily accessible.
 function initializeDeprecations() {
-  const { deprecate } = require('internal/util');
+  const { deprecate } = require('../../internal/util');
   const pendingDeprecation = getOptionValue('--pending-deprecation');
 
   // DEP0103: access to `process.binding('util').isX` type checkers
   // TODO(addaleax): Turn into a full runtime deprecation.
   const utilBinding = internalBinding('util');
-  const types = require('internal/util/types');
+  const types = require('../../internal/util/types');
   for (const name of [
     'isArrayBuffer',
     'isArrayBufferView',
@@ -336,7 +336,7 @@ function initializeDeprecations() {
 
 function setupChildProcessIpcChannel() {
   if (process.env.NODE_CHANNEL_FD) {
-    const assert = require('internal/assert');
+    const assert = require('../../internal/assert');
 
     const fd = NumberParseInt(process.env.NODE_CHANNEL_FD, 10);
     assert(fd >= 0);
@@ -367,7 +367,7 @@ function initializePolicy() {
   if (experimentalPolicy) {
     process.emitWarning('Policies are experimental.',
                         'ExperimentalWarning');
-    const { pathToFileURL, URL } = require('internal/url');
+    const { pathToFileURL, URL } = require('../../internal/url');
     // URL here as it is slightly different parsing
     // no bare specifiers for now
     let manifestURL;
@@ -382,7 +382,7 @@ function initializePolicy() {
     const src = fs.readFileSync(manifestURL, 'utf8');
     const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');
     if (experimentalPolicyIntegrity) {
-      const SRI = require('internal/policy/sri');
+      const SRI = require('../../internal/policy/sri');
       const { createHash, timingSafeEqual } = require('crypto');
       const realIntegrities = new SafeMap();
       const integrityEntries = SRI.parse(experimentalPolicyIntegrity);
@@ -406,26 +406,26 @@ function initializePolicy() {
         throw new ERR_MANIFEST_ASSERT_INTEGRITY(manifestURL, realIntegrities);
       }
     }
-    require('internal/process/policy')
+    require('../../internal/process/policy')
       .setup(src, manifestURL.href);
   }
 }
 
 function initializeWASI() {
-  const { NativeModule } = require('internal/bootstrap/loaders');
+  const { NativeModule } = require('../../internal/bootstrap/loaders');
   const mod = NativeModule.map.get('wasi');
   mod.canBeRequiredByUsers =
     getOptionValue('--experimental-wasi-unstable-preview1');
 }
 
 function initializeCJSLoader() {
-  const CJSLoader = require('internal/modules/cjs/loader');
+  const CJSLoader = require('../../internal/modules/cjs/loader');
   if (!getEmbedderOptions().noGlobalSearchPaths) {
     CJSLoader.Module._initPaths();
   }
   // TODO(joyeecheung): deprecate this in favor of a proper hook?
   CJSLoader.Module.runMain =
-    require('internal/modules/run_main').executeUserEntryPoint;
+    require('../../internal/modules/run_main').executeUserEntryPoint;
 }
 
 function initializeESMLoader() {
@@ -438,7 +438,7 @@ function initializeESMLoader() {
     setImportModuleDynamicallyCallback,
     setInitializeImportMetaObjectCallback
   } = internalBinding('module_wrap');
-  const esm = require('internal/process/esm_loader');
+  const esm = require('../../internal/process/esm_loader');
   // Setup per-isolate callbacks that locate data or callbacks that we keep
   // track of for different ESM modules.
   setInitializeImportMetaObjectCallback(esm.initializeImportMetaObject);
@@ -449,7 +449,7 @@ function initializeESMLoader() {
   if (getOptionValue('--experimental-vm-modules')) {
     const {
       Module, SourceTextModule, SyntheticModule,
-    } = require('internal/vm/module');
+    } = require('../../internal/vm/module');
     const vm = require('vm');
     vm.Module = Module;
     vm.SourceTextModule = SourceTextModule;
@@ -459,7 +459,7 @@ function initializeESMLoader() {
 
 function initializeSourceMapsHandlers() {
   const { setSourceMapsEnabled } =
-    require('internal/source_map/source_map_cache');
+    require('../../internal/source_map/source_map_cache');
   process.setSourceMapsEnabled = setSourceMapsEnabled;
 }
 
@@ -467,7 +467,7 @@ function initializeFrozenIntrinsics() {
   if (getOptionValue('--frozen-intrinsics')) {
     process.emitWarning('The --frozen-intrinsics flag is experimental',
                         'ExperimentalWarning');
-    require('internal/freeze_intrinsics')();
+    require('../../internal/freeze_intrinsics')();
   }
 }
 
@@ -479,7 +479,7 @@ function loadPreloadModules() {
       Module: {
         _preloadModules
       },
-    } = require('internal/modules/cjs/loader');
+    } = require('../../internal/modules/cjs/loader');
     _preloadModules(preloadModules);
   }
 }
diff --git a/lib/internal/bootstrap/switches/does_not_own_process_state.js b/lib/internal/bootstrap/switches/does_not_own_process_state.js
index 69946e802e..a137014a93 100644
--- a/lib/internal/bootstrap/switches/does_not_own_process_state.js
+++ b/lib/internal/bootstrap/switches/does_not_own_process_state.js
@@ -3,7 +3,7 @@
 const credentials = internalBinding('credentials');
 const rawMethods = internalBinding('process_methods');
 // TODO: this should be detached from ERR_WORKER_UNSUPPORTED_OPERATION
-const { unavailable } = require('internal/process/worker_thread_only');
+const { unavailable } = require('../../../internal/process/worker_thread_only');
 
 process.abort = unavailable('process.abort()');
 process.chdir = unavailable('process.chdir()');
@@ -24,7 +24,7 @@ if (credentials.implementsPosixCredentials) {
 
 const {
   codes: { ERR_WORKER_UNSUPPORTED_OPERATION }
-} = require('internal/errors');
+} = require('../../../internal/errors');
 
 function wrappedUmask(mask) {
   // process.umask() is a read-only operation in workers.
diff --git a/lib/internal/bootstrap/switches/does_own_process_state.js b/lib/internal/bootstrap/switches/does_own_process_state.js
index 2924e7f8cc..1da18ef577 100644
--- a/lib/internal/bootstrap/switches/does_own_process_state.js
+++ b/lib/internal/bootstrap/switches/does_own_process_state.js
@@ -26,7 +26,7 @@ const {
   parseFileMode,
   validateArray,
   validateString
-} = require('internal/validators');
+} = require('../../../internal/validators');
 
 function wrapPosixCredentialSetters(credentials) {
   const {
@@ -34,10 +34,10 @@ function wrapPosixCredentialSetters(credentials) {
       ERR_INVALID_ARG_TYPE,
       ERR_UNKNOWN_CREDENTIAL
     }
-  } = require('internal/errors');
+  } = require('../../../internal/errors');
   const {
     validateUint32
-  } = require('internal/validators');
+  } = require('../../../internal/validators');
 
   const {
     initgroups: _initgroups,
diff --git a/lib/internal/bootstrap/switches/is_main_thread.js b/lib/internal/bootstrap/switches/is_main_thread.js
index 1885f79ffe..ca4ccd4ce4 100644
--- a/lib/internal/bootstrap/switches/is_main_thread.js
+++ b/lib/internal/bootstrap/switches/is_main_thread.js
@@ -29,7 +29,7 @@ defineStream('stderr', getStderr);
 const {
   startListeningIfSignal,
   stopListeningIfSignal
-} = require('internal/process/signal');
+} = require('../../../internal/process/signal');
 process.on('newListener', startListeningIfSignal);
 process.on('removeListener', stopListeningIfSignal);
 
@@ -49,7 +49,7 @@ function createWritableStdioStream(fd) {
       break;
 
     case 'FILE':
-      const SyncWriteStream = require('internal/fs/sync_write_stream');
+      const SyncWriteStream = require('../../../internal/fs/sync_write_stream');
       stream = new SyncWriteStream(fd, { autoClose: false });
       stream._type = 'fs';
       break;
@@ -62,7 +62,7 @@ function createWritableStdioStream(fd) {
       // an error when trying to use it again. In that case, create the socket
       // using the existing handle instead of the fd.
       if (process.channel && process.channel.fd === fd) {
-        const { kChannelHandle } = require('internal/child_process');
+        const { kChannelHandle } = require('../../../internal/child_process');
         stream = new net.Socket({
           handle: process[kChannelHandle],
           readable: false,
diff --git a/lib/internal/bootstrap/switches/is_not_main_thread.js b/lib/internal/bootstrap/switches/is_not_main_thread.js
index 379ad0a587..000ee04c42 100644
--- a/lib/internal/bootstrap/switches/is_not_main_thread.js
+++ b/lib/internal/bootstrap/switches/is_not_main_thread.js
@@ -21,7 +21,7 @@ defineStream('stderr', getStderr);
 const {
   startListeningIfSignal,
   stopListeningIfSignal
-} = require('internal/process/signal');
+} = require('../../../internal/process/signal');
 process.removeListener('newListener', startListeningIfSignal);
 process.removeListener('removeListener', stopListeningIfSignal);
 
@@ -30,7 +30,7 @@ process.removeListener('removeListener', stopListeningIfSignal);
 
 const {
   createWorkerStdio
-} = require('internal/worker/io');
+} = require('../../../internal/worker/io');
 
 let workerStdio;
 function lazyWorkerStdio() {
diff --git a/lib/internal/buffer.js b/lib/internal/buffer.js
index bd38cf48a7..1786ee6e0a 100644
--- a/lib/internal/buffer.js
+++ b/lib/internal/buffer.js
@@ -13,8 +13,8 @@ const {
   ERR_BUFFER_OUT_OF_BOUNDS,
   ERR_INVALID_ARG_TYPE,
   ERR_OUT_OF_RANGE
-} = require('internal/errors').codes;
-const { validateNumber } = require('internal/validators');
+} = require('../internal/errors').codes;
+const { validateNumber } = require('../internal/validators');
 const {
   asciiSlice,
   base64Slice,
diff --git a/lib/internal/child_process.js b/lib/internal/child_process.js
index d46a5ce03f..3462b1bb3e 100644
--- a/lib/internal/child_process.js
+++ b/lib/internal/child_process.js
@@ -28,18 +28,18 @@ const {
     ERR_IPC_SYNC_FORK,
     ERR_MISSING_ARGS
   }
-} = require('internal/errors');
+} = require('../internal/errors');
 const {
   validateArray,
   validateObject,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../internal/validators');
 const EventEmitter = require('events');
 const net = require('net');
 const dgram = require('dgram');
-const inspect = require('internal/util/inspect').inspect;
-const assert = require('internal/assert');
+const inspect = require('../internal/util/inspect').inspect;
+const assert = require('../internal/assert');
 
 const { Process } = internalBinding('process_wrap');
 const {
@@ -53,12 +53,12 @@ const { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');
 const { TCP } = internalBinding('tcp_wrap');
 const { TTY } = internalBinding('tty_wrap');
 const { UDP } = internalBinding('udp_wrap');
-const SocketList = require('internal/socket_list');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { convertToValidSignal, deprecate } = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
+const SocketList = require('../internal/socket_list');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
+const { convertToValidSignal, deprecate } = require('../internal/util');
+const { isArrayBufferView } = require('../internal/util/types');
 const spawn_sync = internalBinding('spawn_sync');
-const { kStateSymbol } = require('internal/dgram');
+const { kStateSymbol } = require('../internal/dgram');
 
 const {
   UV_EACCES,
@@ -586,7 +586,7 @@ function setupChannel(target, channel, serializationMode) {
   target._pendingMessage = null;
 
   if (serialization === undefined)
-    serialization = require('internal/child_process/serialization');
+    serialization = require('../internal/child_process/serialization');
   const {
     initMessageChannel,
     parseChannelMessages,
diff --git a/lib/internal/child_process/serialization.js b/lib/internal/child_process/serialization.js
index ec858f401b..84ddf85426 100644
--- a/lib/internal/child_process/serialization.js
+++ b/lib/internal/child_process/serialization.js
@@ -10,8 +10,8 @@ const {
 const { Buffer } = require('buffer');
 const { StringDecoder } = require('string_decoder');
 const v8 = require('v8');
-const { isArrayBufferView } = require('internal/util/types');
-const assert = require('internal/assert');
+const { isArrayBufferView } = require('../../internal/util/types');
+const assert = require('../../internal/assert');
 const { streamBaseState, kLastWriteWasAsync } = internalBinding('stream_wrap');
 
 const kMessageBuffer = Symbol('kMessageBuffer');
diff --git a/lib/internal/cli_table.js b/lib/internal/cli_table.js
index 79b15a38f4..8d31100724 100644
--- a/lib/internal/cli_table.js
+++ b/lib/internal/cli_table.js
@@ -10,7 +10,7 @@ const {
   StringPrototypeRepeat,
 } = primordials;
 
-const { getStringWidth } = require('internal/util/inspect');
+const { getStringWidth } = require('../internal/util/inspect');
 
 // The use of Unicode characters below is the only non-comment use of non-ASCII
 // Unicode characters in Node.js built-in modules. If they are ever removed or
diff --git a/lib/internal/cluster/child.js b/lib/internal/cluster/child.js
index 00638e7784..0245458735 100644
--- a/lib/internal/cluster/child.js
+++ b/lib/internal/cluster/child.js
@@ -9,12 +9,12 @@ const {
   SafeSet,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const path = require('path');
 const EventEmitter = require('events');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const Worker = require('internal/cluster/worker');
-const { internal, sendHelper } = require('internal/cluster/utils');
+const { owner_symbol } = require('../../internal/async_hooks').symbols;
+const Worker = require('../../internal/cluster/worker');
+const { internal, sendHelper } = require('../../internal/cluster/utils');
 const cluster = new EventEmitter();
 const handles = new SafeMap();
 const indexes = new SafeMap();
diff --git a/lib/internal/cluster/primary.js b/lib/internal/cluster/primary.js
index 69e97eb8a6..6464f5c270 100644
--- a/lib/internal/cluster/primary.js
+++ b/lib/internal/cluster/primary.js
@@ -11,21 +11,21 @@ const {
   StringPrototypeStartsWith,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const { fork } = require('child_process');
 const path = require('path');
 const EventEmitter = require('events');
-const RoundRobinHandle = require('internal/cluster/round_robin_handle');
-const SharedHandle = require('internal/cluster/shared_handle');
-const Worker = require('internal/cluster/worker');
-const { internal, sendHelper } = require('internal/cluster/utils');
+const RoundRobinHandle = require('../../internal/cluster/round_robin_handle');
+const SharedHandle = require('../../internal/cluster/shared_handle');
+const Worker = require('../../internal/cluster/worker');
+const { internal, sendHelper } = require('../../internal/cluster/utils');
 const cluster = new EventEmitter();
 const intercom = new EventEmitter();
 const SCHED_NONE = 1;
 const SCHED_RR = 2;
 const minPort = 1024;
 const maxPort = 65535;
-const { validatePort } = require('internal/validators');
+const { validatePort } = require('../../internal/validators');
 
 module.exports = cluster;
 
diff --git a/lib/internal/cluster/round_robin_handle.js b/lib/internal/cluster/round_robin_handle.js
index 7789762101..e855f78a59 100644
--- a/lib/internal/cluster/round_robin_handle.js
+++ b/lib/internal/cluster/round_robin_handle.js
@@ -8,9 +8,9 @@ const {
   SafeMap,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const net = require('net');
-const { sendHelper } = require('internal/cluster/utils');
+const { sendHelper } = require('../../internal/cluster/utils');
 const { constants } = internalBinding('tcp_wrap');
 
 module.exports = RoundRobinHandle;
diff --git a/lib/internal/cluster/shared_handle.js b/lib/internal/cluster/shared_handle.js
index 87b83df200..f39c1e9c91 100644
--- a/lib/internal/cluster/shared_handle.js
+++ b/lib/internal/cluster/shared_handle.js
@@ -1,7 +1,7 @@
 'use strict';
 const { SafeMap } = primordials;
-const assert = require('internal/assert');
-const dgram = require('internal/dgram');
+const assert = require('../../internal/assert');
+const dgram = require('../../internal/dgram');
 const net = require('net');
 
 module.exports = SharedHandle;
diff --git a/lib/internal/console/constructor.js b/lib/internal/console/constructor.js
index 92c6d72933..1dcc2bff02 100644
--- a/lib/internal/console/constructor.js
+++ b/lib/internal/console/constructor.js
@@ -45,27 +45,27 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_INCOMPATIBLE_OPTION_PAIR,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateArray,
   validateInteger,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const { previewEntries } = internalBinding('util');
 const { Buffer: { isBuffer } } = require('buffer');
 const {
   inspect,
   formatWithOptions
-} = require('internal/util/inspect');
+} = require('../../internal/util/inspect');
 const {
   isTypedArray, isSet, isMap, isSetIterator, isMapIterator,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 const {
   CHAR_LOWERCASE_B: kTraceBegin,
   CHAR_LOWERCASE_E: kTraceEnd,
   CHAR_LOWERCASE_N: kTraceInstant,
   CHAR_UPPERCASE_C: kTraceCount,
-} = require('internal/constants');
+} = require('../../internal/constants');
 const kCounts = Symbol('counts');
 
 const kTraceConsoleCategory = 'node,node.console';
@@ -428,7 +428,7 @@ const consoleMethods = {
       const {
         cursorTo,
         clearScreenDown,
-      } = require('internal/readline/callbacks');
+      } = require('../../internal/readline/callbacks');
       cursorTo(this._stdout, 0, 0);
       clearScreenDown(this._stdout);
     }
@@ -485,7 +485,7 @@ const consoleMethods = {
     if (tabularData === null || typeof tabularData !== 'object')
       return this.log(tabularData);
 
-    if (cliTable === undefined) cliTable = require('internal/cli_table');
+    if (cliTable === undefined) cliTable = require('../../internal/cli_table');
     const final = (k, v) => this.log(cliTable(k, v));
 
     const _inspect = (v) => {
diff --git a/lib/internal/console/global.js b/lib/internal/console/global.js
index d6c0c24d52..574894d73c 100644
--- a/lib/internal/console/global.js
+++ b/lib/internal/console/global.js
@@ -24,7 +24,7 @@ const {
   Console,
   kBindStreamsLazy,
   kBindProperties
-} = require('internal/console/constructor');
+} = require('../../internal/console/constructor');
 
 const globalConsole = ObjectCreate({});
 
diff --git a/lib/internal/crypto/aes.js b/lib/internal/crypto/aes.js
index 0675c59ec3..070548d1da 100644
--- a/lib/internal/crypto/aes.js
+++ b/lib/internal/crypto/aes.js
@@ -42,11 +42,11 @@ const {
   kAesKeyLengths,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { PromiseReject } = primordials;
 
@@ -54,23 +54,23 @@ const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   InternalCryptoKey,
   SecretKeyObject,
   createSecretKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKey,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   validateInteger,
   validateOneOf,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const kMaxCounterLength = 128;
 const kTagLengths = [32, 64, 96, 104, 112, 120, 128];
diff --git a/lib/internal/crypto/certificate.js b/lib/internal/crypto/certificate.js
index 825153a4ac..e98a207e0e 100644
--- a/lib/internal/crypto/certificate.js
+++ b/lib/internal/crypto/certificate.js
@@ -8,7 +8,7 @@ const {
 
 const {
   getArrayBufferOrView,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 // The functions contained in this file cover the SPKAC format
 // (also referred to as Netscape SPKI). A general description of
diff --git a/lib/internal/crypto/cipher.js b/lib/internal/crypto/cipher.js
index d85606ba52..ab94cd287a 100644
--- a/lib/internal/crypto/cipher.js
+++ b/lib/internal/crypto/cipher.js
@@ -28,37 +28,37 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateEncoding,
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   preparePrivateKey,
   preparePublicOrPrivateKey,
   prepareSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   getDefaultEncoding,
   getArrayBufferOrView,
   getStringOption,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
-const LazyTransform = require('internal/streams/lazy_transform');
+const LazyTransform = require('../../internal/streams/lazy_transform');
 
-const { normalizeEncoding } = require('internal/util');
+const { normalizeEncoding } = require('../../internal/util');
 
 const { StringDecoder } = require('string_decoder');
 
diff --git a/lib/internal/crypto/diffiehellman.js b/lib/internal/crypto/diffiehellman.js
index 2efdbdd5ba..e39096dcfa 100644
--- a/lib/internal/crypto/diffiehellman.js
+++ b/lib/internal/crypto/diffiehellman.js
@@ -32,7 +32,7 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateCallback,
@@ -40,16 +40,16 @@ const {
   validateObject,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   KeyObject,
@@ -58,11 +58,11 @@ const {
   createPublicKey,
   isCryptoKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   getArrayBufferOrView,
@@ -73,7 +73,7 @@ const {
   toBuf,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   crypto: {
diff --git a/lib/internal/crypto/dsa.js b/lib/internal/crypto/dsa.js
index 12e327c6ed..845e03ab5d 100644
--- a/lib/internal/crypto/dsa.js
+++ b/lib/internal/crypto/dsa.js
@@ -21,11 +21,11 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_MISSING_OPTION,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   InternalCryptoKey,
@@ -34,11 +34,11 @@ const {
   createPrivateKey,
   createPublicKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   getUsagesUnion,
@@ -48,11 +48,11 @@ const {
   validateKeyOps,
   kKeyObject,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 function verifyAcceptableDsaKeyUse(name, type, usages) {
   let checkSet;
diff --git a/lib/internal/crypto/ec.js b/lib/internal/crypto/ec.js
index b64922bcdc..ea4dc2f634 100644
--- a/lib/internal/crypto/ec.js
+++ b/lib/internal/crypto/ec.js
@@ -24,14 +24,14 @@ const {
   validateBoolean,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_MISSING_OPTION,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   getArrayBufferOrView,
@@ -43,15 +43,15 @@ const {
   kHandle,
   kKeyObject,
   kNamedCurveAliases,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   InternalCryptoKey,
@@ -60,7 +60,7 @@ const {
   createPrivateKey,
   createPublicKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 function verifyAcceptableEcKeyUse(name, type, usages) {
   let checkSet;
diff --git a/lib/internal/crypto/hash.js b/lib/internal/crypto/hash.js
index 6c502f52b6..c58d36ed2e 100644
--- a/lib/internal/crypto/hash.js
+++ b/lib/internal/crypto/hash.js
@@ -22,11 +22,11 @@ const {
   normalizeHashName,
   validateMaxBufferLength,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   prepareSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   Buffer,
@@ -38,19 +38,19 @@ const {
     ERR_CRYPTO_HASH_UPDATE_FAILED,
     ERR_INVALID_ARG_TYPE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateEncoding,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const LazyTransform = require('internal/streams/lazy_transform');
+const LazyTransform = require('../../internal/streams/lazy_transform');
 
 const kState = Symbol('kState');
 const kFinalized = Symbol('kFinalized');
diff --git a/lib/internal/crypto/hkdf.js b/lib/internal/crypto/hkdf.js
index 1d8251a924..ff17a75dbd 100644
--- a/lib/internal/crypto/hkdf.js
+++ b/lib/internal/crypto/hkdf.js
@@ -17,7 +17,7 @@ const {
   validateInteger,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { kMaxLength } = require('buffer');
 
@@ -27,21 +27,21 @@ const {
   toBuf,
   validateByteSource,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   createSecretKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   codes: {
@@ -50,7 +50,7 @@ const {
     ERR_MISSING_OPTION,
   },
   hideStackFrames,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const validateParameters = hideStackFrames((hash, key, salt, info, length) => {
   key = prepareKey(key);
diff --git a/lib/internal/crypto/keygen.js b/lib/internal/crypto/keygen.js
index 1469a01682..a69158a065 100644
--- a/lib/internal/crypto/keygen.js
+++ b/lib/internal/crypto/keygen.js
@@ -32,13 +32,13 @@ const {
   parsePublicKeyEncoding,
   parsePrivateKeyEncoding,
   isJwk
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   kAesKeyLengths,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
-const { customPromisifyArgs } = require('internal/util');
+const { customPromisifyArgs } = require('../../internal/util');
 
 const {
   isInt32,
@@ -48,7 +48,7 @@ const {
   validateInteger,
   validateObject,
   validateOneOf,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -56,11 +56,11 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_MISSING_OPTION,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const { isArrayBufferView } = require('internal/util/types');
+const { isArrayBufferView } = require('../../internal/util/types');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 const pendingDeprecation = getOptionValue('--pending-deprecation');
 
 function wrapKey(key, ctor) {
diff --git a/lib/internal/crypto/keys.js b/lib/internal/crypto/keys.js
index ea2ecc262e..317d36c627 100644
--- a/lib/internal/crypto/keys.js
+++ b/lib/internal/crypto/keys.js
@@ -28,7 +28,7 @@ const {
   validateObject,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -40,31 +40,31 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_OUT_OF_RANGE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   kHandle,
   kKeyObject,
   getArrayBufferOrView,
   bigIntArrayToUnsignedBigInt,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   JSTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 const { Buffer } = require('buffer');
 
diff --git a/lib/internal/crypto/mac.js b/lib/internal/crypto/mac.js
index 61fcc88a92..08a4b24a73 100644
--- a/lib/internal/crypto/mac.js
+++ b/lib/internal/crypto/mac.js
@@ -23,29 +23,29 @@ const {
   validateKeyOps,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   codes: {
     ERR_MISSING_OPTION,
     ERR_INVALID_ARG_TYPE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   generateKey,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   InternalCryptoKey,
   SecretKeyObject,
   createSecretKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 async function hmacGenerateKey(algorithm, extractable, keyUsages) {
   const { hash, name } = algorithm;
diff --git a/lib/internal/crypto/pbkdf2.js b/lib/internal/crypto/pbkdf2.js
index 753c4f2d9d..0fe6bd5f18 100644
--- a/lib/internal/crypto/pbkdf2.js
+++ b/lib/internal/crypto/pbkdf2.js
@@ -18,20 +18,20 @@ const {
   validateInteger,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
-const { ERR_MISSING_OPTION } = require('internal/errors').codes;
+const { ERR_MISSING_OPTION } = require('../../internal/errors').codes;
 
 const {
   getArrayBufferOrView,
   getDefaultEncoding,
   normalizeHashName,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 function pbkdf2(password, salt, iterations, keylen, digest, callback) {
   if (typeof digest === 'function') {
diff --git a/lib/internal/crypto/random.js b/lib/internal/crypto/random.js
index 8812120091..bc3be36c11 100644
--- a/lib/internal/crypto/random.js
+++ b/lib/internal/crypto/random.js
@@ -27,7 +27,7 @@ const {
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { Buffer, kMaxLength } = require('buffer');
 
@@ -37,7 +37,7 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_OPERATION_FAILED,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateNumber,
@@ -45,16 +45,16 @@ const {
   validateCallback,
   validateObject,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
   isFloat32Array,
   isFloat64Array,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const { FastBuffer } = require('internal/buffer');
+const { FastBuffer } = require('../../internal/buffer');
 
 const kMaxInt32 = 2 ** 31 - 1;
 const kMaxPossibleLength = MathMin(kMaxLength, kMaxInt32);
diff --git a/lib/internal/crypto/rsa.js b/lib/internal/crypto/rsa.js
index 8e4b6af571..37b6fc9b6e 100644
--- a/lib/internal/crypto/rsa.js
+++ b/lib/internal/crypto/rsa.js
@@ -27,12 +27,12 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_MISSING_OPTION,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateInt32,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   bigIntArrayToUnsignedInt,
@@ -45,15 +45,15 @@ const {
   validateMaxBufferLength,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isUint8Array,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   InternalCryptoKey,
@@ -62,11 +62,11 @@ const {
   createPublicKey,
   createPrivateKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const kRsaVariants = {
   'RSASSA-PKCS1-v1_5': kKeyVariantRSA_SSA_PKCS1_v1_5,
diff --git a/lib/internal/crypto/scrypt.js b/lib/internal/crypto/scrypt.js
index 63a5547e4c..c3baf8fc84 100644
--- a/lib/internal/crypto/scrypt.js
+++ b/lib/internal/crypto/scrypt.js
@@ -18,24 +18,24 @@ const {
   validateInteger,
   validateInt32,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
     ERR_CRYPTO_SCRYPT_INVALID_PARAMETER,
     ERR_CRYPTO_SCRYPT_NOT_SUPPORTED,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   getArrayBufferOrView,
   getDefaultEncoding,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const defaults = {
   N: 16384,
diff --git a/lib/internal/crypto/sig.js b/lib/internal/crypto/sig.js
index a204f35e60..3bb6151b46 100644
--- a/lib/internal/crypto/sig.js
+++ b/lib/internal/crypto/sig.js
@@ -12,13 +12,13 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateCallback,
   validateEncoding,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Sign: _Sign,
@@ -36,12 +36,12 @@ const {
   getArrayBufferOrView,
   getDefaultEncoding,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   preparePrivateKey,
   preparePublicOrPrivateKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const { Writable } = require('stream');
 
@@ -49,7 +49,7 @@ const { Buffer } = require('buffer');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 function Sign(algorithm, options) {
   if (!(this instanceof Sign))
diff --git a/lib/internal/crypto/util.js b/lib/internal/crypto/util.js
index eafcc3d966..eb270de2bc 100644
--- a/lib/internal/crypto/util.js
+++ b/lib/internal/crypto/util.js
@@ -20,7 +20,7 @@ const {
   secureHeapUsed: _secureHeapUsed,
 } = internalBinding('crypto');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 const {
   crypto: {
@@ -28,7 +28,7 @@ const {
   }
 } = internalBinding('constants');
 
-const normalizeHashName = require('internal/crypto/hashnames');
+const normalizeHashName = require('../../internal/crypto/hashnames');
 
 const {
   hideStackFrames,
@@ -38,13 +38,13 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_OUT_OF_RANGE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateArray,
   validateNumber,
   validateString
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { Buffer } = require('buffer');
 
@@ -52,12 +52,12 @@ const {
   cachedResult,
   filterDuplicateStrings,
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const kHandle = Symbol('kHandle');
 const kKeyObject = Symbol('kKeyObject');
diff --git a/lib/internal/crypto/webcrypto.js b/lib/internal/crypto/webcrypto.js
index 0edd5c2cd3..8d12885da4 100644
--- a/lib/internal/crypto/webcrypto.js
+++ b/lib/internal/crypto/webcrypto.js
@@ -24,15 +24,15 @@ const {
   validateObject,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
-const { TextDecoder, TextEncoder } = require('internal/encoding');
+const { TextDecoder, TextEncoder } = require('../../internal/encoding');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   CryptoKey,
@@ -40,11 +40,11 @@ const {
   createSecretKey,
   isCryptoKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   asyncDigest,
-} = require('internal/crypto/hash');
+} = require('../../internal/crypto/hash');
 
 const {
   getArrayBufferOrView,
@@ -56,16 +56,16 @@ const {
   kExportFormats,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   getRandomValues,
   randomUUID: _randomUUID,
-} = require('internal/crypto/random');
+} = require('../../internal/crypto/random');
 
 const randomUUID = () => _randomUUID();
 
@@ -82,7 +82,7 @@ async function generateKey(
     case 'RSA-PSS':
       // Fall through
     case 'RSA-OAEP':
-      return lazyRequire('internal/crypto/rsa')
+      return lazyrequire('../../internal/crypto/rsa')
         .rsaKeyGenerate(algorithm, extractable, keyUsages);
     case 'NODE-ED25519':
       // Fall through
@@ -91,10 +91,10 @@ async function generateKey(
     case 'ECDSA':
       // Fall through
     case 'ECDH':
-      return lazyRequire('internal/crypto/ec')
+      return lazyrequire('../../internal/crypto/ec')
         .ecGenerateKey(algorithm, extractable, keyUsages);
     case 'HMAC':
-      return lazyRequire('internal/crypto/mac')
+      return lazyrequire('../../internal/crypto/mac')
         .hmacGenerateKey(algorithm, extractable, keyUsages);
     case 'AES-CTR':
       // Fall through
@@ -103,16 +103,16 @@ async function generateKey(
     case 'AES-GCM':
       // Fall through
     case 'AES-KW':
-      return lazyRequire('internal/crypto/aes')
+      return lazyrequire('../../internal/crypto/aes')
         .aesGenerateKey(algorithm, extractable, keyUsages);
 
     // Following are Node.js specific extensions. Names must be prefixed
     // with the `NODE-`
     case 'NODE-DSA':
-      return lazyRequire('internal/crypto/dsa')
+      return lazyrequire('../../internal/crypto/dsa')
         .dsaGenerateKey(algorithm, extractable, keyUsages);
     case 'NODE-DH':
-      return lazyRequire('internal/crypto/diffiehellman')
+      return lazyrequire('../../internal/crypto/diffiehellman')
         .dhGenerateKey(algorithm, extractable, keyUsages);
     default:
       throw lazyDOMException('Unrecognized name.');
@@ -132,19 +132,19 @@ async function deriveBits(algorithm, baseKey, length) {
     throw lazyDOMException('Key algorithm mismatch', 'InvalidAccessError');
   switch (algorithm.name) {
     case 'ECDH':
-      return lazyRequire('internal/crypto/diffiehellman')
+      return lazyrequire('../../internal/crypto/diffiehellman')
         .asyncDeriveBitsECDH(algorithm, baseKey, length);
     case 'HKDF':
-      return lazyRequire('internal/crypto/hkdf')
+      return lazyrequire('../../internal/crypto/hkdf')
         .hkdfDeriveBits(algorithm, baseKey, length);
     case 'PBKDF2':
-      return lazyRequire('internal/crypto/pbkdf2')
+      return lazyrequire('../../internal/crypto/pbkdf2')
         .pbkdf2DeriveBits(algorithm, baseKey, length);
     case 'NODE-SCRYPT':
-      return lazyRequire('internal/crypto/scrypt')
+      return lazyrequire('../../internal/crypto/scrypt')
         .scryptDeriveBits(algorithm, baseKey, length);
     case 'NODE-DH':
-      return lazyRequire('internal/crypto/diffiehellman')
+      return lazyrequire('../../internal/crypto/diffiehellman')
         .asyncDeriveBitsDH(algorithm, baseKey, length);
   }
   throw lazyDOMException('Unrecognized name.');
@@ -177,23 +177,23 @@ async function deriveKey(
   let bits;
   switch (algorithm.name) {
     case 'ECDH':
-      bits = await lazyRequire('internal/crypto/diffiehellman')
+      bits = await lazyrequire('../../internal/crypto/diffiehellman')
         .asyncDeriveBitsECDH(algorithm, baseKey, length);
       break;
     case 'HKDF':
-      bits = await lazyRequire('internal/crypto/hkdf')
+      bits = await lazyrequire('../../internal/crypto/hkdf')
         .hkdfDeriveBits(algorithm, baseKey, length);
       break;
     case 'PBKDF2':
-      bits = await lazyRequire('internal/crypto/pbkdf2')
+      bits = await lazyrequire('../../internal/crypto/pbkdf2')
         .pbkdf2DeriveBits(algorithm, baseKey, length);
       break;
     case 'NODE-SCRYPT':
-      bits = await lazyRequire('internal/crypto/scrypt')
+      bits = await lazyrequire('../../internal/crypto/scrypt')
         .scryptDeriveBits(algorithm, baseKey, length);
       break;
     case 'NODE-DH':
-      bits = await lazyRequire('internal/crypto/diffiehellman')
+      bits = await lazyrequire('../../internal/crypto/diffiehellman')
         .asyncDeriveBitsDH(algorithm, baseKey, length);
       break;
     default:
@@ -211,7 +211,7 @@ async function exportKeySpki(key) {
       // Fall through
     case 'RSA-OAEP':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/rsa')
+        return lazyrequire('../../internal/crypto/rsa')
           .rsaExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
@@ -223,19 +223,19 @@ async function exportKeySpki(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/ec')
+        return lazyrequire('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
     case 'NODE-DSA':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/dsa')
+        return lazyrequire('../../internal/crypto/dsa')
           .dsaExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
     case 'NODE-DH':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/diffiehellman')
+        return lazyrequire('../../internal/crypto/diffiehellman')
           .dhExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
@@ -254,7 +254,7 @@ async function exportKeyPkcs8(key) {
       // Fall through
     case 'RSA-OAEP':
       if (key.type === 'private') {
-        return lazyRequire('internal/crypto/rsa')
+        return lazyrequire('../../internal/crypto/rsa')
           .rsaExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
@@ -266,19 +266,19 @@ async function exportKeyPkcs8(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'private') {
-        return lazyRequire('internal/crypto/ec')
+        return lazyrequire('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
     case 'NODE-DSA':
       if (key.type === 'private') {
-        return lazyRequire('internal/crypto/dsa')
+        return lazyrequire('../../internal/crypto/dsa')
           .dsaExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
     case 'NODE-DH':
       if (key.type === 'private') {
-        return lazyRequire('internal/crypto/diffiehellman')
+        return lazyrequire('../../internal/crypto/diffiehellman')
           .dhExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
@@ -295,7 +295,7 @@ async function exportKeyRaw(key) {
       // Fall through
     case 'NODE-ED448':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/ec')
+        return lazyrequire('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatRaw);
       }
       break;
@@ -303,7 +303,7 @@ async function exportKeyRaw(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'public') {
-        return lazyRequire('internal/crypto/ec')
+        return lazyrequire('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatRaw);
       }
       break;
@@ -357,7 +357,7 @@ async function exportKeyJWK(key) {
     case 'AES-GCM':
       // Fall through
     case 'AES-KW':
-      jwk.alg = lazyRequire('internal/crypto/aes')
+      jwk.alg = lazyrequire('../../internal/crypto/aes')
         .getAlgorithmName(key.algorithm.name, key.algorithm.length);
       return jwk;
     case 'HMAC':
@@ -475,7 +475,7 @@ async function importKey(
     case 'RSA-PSS':
       // Fall through
     case 'RSA-OAEP':
-      return lazyRequire('internal/crypto/rsa')
+      return lazyrequire('../../internal/crypto/rsa')
         .rsaImportKey(format, keyData, algorithm, extractable, keyUsages);
     case 'NODE-ED25519':
       // Fall through
@@ -484,10 +484,10 @@ async function importKey(
     case 'ECDSA':
       // Fall through
     case 'ECDH':
-      return lazyRequire('internal/crypto/ec')
+      return lazyrequire('../../internal/crypto/ec')
         .ecImportKey(format, keyData, algorithm, extractable, keyUsages);
     case 'HMAC':
-      return lazyRequire('internal/crypto/mac')
+      return lazyrequire('../../internal/crypto/mac')
         .hmacImportKey(format, keyData, algorithm, extractable, keyUsages);
     case 'AES-CTR':
       // Fall through
@@ -496,7 +496,7 @@ async function importKey(
     case 'AES-GCM':
       // Fall through
     case 'AES-KW':
-      return lazyRequire('internal/crypto/aes')
+      return lazyrequire('../../internal/crypto/aes')
         .aesImportKey(algorithm, format, keyData, extractable, keyUsages);
     case 'HKDF':
       // Fall through
@@ -510,10 +510,10 @@ async function importKey(
         extractable,
         keyUsages);
     case 'NODE-DSA':
-      return lazyRequire('internal/crypto/dsa')
+      return lazyrequire('../../internal/crypto/dsa')
         .dsaImportKey(format, keyData, algorithm, extractable, keyUsages);
     case 'NODE-DH':
-      return lazyRequire('internal/crypto/diffiehellman')
+      return lazyrequire('../../internal/crypto/diffiehellman')
         .dhImportKey(format, keyData, algorithm, extractable, keyUsages);
   }
 
@@ -598,22 +598,22 @@ function signVerify(algorithm, key, data, signature) {
     case 'RSA-PSS':
       // Fall through
     case 'RSASSA-PKCS1-v1_5':
-      return lazyRequire('internal/crypto/rsa')
+      return lazyrequire('../../internal/crypto/rsa')
         .rsaSignVerify(key, data, algorithm, signature);
     case 'NODE-ED25519':
       // Fall through
     case 'NODE-ED448':
       // Fall through
     case 'ECDSA':
-      return lazyRequire('internal/crypto/ec')
+      return lazyrequire('../../internal/crypto/ec')
         .ecdsaSignVerify(key, data, algorithm, signature);
     case 'HMAC':
-      return lazyRequire('internal/crypto/mac')
+      return lazyrequire('../../internal/crypto/mac')
         .hmacSignVerify(key, data, algorithm, signature);
     // The following are Node.js specific extensions. They must begin with
     // the `NODE-` prefix
     case 'NODE-DSA':
-      return lazyRequire('internal/crypto/dsa')
+      return lazyrequire('../../internal/crypto/dsa')
         .dsaSignVerify(key, data, algorithm, signature);
   }
   throw lazyDOMException('Unrecognized named.', 'NotSupportedError');
@@ -654,18 +654,18 @@ async function cipherOrWrap(mode, algorithm, key, data, op) {
 
   switch (algorithm.name) {
     case 'RSA-OAEP':
-      return lazyRequire('internal/crypto/rsa')
+      return lazyrequire('../../internal/crypto/rsa')
         .rsaCipher(mode, key, data, algorithm);
     case 'AES-CTR':
       // Fall through
     case 'AES-CBC':
       // Fall through
     case 'AES-GCM':
-      return lazyRequire('internal/crypto/aes')
+      return lazyrequire('../../internal/crypto/aes')
         .aesCipher(mode, key, data, algorithm);
     case 'AES-KW':
       if (op === 'wrapKey' || op === 'unwrapKey') {
-        return lazyRequire('internal/crypto/aes')
+        return lazyrequire('../../internal/crypto/aes')
           .aesCipher(mode, key, data, algorithm);
       }
   }
diff --git a/lib/internal/crypto/x509.js b/lib/internal/crypto/x509.js
index ff8e608657..d5ad6dfce4 100644
--- a/lib/internal/crypto/x509.js
+++ b/lib/internal/crypto/x509.js
@@ -19,42 +19,42 @@ const {
 const {
   PublicKeyObject,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   validateBoolean,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 const { Buffer } = require('buffer');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   JSTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const kInternalState = Symbol('kInternalState');
 
diff --git a/lib/internal/debugger/inspect.js b/lib/internal/debugger/inspect.js
index 7f1017886f..78eec52b7c 100644
--- a/lib/internal/debugger/inspect.js
+++ b/lib/internal/debugger/inspect.js
@@ -32,20 +32,20 @@ const {
 } = require('timers/promises');
 const {
   AbortController,
-} = require('internal/abort_controller');
+} = require('../../internal/abort_controller');
 
 // TODO(aduh95): remove console calls
-const console = require('internal/console/global');
+const console = require('../../internal/console/global');
 
 const { 0: InspectClient, 1: createRepl } =
     [
-      require('internal/debugger/inspect_client'),
-      require('internal/debugger/inspect_repl'),
+      require('../../internal/debugger/inspect_client'),
+      require('../../internal/debugger/inspect_repl'),
     ];
 
 const debuglog = util.debuglog('inspect');
 
-const { ERR_DEBUGGER_STARTUP_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_STARTUP_ERROR } = require('../../internal/errors').codes;
 
 async function portIsFree(host, port, timeout = 9999) {
   if (port === 0) return; // Binding to a random port.
diff --git a/lib/internal/debugger/inspect_client.js b/lib/internal/debugger/inspect_client.js
index 5bd73d250c..d905e12e49 100644
--- a/lib/internal/debugger/inspect_client.js
+++ b/lib/internal/debugger/inspect_client.js
@@ -12,12 +12,12 @@ const {
 
 const Buffer = require('buffer').Buffer;
 const crypto = require('crypto');
-const { ERR_DEBUGGER_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_ERROR } = require('../../internal/errors').codes;
 const { EventEmitter } = require('events');
 const http = require('http');
 const URL = require('url');
 
-const debuglog = require('internal/util/debuglog').debuglog('inspect');
+const debuglog = require('../../internal/util/debuglog').debuglog('inspect');
 
 const kOpCodeText = 0x1;
 const kOpCodeClose = 0x8;
diff --git a/lib/internal/debugger/inspect_repl.js b/lib/internal/debugger/inspect_repl.js
index 401887cbda..bd44af60e5 100644
--- a/lib/internal/debugger/inspect_repl.js
+++ b/lib/internal/debugger/inspect_repl.js
@@ -45,19 +45,19 @@ const {
   StringPrototypeTrim,
 } = primordials;
 
-const { ERR_DEBUGGER_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_ERROR } = require('../../internal/errors').codes;
 
-const { validateString } = require('internal/validators');
+const { validateString } = require('../../internal/validators');
 
 const FS = require('fs');
 const Path = require('path');
 const Repl = require('repl');
 const vm = require('vm');
-const { fileURLToPath } = require('internal/url');
+const { fileURLToPath } = require('../../internal/url');
 
-const { customInspectSymbol } = require('internal/util');
-const { inspect: utilInspect } = require('internal/util/inspect');
-const debuglog = require('internal/util/debuglog').debuglog('inspect');
+const { customInspectSymbol } = require('../../internal/util');
+const { inspect: utilInspect } = require('../../internal/util/inspect');
+const debuglog = require('../../internal/util/debuglog').debuglog('inspect');
 
 const SHORTCUTS = {
   cont: 'c',
diff --git a/lib/internal/dgram.js b/lib/internal/dgram.js
index f27baf5e0e..5f731c36eb 100644
--- a/lib/internal/dgram.js
+++ b/lib/internal/dgram.js
@@ -5,13 +5,13 @@ const {
   Symbol,
 } = primordials;
 
-const { codes } = require('internal/errors');
+const { codes } = require('../internal/errors');
 const { UDP } = internalBinding('udp_wrap');
 const { guessHandleType } = internalBinding('util');
 const {
   isInt32,
   validateFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 const { UV_EINVAL } = internalBinding('uv');
 const {
   ERR_SOCKET_BAD_TYPE,
diff --git a/lib/internal/dns/promises.js b/lib/internal/dns/promises.js
index c6f8acba74..a16454ecf2 100644
--- a/lib/internal/dns/promises.js
+++ b/lib/internal/dns/promises.js
@@ -15,10 +15,10 @@ const {
   validateTries,
   emitInvalidHostnameWarning,
   getDefaultVerbatim,
-} = require('internal/dns/utils');
-const { codes, dnsException } = require('internal/errors');
-const { toASCII } = require('internal/idna');
-const { isIP } = require('internal/net');
+} = require('../../internal/dns/utils');
+const { codes, dnsException } = require('../../internal/errors');
+const { toASCII } = require('../../internal/idna');
+const { isIP } = require('../../internal/net');
 const {
   getaddrinfo,
   getnameinfo,
@@ -35,7 +35,7 @@ const {
   validatePort,
   validateString,
   validateOneOf,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 function onlookup(err, addresses) {
   if (err) {
diff --git a/lib/internal/dns/utils.js b/lib/internal/dns/utils.js
index 8fd5e2018f..50b81feac9 100644
--- a/lib/internal/dns/utils.js
+++ b/lib/internal/dns/utils.js
@@ -11,15 +11,15 @@ const {
   StringPrototypeReplace,
 } = primordials;
 
-const errors = require('internal/errors');
-const { isIP } = require('internal/net');
-const { getOptionValue } = require('internal/options');
+const errors = require('../../internal/errors');
+const { isIP } = require('../../internal/net');
+const { getOptionValue } = require('../../internal/options');
 const {
   validateArray,
   validateInt32,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   ChannelWrap,
   strerror,
diff --git a/lib/internal/encoding.js b/lib/internal/encoding.js
index 2cdd453b15..51769bd42c 100644
--- a/lib/internal/encoding.js
+++ b/lib/internal/encoding.js
@@ -21,7 +21,7 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_THIS,
   ERR_NO_ICU
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 const kHandle = Symbol('handle');
 const kFlags = Symbol('flags');
 const kEncoding = Symbol('encoding');
@@ -31,18 +31,18 @@ const kEncoder = Symbol('encoder');
 const {
   getConstructorOf,
   customInspectSymbol: inspect
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
   isUint8Array
-} = require('internal/util/types');
+} = require('../internal/util/types');
 
 const {
   validateString,
   validateObject,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   encodeInto,
@@ -352,7 +352,7 @@ class TextEncoder {
     });
     obj.encoding = this.encoding;
     // Lazy to avoid circular dependency
-    return require('internal/util/inspect').inspect(obj, opts);
+    return require('../internal/util/inspect').inspect(obj, opts);
   }
 }
 
@@ -562,7 +562,7 @@ ObjectDefineProperties(
         obj[kHandle] = this[kHandle];
       }
       // Lazy to avoid circular dependency
-      const { inspect } = require('internal/util/inspect');
+      const { inspect } = require('../internal/util/inspect');
       return `${constructor.name} ${inspect(obj)}`;
     }
   })
diff --git a/lib/internal/error_serdes.js b/lib/internal/error_serdes.js
index 47392752df..5208988634 100644
--- a/lib/internal/error_serdes.js
+++ b/lib/internal/error_serdes.js
@@ -84,7 +84,7 @@ function GetName(object) {
 let internalUtilInspect;
 function inspect(...args) {
   if (!internalUtilInspect) {
-    internalUtilInspect = require('internal/util/inspect');
+    internalUtilInspect = require('../internal/util/inspect');
   }
   return internalUtilInspect.inspect(...args);
 }
diff --git a/lib/internal/errors.js b/lib/internal/errors.js
index 07b7181a58..ace489ee92 100644
--- a/lib/internal/errors.js
+++ b/lib/internal/errors.js
@@ -175,7 +175,7 @@ let assert;
 let internalUtil = null;
 function lazyInternalUtil() {
   if (!internalUtil) {
-    internalUtil = require('internal/util');
+    internalUtil = require('../internal/util');
   }
   return internalUtil;
 }
@@ -183,7 +183,7 @@ function lazyInternalUtil() {
 let internalUtilInspect = null;
 function lazyInternalUtilInspect() {
   if (!internalUtilInspect) {
-    internalUtilInspect = require('internal/util/inspect');
+    internalUtilInspect = require('../internal/util/inspect');
   }
   return internalUtilInspect;
 }
@@ -410,7 +410,7 @@ function E(sym, val, def, ...otherClasses) {
 function getMessage(key, args, self) {
   const msg = messages.get(key);
 
-  if (assert === undefined) assert = require('internal/assert');
+  if (assert === undefined) assert = require('../internal/assert');
 
   if (typeof msg === 'function') {
     assert(
@@ -775,7 +775,7 @@ const fatalExceptionStackEnhancers = {
     } = lazyInternalUtilInspect();
     const colors = useColors &&
                    ((internalBinding('util').guessHandleType(2) === 'TTY' &&
-                   require('internal/tty').hasColors()) ||
+                   require('../internal/tty').hasColors()) ||
                    defaultColors);
     try {
       return inspect(error, {
diff --git a/lib/internal/event_target.js b/lib/internal/event_target.js
index ddab605c8a..07c139e085 100644
--- a/lib/internal/event_target.js
+++ b/lib/internal/event_target.js
@@ -33,10 +33,10 @@ const {
     ERR_MISSING_ARGS,
     ERR_INVALID_THIS,
   }
-} = require('internal/errors');
-const { validateObject, validateString } = require('internal/validators');
+} = require('../internal/errors');
+const { validateObject, validateString } = require('../internal/validators');
 
-const { customInspectSymbol } = require('internal/util');
+const { customInspectSymbol } = require('../internal/util');
 const { inspect } = require('util');
 
 const kIsEventTarget = SymbolFor('nodejs.event_target');
@@ -62,7 +62,7 @@ const kRemoveListener = Symbol('kRemoveListener');
 const kIsNodeStyleListener = Symbol('kIsNodeStyleListener');
 const kTrustEvent = Symbol('kTrustEvent');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../internal/perf/utils');
 
 // TODO(joyeecheung): V8 snapshot does not support instance member
 // initializers for now:
diff --git a/lib/internal/fs/cp/cp-sync.js b/lib/internal/fs/cp/cp-sync.js
index 723a5c86d3..8ae0d516ac 100644
--- a/lib/internal/fs/cp/cp-sync.js
+++ b/lib/internal/fs/cp/cp-sync.js
@@ -2,8 +2,8 @@
 
 // This file is a modified version of the fs-extra's copySync method.
 
-const { areIdentical, isSrcSubdir } = require('internal/fs/cp/cp');
-const { codes } = require('internal/errors');
+const { areIdentical, isSrcSubdir } = require('../../../internal/fs/cp/cp');
+const { codes } = require('../../../internal/errors');
 const {
   os: {
     errno: {
diff --git a/lib/internal/fs/cp/cp.js b/lib/internal/fs/cp/cp.js
index 9ee661be68..67f3a4c282 100644
--- a/lib/internal/fs/cp/cp.js
+++ b/lib/internal/fs/cp/cp.js
@@ -25,7 +25,7 @@ const {
     ERR_FS_CP_UNKNOWN,
     ERR_FS_EISDIR,
   },
-} = require('internal/errors');
+} = require('../../../internal/errors');
 const {
   os: {
     errno: {
diff --git a/lib/internal/fs/dir.js b/lib/internal/fs/dir.js
index 917319661a..29f81660b7 100644
--- a/lib/internal/fs/dir.js
+++ b/lib/internal/fs/dir.js
@@ -20,20 +20,20 @@ const {
     ERR_DIR_CONCURRENT_OPERATION,
     ERR_MISSING_ARGS
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const { FSReqCallback } = binding;
-const internalUtil = require('internal/util');
+const internalUtil = require('../../internal/util');
 const {
   getDirent,
   getOptions,
   getValidatedPath,
   handleErrorFromBinding
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 const {
   validateCallback,
   validateUint32
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const kDirHandle = Symbol('kDirHandle');
 const kDirPath = Symbol('kDirPath');
diff --git a/lib/internal/fs/promises.js b/lib/internal/fs/promises.js
index 85ff23bff0..018b4a379b 100644
--- a/lib/internal/fs/promises.js
+++ b/lib/internal/fs/promises.js
@@ -32,9 +32,9 @@ const {
     ERR_METHOD_NOT_IMPLEMENTED,
   },
   AbortError,
-} = require('internal/errors');
-const { isArrayBufferView } = require('internal/util/types');
-const { rimrafPromises } = require('internal/fs/rimraf');
+} = require('../../internal/errors');
+const { isArrayBufferView } = require('../../internal/util/types');
+const { rimrafPromises } = require('../../internal/fs/rimraf');
 const {
   constants: {
     kIoMaxLength,
@@ -63,8 +63,8 @@ const {
   validateRmdirOptions,
   validateStringAfterArrayBufferView,
   warnOnNonPortableTemplate,
-} = require('internal/fs/utils');
-const { opendir } = require('internal/fs/dir');
+} = require('../../internal/fs/utils');
+const { opendir } = require('../../internal/fs/dir');
 const {
   parseFileMode,
   validateAbortSignal,
@@ -73,13 +73,13 @@ const {
   validateEncoding,
   validateInteger,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const pathModule = require('path');
-const { lazyDOMException, promisify } = require('internal/util');
-const { EventEmitterMixin } = require('internal/event_target');
-const { watch } = require('internal/fs/watchers');
-const { isIterable } = require('internal/streams/utils');
-const assert = require('internal/assert');
+const { lazyDOMException, promisify } = require('../../internal/util');
+const { EventEmitterMixin } = require('../../internal/event_target');
+const { watch } = require('../../internal/fs/watchers');
+const { isIterable } = require('../../internal/streams/utils');
+const assert = require('../../internal/assert');
 
 const kHandle = Symbol('kHandle');
 const kFd = Symbol('kFd');
@@ -93,20 +93,20 @@ const kUnref = Symbol('kUnref');
 const { kUsePromises } = binding;
 const {
   JSTransferable, kDeserialize, kTransfer, kTransferList
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const getDirectoryEntriesPromise = promisify(getDirents);
 const validateRmOptionsPromise = promisify(validateRmOptions);
 
 let cpPromises;
 function lazyLoadCpPromises() {
-  return cpPromises ??= require('internal/fs/cp/cp').cpFn;
+  return cpPromises ??= require('../../internal/fs/cp/cp').cpFn;
 }
 
 // Lazy loaded to avoid circular dependency.
 let fsStreams;
 function lazyFsStreams() {
-  return fsStreams ??= require('internal/fs/streams');
+  return fsStreams ??= require('../../internal/fs/streams');
 }
 
 class FileHandle extends EventEmitterMixin(JSTransferable) {
diff --git a/lib/internal/fs/read_file_context.js b/lib/internal/fs/read_file_context.js
index afa4b7852f..1cd46b63b1 100644
--- a/lib/internal/fs/read_file_context.js
+++ b/lib/internal/fs/read_file_context.js
@@ -11,7 +11,7 @@ const {
     kReadFileBufferLength,
     kReadFileUnknownBufferLength,
   }
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 
 const { Buffer } = require('buffer');
 
@@ -20,7 +20,7 @@ const { FSReqCallback, close, read } = internalBinding('fs');
 const {
   AbortError,
   aggregateTwoErrors,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 function readFileAfterRead(err, bytesRead) {
   const context = this.context;
diff --git a/lib/internal/fs/rimraf.js b/lib/internal/fs/rimraf.js
index 675c2448c4..c2b829a487 100644
--- a/lib/internal/fs/rimraf.js
+++ b/lib/internal/fs/rimraf.js
@@ -30,7 +30,7 @@ const {
 } = fs;
 const { sep } = require('path');
 const { setTimeout } = require('timers');
-const { sleep } = require('internal/util');
+const { sleep } = require('../../internal/util');
 const notEmptyErrorCodes = new SafeSet(['ENOTEMPTY', 'EEXIST', 'EPERM']);
 const retryErrorCodes = new SafeSet(
   ['EBUSY', 'EMFILE', 'ENFILE', 'ENOTEMPTY', 'EPERM']);
diff --git a/lib/internal/fs/streams.js b/lib/internal/fs/streams.js
index 5e9e338ab1..6a5f05f5a8 100644
--- a/lib/internal/fs/streams.js
+++ b/lib/internal/fs/streams.js
@@ -15,24 +15,24 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_OUT_OF_RANGE,
   ERR_METHOD_NOT_IMPLEMENTED,
-} = require('internal/errors').codes;
-const { deprecate } = require('internal/util');
+} = require('../../internal/errors').codes;
+const { deprecate } = require('../../internal/util');
 const {
   validateFunction,
   validateInteger,
-} = require('internal/validators');
-const { errorOrDestroy } = require('internal/streams/destroy');
+} = require('../../internal/validators');
+const { errorOrDestroy } = require('../../internal/streams/destroy');
 const fs = require('fs');
-const { kRef, kUnref, FileHandle } = require('internal/fs/promises');
+const { kRef, kUnref, FileHandle } = require('../../internal/fs/promises');
 const { Buffer } = require('buffer');
 const {
   copyObject,
   getOptions,
   getValidatedFd,
   validatePath,
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 const { Readable, Writable, finished } = require('stream');
-const { toPathIfFileURL } = require('internal/url');
+const { toPathIfFileURL } = require('../../internal/url');
 const kIoDone = Symbol('kIoDone');
 const kIsPerformingIO = Symbol('kIsPerformingIO');
 
diff --git a/lib/internal/fs/utils.js b/lib/internal/fs/utils.js
index b0aeb8185e..b00159e9be 100644
--- a/lib/internal/fs/utils.js
+++ b/lib/internal/fs/utils.js
@@ -35,15 +35,15 @@ const {
   },
   hideStackFrames,
   uvException
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   isArrayBufferView,
   isUint8Array,
   isDate,
   isBigUint64Array
-} = require('internal/util/types');
-const { once } = require('internal/util');
-const { toPathIfFileURL } = require('internal/url');
+} = require('../../internal/util/types');
+const { once } = require('../../internal/util');
+const { toPathIfFileURL } = require('../../internal/url');
 const {
   validateAbortSignal,
   validateBoolean,
@@ -52,11 +52,11 @@ const {
   validateInteger,
   validateObject,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const pathModule = require('path');
 const kType = Symbol('type');
 const kStats = Symbol('stats');
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const {
   fs: {
diff --git a/lib/internal/fs/watchers.js b/lib/internal/fs/watchers.js
index b45af42d12..398a5c8c32 100644
--- a/lib/internal/fs/watchers.js
+++ b/lib/internal/fs/watchers.js
@@ -13,8 +13,8 @@ const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
-const { createDeferredPromise } = require('internal/util');
+} = require('../../internal/errors');
+const { createDeferredPromise } = require('../../internal/util');
 
 const {
   kFsStatsFieldsNumber,
@@ -28,12 +28,12 @@ const { EventEmitter } = require('events');
 const {
   getStatsFromBinding,
   getValidatedPath
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 
 const {
   defaultTriggerAsyncIdScope,
   symbols: { owner_symbol }
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 
 const { toNamespacedPath } = require('path');
 
@@ -42,7 +42,7 @@ const {
   validateBoolean,
   validateObject,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Buffer: {
@@ -50,7 +50,7 @@ const {
   },
 } = require('buffer');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kOldStatus = Symbol('kOldStatus');
 const kUseBigint = Symbol('kUseBigint');
diff --git a/lib/internal/heap_utils.js b/lib/internal/heap_utils.js
index 126fe3f7e4..42f71392f1 100644
--- a/lib/internal/heap_utils.js
+++ b/lib/internal/heap_utils.js
@@ -5,8 +5,8 @@ const {
 const {
   kUpdateTimer,
   onStreamRead,
-} = require('internal/stream_base_commons');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+} = require('../internal/stream_base_commons');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
 const { Readable } = require('stream');
 
 const kHandle = Symbol('kHandle');
diff --git a/lib/internal/histogram.js b/lib/internal/histogram.js
index f437bfd4d7..b906538b0c 100644
--- a/lib/internal/histogram.js
+++ b/lib/internal/histogram.js
@@ -15,7 +15,7 @@ const {
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../internal/util');
 
 const { inspect } = require('util');
 
@@ -26,11 +26,11 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_OUT_OF_RANGE,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateNumber,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const kDestroy = Symbol('kDestroy');
 const kHandle = Symbol('kHandle');
@@ -40,7 +40,7 @@ const {
   kClone,
   kDeserialize,
   JSTransferable,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 function isHistogram(object) {
   return object?.[kHandle] !== undefined;
diff --git a/lib/internal/http.js b/lib/internal/http.js
index 56187a2b1c..1c65f88de0 100644
--- a/lib/internal/http.js
+++ b/lib/internal/http.js
@@ -7,14 +7,14 @@ const {
   DatePrototypeToUTCString,
 } = primordials;
 
-const { setUnrefTimeout } = require('internal/timers');
+const { setUnrefTimeout } = require('../internal/timers');
 
-const { InternalPerformanceEntry } = require('internal/perf/performance_entry');
+const { InternalPerformanceEntry } = require('../internal/perf/performance_entry');
 
 const {
   enqueue,
   hasObserver,
-} = require('internal/perf/observe');
+} = require('../internal/perf/observe');
 
 let utcCache;
 
diff --git a/lib/internal/http2/compat.js b/lib/internal/http2/compat.js
index a1ee6cdbbc..c2edcbae3b 100644
--- a/lib/internal/http2/compat.js
+++ b/lib/internal/http2/compat.js
@@ -19,7 +19,7 @@ const {
   Symbol,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const Stream = require('stream');
 const { Readable } = Stream;
 const {
@@ -51,18 +51,18 @@ const {
     ERR_STREAM_WRITE_AFTER_END
   },
   hideStackFrames
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateCallback,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   kSocket,
   kRequest,
   kProxySocket,
   assertValidPseudoHeader,
   getAuthority
-} = require('internal/http2/util');
+} = require('../../internal/http2/util');
 const { _checkIsHttpToken: checkIsHttpToken } = require('_http_common');
 
 const kBeginSend = Symbol('begin-send');
diff --git a/lib/internal/http2/core.js b/lib/internal/http2/core.js
index 1654f2460c..852fcc1899 100644
--- a/lib/internal/http2/core.js
+++ b/lib/internal/http2/core.js
@@ -38,7 +38,7 @@ const {
   assertCrypto,
   customInspectSymbol: kInspect,
   promisify
-} = require('internal/util');
+} = require('../../internal/util');
 
 assertCrypto();
 
@@ -46,8 +46,8 @@ const assert = require('assert');
 const EventEmitter = require('events');
 const fs = require('fs');
 const http = require('http');
-const { readUInt16BE, readUInt32BE } = require('internal/buffer');
-const { URL } = require('internal/url');
+const { readUInt16BE, readUInt32BE } = require('../../internal/buffer');
+const { URL } = require('../../internal/url');
 const net = require('net');
 const { Duplex } = require('stream');
 const tls = require('tls');
@@ -58,7 +58,7 @@ const {
   _checkIsHttpToken: checkIsHttpToken
 } = require('_http_common');
 const { kServerResponse } = require('_http_server');
-const JSStreamSocket = require('internal/js_stream_socket');
+const JSStreamSocket = require('../../internal/js_stream_socket');
 
 const {
   defaultTriggerAsyncIdScope,
@@ -66,7 +66,7 @@ const {
     async_id_symbol,
     owner_symbol,
   },
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 const {
   aggregateTwoErrors,
   codes: {
@@ -117,7 +117,7 @@ const {
   },
   hideStackFrames,
   AbortError
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   isUint32,
   validateCallback,
@@ -127,14 +127,14 @@ const {
   validateString,
   validateUint32,
   validateAbortSignal
-} = require('internal/validators');
-const fsPromisesInternal = require('internal/fs/promises');
-const { utcDate } = require('internal/http');
+} = require('../../internal/validators');
+const fsPromisesInternal = require('../../internal/fs/promises');
+const { utcDate } = require('../../internal/http');
 const {
   Http2ServerRequest,
   Http2ServerResponse,
   onServerStream,
-} = require('internal/http2/compat');
+} = require('../../internal/http2/compat');
 
 const {
   assertIsObject,
@@ -158,7 +158,7 @@ const {
   toHeaderObject,
   updateOptionsBuffer,
   updateSettingsBuffer
-} = require('internal/http2/util');
+} = require('../../internal/http2/util');
 const {
   writeGeneric,
   writevGeneric,
@@ -169,10 +169,10 @@ const {
   kHandle,
   kSession,
   setStreamTimeout
-} = require('internal/stream_base_commons');
-const { kTimeout } = require('internal/timers');
-const { isArrayBufferView } = require('internal/util/types');
-const { format } = require('internal/util/inspect');
+} = require('../../internal/stream_base_commons');
+const { kTimeout } = require('../../internal/timers');
+const { isArrayBufferView } = require('../../internal/util/types');
+const { format } = require('../../internal/util/inspect');
 
 const { FileHandle } = internalBinding('fs');
 const binding = internalBinding('http2');
@@ -185,7 +185,7 @@ const { UV_EOF } = internalBinding('uv');
 
 const { StreamPipe } = internalBinding('stream_pipe');
 const { _connectionListener: httpConnectionListener } = http;
-let debug = require('internal/util/debuglog').debuglog('http2', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('http2', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/http2/util.js b/lib/internal/http2/util.js
index 78ff2937c3..9c058c962a 100644
--- a/lib/internal/http2/util.js
+++ b/lib/internal/http2/util.js
@@ -33,7 +33,7 @@ const {
   getMessage,
   hideStackFrames,
   kIsNodeError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const kSensitiveHeaders = Symbol('nodejs.http2.sensitiveHeaders');
 const kSocket = Symbol('socket');
diff --git a/lib/internal/idna.js b/lib/internal/idna.js
index 8591226d10..6354a226f3 100644
--- a/lib/internal/idna.js
+++ b/lib/internal/idna.js
@@ -4,6 +4,6 @@ if (internalBinding('config').hasIntl) {
   const { toASCII, toUnicode } = internalBinding('icu');
   module.exports = { toASCII, toUnicode };
 } else {
-  const { domainToASCII, domainToUnicode } = require('internal/url');
+  const { domainToASCII, domainToUnicode } = require('../internal/url');
   module.exports = { toASCII: domainToASCII, toUnicode: domainToUnicode };
 }
diff --git a/lib/internal/js_stream_socket.js b/lib/internal/js_stream_socket.js
index bd90241256..a29e8ad0d8 100644
--- a/lib/internal/js_stream_socket.js
+++ b/lib/internal/js_stream_socket.js
@@ -5,18 +5,18 @@ const {
 } = primordials;
 
 const { setImmediate } = require('timers');
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 const { Socket } = require('net');
 const { JSStream } = internalBinding('js_stream');
 const uv = internalBinding('uv');
-let debug = require('internal/util/debuglog').debuglog(
+let debug = require('../internal/util/debuglog').debuglog(
   'stream_socket',
   (fn) => {
     debug = fn;
   }
 );
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { ERR_STREAM_WRAP } = require('internal/errors').codes;
+const { owner_symbol } = require('../internal/async_hooks').symbols;
+const { ERR_STREAM_WRAP } = require('../internal/errors').codes;
 
 const kCurrentWriteRequest = Symbol('kCurrentWriteRequest');
 const kCurrentShutdownRequest = Symbol('kCurrentShutdownRequest');
@@ -131,7 +131,7 @@ class JSStreamSocket extends Socket {
   }
 
   // Allow legacy requires in the test suite to keep working:
-  //   const { StreamWrap } = require('internal/js_stream_socket')
+  //   const { StreamWrap } = require('../internal/js_stream_socket')
   static get StreamWrap() {
     return JSStreamSocket;
   }
diff --git a/lib/internal/main/check_syntax.js b/lib/internal/main/check_syntax.js
index a3b9bf2923..cd30a98f1e 100644
--- a/lib/internal/main/check_syntax.js
+++ b/lib/internal/main/check_syntax.js
@@ -5,11 +5,11 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 const {
   readStdin
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
 const { pathToFileURL } = require('url');
 
@@ -18,7 +18,7 @@ const {
     _resolveFilename: resolveCJSModuleName,
   },
   wrapSafe,
-} = require('internal/modules/cjs/loader');
+} = require('../../internal/modules/cjs/loader');
 
 // TODO(joyeecheung): not every one of these are necessary
 prepareMainThreadExecution(true);
@@ -46,13 +46,13 @@ if (process.argv[1] && process.argv[1] !== '-') {
 }
 
 function checkSyntax(source, filename) {
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../../internal/options');
   let isModule = false;
   if (filename === '[stdin]' || filename === '[eval]') {
     isModule = getOptionValue('--input-type') === 'module';
   } else {
-    const { defaultResolve } = require('internal/modules/esm/resolve');
-    const { defaultGetFormat } = require('internal/modules/esm/get_format');
+    const { defaultResolve } = require('../../internal/modules/esm/resolve');
+    const { defaultGetFormat } = require('../../internal/modules/esm/get_format');
     const { url } = defaultResolve(pathToFileURL(filename).toString());
     const { format } = defaultGetFormat(url);
     isModule = format === 'module';
diff --git a/lib/internal/main/eval_stdin.js b/lib/internal/main/eval_stdin.js
index d97dbece8f..7736477d56 100644
--- a/lib/internal/main/eval_stdin.js
+++ b/lib/internal/main/eval_stdin.js
@@ -4,15 +4,15 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 const {
   evalModule,
   evalScript,
   readStdin
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
 prepareMainThreadExecution();
 markBootstrapComplete();
diff --git a/lib/internal/main/eval_string.js b/lib/internal/main/eval_string.js
index 2784204f60..a85a29a835 100644
--- a/lib/internal/main/eval_string.js
+++ b/lib/internal/main/eval_string.js
@@ -9,11 +9,11 @@ const {
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
-const { evalModule, evalScript } = require('internal/process/execution');
-const { addBuiltinLibsToObject } = require('internal/modules/cjs/helpers');
+} = require('../../internal/bootstrap/pre_execution');
+const { evalModule, evalScript } = require('../../internal/process/execution');
+const { addBuiltinLibsToObject } = require('../../internal/modules/cjs/helpers');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 prepareMainThreadExecution();
 addBuiltinLibsToObject(globalThis, '<eval>');
diff --git a/lib/internal/main/inspect.js b/lib/internal/main/inspect.js
index b3b26ecaa9..7deca632c9 100644
--- a/lib/internal/main/inspect.js
+++ b/lib/internal/main/inspect.js
@@ -4,7 +4,7 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 prepareMainThreadExecution();
 
@@ -13,5 +13,5 @@ markBootstrapComplete();
 
 // Start the debugger agent.
 process.nextTick(() => {
-  require('internal/debugger/inspect').start();
+  require('../../internal/debugger/inspect').start();
 });
diff --git a/lib/internal/main/print_help.js b/lib/internal/main/print_help.js
index 6aa422c657..24f101e2fd 100644
--- a/lib/internal/main/print_help.js
+++ b/lib/internal/main/print_help.js
@@ -21,7 +21,7 @@ const hasCrypto = Boolean(process.versions.openssl);
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 const typeLookup = [];
 for (const key of ObjectKeys(types))
@@ -190,7 +190,7 @@ function format(
 }
 
 function print(stream) {
-  const { options, aliases } = require('internal/options');
+  const { options, aliases } = require('../../internal/options');
 
   // Use 75 % of the available width, and at least 70 characters.
   const width = MathMax(70, (stream.columns || 0) * 0.75);
diff --git a/lib/internal/main/prof_process.js b/lib/internal/main/prof_process.js
index bd835bfe63..43acbfa7a1 100644
--- a/lib/internal/main/prof_process.js
+++ b/lib/internal/main/prof_process.js
@@ -2,8 +2,8 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 prepareMainThreadExecution();
 markBootstrapComplete();
-require('internal/v8_prof_processor');
+require('../../internal/v8_prof_processor');
diff --git a/lib/internal/main/repl.js b/lib/internal/main/repl.js
index a8356687cc..9e0e9815e4 100644
--- a/lib/internal/main/repl.js
+++ b/lib/internal/main/repl.js
@@ -5,23 +5,23 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
-const esmLoader = require('internal/process/esm_loader');
+const esmLoader = require('../../internal/process/esm_loader');
 const {
   evalScript
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
-const console = require('internal/console/global');
+const console = require('../../internal/console/global');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 prepareMainThreadExecution();
 
 markBootstrapComplete();
 
 if (process.env.NODE_REPL_EXTERNAL_MODULE) {
-  require('internal/modules/cjs/loader')
+  require('../../internal/modules/cjs/loader')
     .Module
     ._load(process.env.NODE_REPL_EXTERNAL_MODULE, undefined, true);
 } else {
@@ -37,7 +37,7 @@ if (process.env.NODE_REPL_EXTERNAL_MODULE) {
     console.log(`Welcome to Node.js ${process.version}.\n` +
       'Type ".help" for more information.');
 
-    const cliRepl = require('internal/repl');
+    const cliRepl = require('../../internal/repl');
     cliRepl.createInternalRepl(process.env, (err, repl) => {
       if (err) {
         throw err;
diff --git a/lib/internal/main/run_main_module.js b/lib/internal/main/run_main_module.js
index ca5d1122c5..5e39e711bd 100644
--- a/lib/internal/main/run_main_module.js
+++ b/lib/internal/main/run_main_module.js
@@ -2,7 +2,7 @@
 
 const {
   prepareMainThreadExecution
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 prepareMainThreadExecution(true);
 
@@ -14,4 +14,4 @@ markBootstrapComplete();
 // in the preloaded scripts through require('module').
 // runMain here might be monkey-patched by users in --require.
 // XXX: the monkey-patchability here should probably be deprecated.
-require('internal/modules/cjs/loader').Module.runMain(process.argv[1]);
+require('../../internal/modules/cjs/loader').Module.runMain(process.argv[1]);
diff --git a/lib/internal/main/worker_thread.js b/lib/internal/main/worker_thread.js
index 71a07a63a3..3c74a3bc56 100644
--- a/lib/internal/main/worker_thread.js
+++ b/lib/internal/main/worker_thread.js
@@ -28,14 +28,14 @@ const {
   initializeSourceMapsHandlers,
   loadPreloadModules,
   setupTraceCategoryState
-} = require('internal/bootstrap/pre_execution');
+} = require('../../internal/bootstrap/pre_execution');
 
 const {
   threadId,
   getEnvMessagePort
 } = internalBinding('worker');
 
-const workerIo = require('internal/worker/io');
+const workerIo = require('../../internal/worker/io');
 const {
   messageTypes: {
     // Messages that may be received by workers
@@ -53,14 +53,14 @@ const {
 
 const {
   onGlobalUncaughtException
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
 const publicWorker = require('worker_threads');
-let debug = require('internal/util/debuglog').debuglog('worker', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('worker', (fn) => {
   debug = fn;
 });
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 patchProcessObject();
 setupInspectorHooks();
@@ -84,7 +84,7 @@ const port = getEnvMessagePort();
 // spawned by our child_process module. In the work threads, mark the
 // related IPC properties as unavailable.
 if (process.env.NODE_CHANNEL_FD) {
-  const workerThreadSetup = require('internal/process/worker_thread_only');
+  const workerThreadSetup = require('../../internal/process/worker_thread_only');
   ObjectDefineProperty(process, 'channel', {
     enumerable: false,
     get: workerThreadSetup.unavailable('process.channel')
@@ -120,7 +120,7 @@ port.on('message', (message) => {
     setupPerfHooks();
     initializeReport();
     if (manifestSrc) {
-      require('internal/process/policy').setup(manifestSrc, manifestURL);
+      require('../../internal/process/policy').setup(manifestSrc, manifestURL);
     }
     initializeDeprecations();
     initializeWASI();
@@ -133,7 +133,7 @@ port.on('message', (message) => {
     publicWorker.parentPort = publicPort;
     publicWorker.workerData = workerData;
 
-    require('internal/worker').assignEnvironmentData(environmentData);
+    require('../../internal/worker').assignEnvironmentData(environmentData);
 
     // The counter is only passed to the workers created by the main thread, not
     // to workers created by other workers.
@@ -151,7 +151,7 @@ port.on('message', (message) => {
     };
     workerIo.sharedCwdCounter = cwdCounter;
 
-    const CJSLoader = require('internal/modules/cjs/loader');
+    const CJSLoader = require('../../internal/modules/cjs/loader');
     assert(!CJSLoader.hasLoadedAnyUserCJSModule);
     loadPreloadModules();
     initializeFrozenIntrinsics();
@@ -163,7 +163,7 @@ port.on('message', (message) => {
           `(eval = ${eval}) at cwd = ${process.cwd()}`);
     port.postMessage({ type: UP_AND_RUNNING });
     if (doEval === 'classic') {
-      const { evalScript } = require('internal/process/execution');
+      const { evalScript } = require('../../internal/process/execution');
       const name = '[worker eval]';
       // This is necessary for CJS module compilation.
       // TODO: pass this with something really internal.
@@ -175,7 +175,7 @@ port.on('message', (message) => {
       ArrayPrototypeSplice(process.argv, 1, 0, name);
       evalScript(name, filename);
     } else if (doEval === 'module') {
-      const { evalModule } = require('internal/process/execution');
+      const { evalModule } = require('../../internal/process/execution');
       PromisePrototypeCatch(evalModule(filename), (e) => {
         workerOnGlobalUncaughtException(e, true);
       });
@@ -229,7 +229,7 @@ function workerOnGlobalUncaughtException(error, fromPromise) {
 
   let serialized;
   try {
-    const { serializeError } = require('internal/error_serdes');
+    const { serializeError } = require('../../internal/error_serdes');
     serialized = serializeError(error);
   } catch {}
   debug(`[${threadId}] uncaught exception serialized = ${!!serialized}`);
@@ -241,7 +241,7 @@ function workerOnGlobalUncaughtException(error, fromPromise) {
   else
     port.postMessage({ type: COULD_NOT_SERIALIZE_ERROR });
 
-  const { clearAsyncIdStack } = require('internal/async_hooks');
+  const { clearAsyncIdStack } = require('../../internal/async_hooks');
   clearAsyncIdStack();
 
   process.exit();
diff --git a/lib/internal/modules/cjs/helpers.js b/lib/internal/modules/cjs/helpers.js
index 3d27a19a25..645a6758e6 100644
--- a/lib/internal/modules/cjs/helpers.js
+++ b/lib/internal/modules/cjs/helpers.js
@@ -16,17 +16,17 @@ const {
 const {
   ERR_MANIFEST_DEPENDENCY_MISSING,
   ERR_UNKNOWN_BUILTIN_MODULE
-} = require('internal/errors').codes;
-const { NativeModule } = require('internal/bootstrap/loaders');
+} = require('../../../internal/errors').codes;
+const { NativeModule } = require('../../../internal/bootstrap/loaders');
 
-const { validateString } = require('internal/validators');
+const { validateString } = require('../../../internal/validators');
 const path = require('path');
-const { pathToFileURL, fileURLToPath, URL } = require('internal/url');
+const { pathToFileURL, fileURLToPath, URL } = require('../../../internal/url');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 const userConditions = getOptionValue('--conditions');
 
-let debug = require('internal/util/debuglog').debuglog('module', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('module', (fn) => {
   debug = fn;
 });
 
@@ -141,7 +141,7 @@ function stripBOM(content) {
 
 function addBuiltinLibsToObject(object, dummyModuleName) {
   // Make built-in modules available directly (loaded lazily).
-  const Module = require('internal/modules/cjs/loader').Module;
+  const Module = require('../../../internal/modules/cjs/loader').Module;
   const { builtinModules } = Module;
 
   // To require built-in modules in user-land and ignore modules whose
@@ -203,7 +203,7 @@ function normalizeReferrerURL(referrer) {
 // For error messages only - used to check if ESM syntax is in use.
 function hasEsmSyntax(code) {
   debug('Checking for ESM syntax');
-  const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
+  const parser = require('../../../internal/deps/acorn/acorn/dist/acorn').Parser;
   let root;
   try {
     root = parser.parse(code, { sourceType: 'module', ecmaVersion: 'latest' });
diff --git a/lib/internal/modules/cjs/loader.js b/lib/internal/modules/cjs/loader.js
index b8eff04406..1d32c6ef5f 100644
--- a/lib/internal/modules/cjs/loader.js
+++ b/lib/internal/modules/cjs/loader.js
@@ -74,20 +74,20 @@ module.exports = {
   get hasLoadedAnyUserCJSModule() { return hasLoadedAnyUserCJSModule; }
 };
 
-const { NativeModule } = require('internal/bootstrap/loaders');
+const { NativeModule } = require('../../../internal/bootstrap/loaders');
 const {
   maybeCacheSourceMap,
-} = require('internal/source_map/source_map_cache');
-const { pathToFileURL, fileURLToPath, isURLInstance } = require('internal/url');
-const { deprecate } = require('internal/util');
+} = require('../../../internal/source_map/source_map_cache');
+const { pathToFileURL, fileURLToPath, isURLInstance } = require('../../../internal/url');
+const { deprecate } = require('../../../internal/util');
 const vm = require('vm');
-const assert = require('internal/assert');
+const assert = require('../../../internal/assert');
 const fs = require('fs');
-const internalFS = require('internal/fs/utils');
+const internalFS = require('../../../internal/fs/utils');
 const path = require('path');
 const { sep } = path;
 const { internalModuleStat } = internalBinding('fs');
-const packageJsonReader = require('internal/modules/package_json_reader');
+const packageJsonReader = require('../../../internal/modules/package_json_reader');
 const { safeGetenv } = internalBinding('credentials');
 const {
   cjsConditions,
@@ -96,13 +96,13 @@ const {
   makeRequireFunction,
   normalizeReferrerURL,
   stripBOM,
-} = require('internal/modules/cjs/helpers');
-const { getOptionValue } = require('internal/options');
+} = require('../../../internal/modules/cjs/helpers');
+const { getOptionValue } = require('../../../internal/options');
 const preserveSymlinks = getOptionValue('--preserve-symlinks');
 const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');
 // Do not eagerly grab .manifest, it may be in TDZ
 const policy = getOptionValue('--experimental-policy') ?
-  require('internal/process/policy') :
+  require('../../../internal/process/policy') :
   null;
 
 // Whether any user-provided CJS modules had been loaded (executed).
@@ -117,28 +117,28 @@ const {
     ERR_UNKNOWN_BUILTIN_MODULE,
   },
   setArrowMessage,
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
+} = require('../../../internal/errors');
+const { validateString } = require('../../../internal/validators');
 const pendingDeprecation = getOptionValue('--pending-deprecation');
 
 const {
   CHAR_FORWARD_SLASH,
   CHAR_BACKWARD_SLASH,
   CHAR_COLON
-} = require('internal/constants');
+} = require('../../../internal/constants');
 
 const {
   isProxy
-} = require('internal/util/types');
+} = require('../../../internal/util/types');
 
-const asyncESM = require('internal/process/esm_loader');
-const { enrichCJSError } = require('internal/modules/esm/translators');
+const asyncESM = require('../../../internal/process/esm_loader');
+const { enrichCJSError } = require('../../../internal/modules/esm/translators');
 const { kEvaluated } = internalBinding('module_wrap');
 const {
   encodedSepRegEx,
   packageExportsResolve,
   packageImportsResolve
-} = require('internal/modules/esm/resolve');
+} = require('../../../internal/modules/esm/resolve');
 
 const isWindows = process.platform === 'win32';
 
@@ -269,7 +269,7 @@ ObjectDefineProperty(Module.prototype, 'parent', {
   ) : setModuleParent,
 });
 
-let debug = require('internal/util/debuglog').debuglog('module', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('module', (fn) => {
   debug = fn;
 });
 Module._debug = deprecate(debug, 'Module._debug is deprecated.', 'DEP0077');
diff --git a/lib/internal/modules/esm/create_dynamic_module.js b/lib/internal/modules/esm/create_dynamic_module.js
index f7c20083b6..75e0eaa20f 100644
--- a/lib/internal/modules/esm/create_dynamic_module.js
+++ b/lib/internal/modules/esm/create_dynamic_module.js
@@ -8,7 +8,7 @@ const {
   SafeSet,
 } = primordials;
 
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/modules/esm/get_format.js b/lib/internal/modules/esm/get_format.js
index 7c07e5b1f7..8ec846b443 100644
--- a/lib/internal/modules/esm/get_format.js
+++ b/lib/internal/modules/esm/get_format.js
@@ -6,15 +6,15 @@ const {
   RegExpPrototypeExec,
 } = primordials;
 const { extname } = require('path');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 
 const experimentalJsonModules = getOptionValue('--experimental-json-modules');
 const experimentalSpecifierResolution =
   getOptionValue('--experimental-specifier-resolution');
 const experimentalWasmModules = getOptionValue('--experimental-wasm-modules');
-const { getPackageType } = require('internal/modules/esm/resolve');
-const { URL, fileURLToPath } = require('internal/url');
-const { ERR_UNKNOWN_FILE_EXTENSION } = require('internal/errors').codes;
+const { getPackageType } = require('../../../internal/modules/esm/resolve');
+const { URL, fileURLToPath } = require('../../../internal/url');
+const { ERR_UNKNOWN_FILE_EXTENSION } = require('../../../internal/errors').codes;
 
 const extensionFormatMap = {
   '__proto__': null,
diff --git a/lib/internal/modules/esm/get_source.js b/lib/internal/modules/esm/get_source.js
index 8281a8e487..05ecf88bbc 100644
--- a/lib/internal/modules/esm/get_source.js
+++ b/lib/internal/modules/esm/get_source.js
@@ -4,20 +4,20 @@ const {
   RegExpPrototypeExec,
   decodeURIComponent,
 } = primordials;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 // Do not eagerly grab .manifest, it may be in TDZ
 const policy = getOptionValue('--experimental-policy') ?
-  require('internal/process/policy') :
+  require('../../../internal/process/policy') :
   null;
 
 const { Buffer } = require('buffer');
 
-const fs = require('internal/fs/promises').exports;
-const { URL } = require('internal/url');
+const fs = require('../../../internal/fs/promises').exports;
+const { URL } = require('../../../internal/url');
 const {
   ERR_INVALID_URL,
   ERR_INVALID_URL_SCHEME,
-} = require('internal/errors').codes;
+} = require('../../../internal/errors').codes;
 const readFileAsync = fs.readFile;
 
 const DATA_URL_PATTERN = /^[^/]+\/[^,;]+(?:[^,]*?)(;base64)?,([\s\S]*)$/;
diff --git a/lib/internal/modules/esm/load.js b/lib/internal/modules/esm/load.js
index 38785e78f3..7792b61438 100644
--- a/lib/internal/modules/esm/load.js
+++ b/lib/internal/modules/esm/load.js
@@ -1,8 +1,8 @@
 'use strict';
 
-const { defaultGetFormat } = require('internal/modules/esm/get_format');
-const { defaultGetSource } = require('internal/modules/esm/get_source');
-const { translators } = require('internal/modules/esm/translators');
+const { defaultGetFormat } = require('../../../internal/modules/esm/get_format');
+const { defaultGetSource } = require('../../../internal/modules/esm/get_source');
+const { translators } = require('../../../internal/modules/esm/translators');
 
 async function defaultLoad(url, context) {
   let {
diff --git a/lib/internal/modules/esm/loader.js b/lib/internal/modules/esm/loader.js
index b12a87a902..83bff4d047 100644
--- a/lib/internal/modules/esm/loader.js
+++ b/lib/internal/modules/esm/loader.js
@@ -1,7 +1,7 @@
 'use strict';
 
 // This is needed to avoid cycles in esm/resolve <-> cjs/loader
-require('internal/modules/cjs/loader');
+require('../../../internal/modules/cjs/loader');
 
 const {
   Array,
@@ -26,23 +26,23 @@ const {
   ERR_INVALID_RETURN_PROPERTY_VALUE,
   ERR_INVALID_RETURN_VALUE,
   ERR_UNKNOWN_MODULE_FORMAT
-} = require('internal/errors').codes;
-const { pathToFileURL, isURLInstance } = require('internal/url');
+} = require('../../../internal/errors').codes;
+const { pathToFileURL, isURLInstance } = require('../../../internal/url');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
-const ModuleMap = require('internal/modules/esm/module_map');
-const ModuleJob = require('internal/modules/esm/module_job');
+} = require('../../../internal/util/types');
+const ModuleMap = require('../../../internal/modules/esm/module_map');
+const ModuleJob = require('../../../internal/modules/esm/module_job');
 
 const {
   defaultResolve,
   DEFAULT_CONDITIONS,
-} = require('internal/modules/esm/resolve');
-const { defaultLoad } = require('internal/modules/esm/load');
+} = require('../../../internal/modules/esm/resolve');
+const { defaultLoad } = require('../../../internal/modules/esm/load');
 const { translators } = require(
   'internal/modules/esm/translators');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 
 /**
  * An ESMLoader instance is used as the main entry point for loading ES modules.
@@ -378,7 +378,7 @@ class ESMLoader {
           filename: '<preload>',
         }
       );
-      const { NativeModule } = require('internal/bootstrap/loaders');
+      const { NativeModule } = require('../../../internal/bootstrap/loaders');
 
       FunctionPrototypeCall(preloadInit, globalThis, (builtinName) => {
         if (NativeModule.canBeRequiredByUsers(builtinName)) {
diff --git a/lib/internal/modules/esm/module_job.js b/lib/internal/modules/esm/module_job.js
index 2f699376d6..bd5dff70d1 100644
--- a/lib/internal/modules/esm/module_job.js
+++ b/lib/internal/modules/esm/module_job.js
@@ -23,11 +23,11 @@ const {
 
 const { ModuleWrap } = internalBinding('module_wrap');
 
-const { decorateErrorStack } = require('internal/util');
+const { decorateErrorStack } = require('../../../internal/util');
 const {
   getSourceMapsEnabled,
-} = require('internal/source_map/source_map_cache');
-const assert = require('internal/assert');
+} = require('../../../internal/source_map/source_map_cache');
+const assert = require('../../../internal/assert');
 const resolvedPromise = PromiseResolve();
 
 const noop = FunctionPrototype;
@@ -195,7 +195,7 @@ class ModuleJob {
         const packageConfig =
           StringPrototypeStartsWith(this.module.url, 'file://') &&
             RegExpPrototypeTest(/\.js(\?[^#]*)?(#.*)?$/, this.module.url) &&
-            require('internal/modules/esm/resolve')
+            require('../../../internal/modules/esm/resolve')
               .getPackageScopeConfig(this.module.url);
         if (packageConfig.type === 'module') {
           e.message +=
diff --git a/lib/internal/modules/esm/module_map.js b/lib/internal/modules/esm/module_map.js
index 9e1116a564..771e8dfaa3 100644
--- a/lib/internal/modules/esm/module_map.js
+++ b/lib/internal/modules/esm/module_map.js
@@ -1,14 +1,14 @@
 'use strict';
 
-const ModuleJob = require('internal/modules/esm/module_job');
+const ModuleJob = require('../../../internal/modules/esm/module_job');
 const {
   SafeMap,
 } = primordials;
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
-const { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;
-const { validateString } = require('internal/validators');
+const { ERR_INVALID_ARG_TYPE } = require('../../../internal/errors').codes;
+const { validateString } = require('../../../internal/validators');
 
 // Tracks the state of the loader-level module cache
 class ModuleMap extends SafeMap {
diff --git a/lib/internal/modules/esm/resolve.js b/lib/internal/modules/esm/resolve.js
index cef09f5ed1..39871e1a84 100644
--- a/lib/internal/modules/esm/resolve.js
+++ b/lib/internal/modules/esm/resolve.js
@@ -23,24 +23,24 @@ const {
   StringPrototypeSplit,
   StringPrototypeStartsWith,
 } = primordials;
-const internalFS = require('internal/fs/utils');
-const { NativeModule } = require('internal/bootstrap/loaders');
+const internalFS = require('../../../internal/fs/utils');
+const { NativeModule } = require('../../../internal/bootstrap/loaders');
 const {
   realpathSync,
   statSync,
   Stats,
 } = require('fs');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 // Do not eagerly grab .manifest, it may be in TDZ
 const policy = getOptionValue('--experimental-policy') ?
-  require('internal/process/policy') :
+  require('../../../internal/process/policy') :
   null;
 const { sep, relative, resolve } = require('path');
 const preserveSymlinks = getOptionValue('--preserve-symlinks');
 const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');
 const typeFlag = getOptionValue('--input-type');
 const pendingDeprecation = getOptionValue('--pending-deprecation');
-const { URL, pathToFileURL, fileURLToPath } = require('internal/url');
+const { URL, pathToFileURL, fileURLToPath } = require('../../../internal/url');
 const {
   ERR_INPUT_TYPE_NOT_ALLOWED,
   ERR_INVALID_ARG_VALUE,
@@ -53,10 +53,10 @@ const {
   ERR_PACKAGE_PATH_NOT_EXPORTED,
   ERR_UNSUPPORTED_DIR_IMPORT,
   ERR_UNSUPPORTED_ESM_URL_SCHEME,
-} = require('internal/errors').codes;
-const { Module: CJSModule } = require('internal/modules/cjs/loader');
+} = require('../../../internal/errors').codes;
+const { Module: CJSModule } = require('../../../internal/modules/cjs/loader');
 
-const packageJsonReader = require('internal/modules/package_json_reader');
+const packageJsonReader = require('../../../internal/modules/package_json_reader');
 const userConditions = getOptionValue('--conditions');
 const noAddons = getOptionValue('--no-addons');
 const addonConditions = noAddons ? [] : ['node-addons'];
@@ -1091,4 +1091,4 @@ module.exports = {
 };
 
 // cycle
-const { defaultGetFormat } = require('internal/modules/esm/get_format');
+const { defaultGetFormat } = require('../../../internal/modules/esm/get_format');
diff --git a/lib/internal/modules/esm/translators.js b/lib/internal/modules/esm/translators.js
index ba00041c41..ba0b463a8f 100644
--- a/lib/internal/modules/esm/translators.js
+++ b/lib/internal/modules/esm/translators.js
@@ -23,7 +23,7 @@ const {
 let _TYPES = null;
 function lazyTypes() {
   if (_TYPES !== null) return _TYPES;
-  return _TYPES = require('internal/util/types');
+  return _TYPES = require('../../../internal/util/types');
 }
 
 const { readFileSync } = require('fs');
@@ -32,40 +32,40 @@ const {
   hasEsmSyntax,
   loadNativeModule,
   stripBOM,
-} = require('internal/modules/cjs/helpers');
+} = require('../../../internal/modules/cjs/helpers');
 const {
   Module: CJSModule,
   cjsParseCache
-} = require('internal/modules/cjs/loader');
-const internalURLModule = require('internal/url');
+} = require('../../../internal/modules/cjs/loader');
+const internalURLModule = require('../../../internal/url');
 const createDynamicModule = require(
   'internal/modules/esm/create_dynamic_module');
 const { fileURLToPath, URL } = require('url');
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
-const { emitExperimentalWarning } = require('internal/util');
+const { emitExperimentalWarning } = require('../../../internal/util');
 const {
   ERR_UNKNOWN_BUILTIN_MODULE,
   ERR_INVALID_RETURN_PROPERTY_VALUE
-} = require('internal/errors').codes;
-const { maybeCacheSourceMap } = require('internal/source_map/source_map_cache');
+} = require('../../../internal/errors').codes;
+const { maybeCacheSourceMap } = require('../../../internal/source_map/source_map_cache');
 const moduleWrap = internalBinding('module_wrap');
 const { ModuleWrap } = moduleWrap;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 const experimentalImportMetaResolve =
     getOptionValue('--experimental-import-meta-resolve');
-const asyncESM = require('internal/process/esm_loader');
-const { emitWarningSync } = require('internal/process/warning');
-const { TextDecoder } = require('internal/encoding');
+const asyncESM = require('../../../internal/process/esm_loader');
+const { emitWarningSync } = require('../../../internal/process/warning');
+const { TextDecoder } = require('../../../internal/encoding');
 
 let cjsParse;
 async function initCJSParse() {
   if (typeof WebAssembly === 'undefined') {
-    cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;
+    cjsParse = require('../../../internal/deps/cjs-module-lexer/lexer').parse;
   } else {
     const { parse, init } =
-        require('internal/deps/cjs-module-lexer/dist/lexer');
+        require('../../../internal/deps/cjs-module-lexer/dist/lexer');
     await init();
     cjsParse = parse;
   }
diff --git a/lib/internal/modules/package_json_reader.js b/lib/internal/modules/package_json_reader.js
index 09eb12bd15..05d3d5f5a4 100644
--- a/lib/internal/modules/package_json_reader.js
+++ b/lib/internal/modules/package_json_reader.js
@@ -22,11 +22,11 @@ function read(jsonPath) {
     toNamespacedPath(jsonPath)
   );
   const result = { string, containsKeys };
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../../internal/options');
   if (string !== undefined) {
     if (manifest === undefined) {
       manifest = getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').manifest :
+        require('../../internal/process/policy').manifest :
         null;
     }
     if (manifest !== null) {
diff --git a/lib/internal/modules/run_main.js b/lib/internal/modules/run_main.js
index d0c08b75e7..4d93ab09a3 100644
--- a/lib/internal/modules/run_main.js
+++ b/lib/internal/modules/run_main.js
@@ -3,9 +3,9 @@
 const {
   StringPrototypeEndsWith,
 } = primordials;
-const CJSLoader = require('internal/modules/cjs/loader');
+const CJSLoader = require('../../internal/modules/cjs/loader');
 const { Module, toRealPath, readPackageScope } = CJSLoader;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 const path = require('path');
 
 function resolveMainPath(main) {
@@ -41,8 +41,8 @@ function shouldUseESMLoader(mainPath) {
 }
 
 function runMainESM(mainPath) {
-  const { loadESM } = require('internal/process/esm_loader');
-  const { pathToFileURL } = require('internal/url');
+  const { loadESM } = require('../../internal/process/esm_loader');
+  const { pathToFileURL } = require('../../internal/url');
 
   handleMainPromise(loadESM((esmLoader) => {
     const main = path.isAbsolute(mainPath) ?
diff --git a/lib/internal/net.js b/lib/internal/net.js
index 8ae3170228..31165e8d60 100644
--- a/lib/internal/net.js
+++ b/lib/internal/net.js
@@ -8,7 +8,7 @@ const {
 
 const Buffer = require('buffer').Buffer;
 const { writeBuffer } = internalBinding('fs');
-const errors = require('internal/errors');
+const errors = require('../internal/errors');
 
 // IPv4 Segment
 const v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
diff --git a/lib/internal/perf/event_loop_delay.js b/lib/internal/perf/event_loop_delay.js
index f5d0eb74d5..58d33edf19 100644
--- a/lib/internal/perf/event_loop_delay.js
+++ b/lib/internal/perf/event_loop_delay.js
@@ -7,7 +7,7 @@ const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   ELDHistogram: _ELDHistogram,
@@ -16,12 +16,12 @@ const {
 const {
   validateInteger,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Histogram,
   kHandle,
-} = require('internal/histogram');
+} = require('../../internal/histogram');
 
 const kEnabled = Symbol('kEnabled');
 
diff --git a/lib/internal/perf/event_loop_utilization.js b/lib/internal/perf/event_loop_utilization.js
index d73b2f5a83..98546a1459 100644
--- a/lib/internal/perf/event_loop_utilization.js
+++ b/lib/internal/perf/event_loop_utilization.js
@@ -1,8 +1,8 @@
 'use strict';
 
-const nodeTiming = require('internal/perf/nodetiming');
+const nodeTiming = require('../../internal/perf/nodetiming');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../../internal/perf/utils');
 
 function eventLoopUtilization(util1, util2) {
   const ls = nodeTiming.loopStart;
diff --git a/lib/internal/perf/nodetiming.js b/lib/internal/perf/nodetiming.js
index fcbd7efff4..1228d515ff 100644
--- a/lib/internal/perf/nodetiming.js
+++ b/lib/internal/perf/nodetiming.js
@@ -5,16 +5,16 @@ const {
   ObjectSetPrototypeOf,
 } = primordials;
 
-const { PerformanceEntry } = require('internal/perf/performance_entry');
+const { PerformanceEntry } = require('../../internal/perf/performance_entry');
 
 const {
   now,
   getMilestoneTimestamp,
-} = require('internal/perf/utils');
+} = require('../../internal/perf/utils');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { inspect } = require('util');
 
diff --git a/lib/internal/perf/observe.js b/lib/internal/perf/observe.js
index eadc617452..db4f90f87d 100644
--- a/lib/internal/perf/observe.js
+++ b/lib/internal/perf/observe.js
@@ -35,7 +35,7 @@ const {
   InternalPerformanceEntry,
   isPerformanceEntry,
   kBufferNext,
-} = require('internal/perf/performance_entry');
+} = require('../../internal/perf/performance_entry');
 
 const {
   codes: {
@@ -43,18 +43,18 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateCallback,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   customInspectSymbol: kInspect,
   deprecate,
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   setImmediate,
diff --git a/lib/internal/perf/performance.js b/lib/internal/perf/performance.js
index 38dac0ee32..5b6d6800fc 100644
--- a/lib/internal/perf/performance.js
+++ b/lib/internal/perf/performance.js
@@ -10,28 +10,28 @@ const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   EventTarget,
-} = require('internal/event_target');
+} = require('../../internal/event_target');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../../internal/perf/utils');
 
 const {
   mark,
   measure,
   clearMarkTimings,
-} = require('internal/perf/usertiming');
+} = require('../../internal/perf/usertiming');
 const {
   clearEntriesFromBuffer,
   filterBufferMapByNameAndType,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
-const eventLoopUtilization = require('internal/perf/event_loop_utilization');
-const nodeTiming = require('internal/perf/nodetiming');
-const timerify = require('internal/perf/timerify');
-const { customInspectSymbol: kInspect } = require('internal/util');
+const eventLoopUtilization = require('../../internal/perf/event_loop_utilization');
+const nodeTiming = require('../../internal/perf/nodetiming');
+const timerify = require('../../internal/perf/timerify');
+const { customInspectSymbol: kInspect } = require('../../internal/util');
 const { inspect } = require('util');
 
 const {
diff --git a/lib/internal/perf/performance_entry.js b/lib/internal/perf/performance_entry.js
index d8eedb9fb8..6c2a4c1240 100644
--- a/lib/internal/perf/performance_entry.js
+++ b/lib/internal/perf/performance_entry.js
@@ -9,11 +9,11 @@ const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { inspect } = require('util');
 
diff --git a/lib/internal/perf/timerify.js b/lib/internal/perf/timerify.js
index dae0b06bf8..1b76f4cc24 100644
--- a/lib/internal/perf/timerify.js
+++ b/lib/internal/perf/timerify.js
@@ -9,17 +9,17 @@ const {
   Symbol,
 } = primordials;
 
-const { InternalPerformanceEntry } = require('internal/perf/performance_entry');
-const { now } = require('internal/perf/utils');
+const { InternalPerformanceEntry } = require('../../internal/perf/performance_entry');
+const { now } = require('../../internal/perf/utils');
 
 const {
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isHistogram
-} = require('internal/histogram');
+} = require('../../internal/histogram');
 
 const {
   isConstructor,
@@ -29,11 +29,11 @@ const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   enqueue,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
 const kTimerified = Symbol('kTimerified');
 
diff --git a/lib/internal/perf/usertiming.js b/lib/internal/perf/usertiming.js
index 496c75deb3..46df40f9f5 100644
--- a/lib/internal/perf/usertiming.js
+++ b/lib/internal/perf/usertiming.js
@@ -7,16 +7,16 @@ const {
   SymbolToStringTag,
 } = primordials;
 
-const { InternalPerformanceEntry } = require('internal/perf/performance_entry');
-const { now } = require('internal/perf/utils');
-const { enqueue } = require('internal/perf/observe');
-const nodeTiming = require('internal/perf/nodetiming');
+const { InternalPerformanceEntry } = require('../../internal/perf/performance_entry');
+const { now } = require('../../internal/perf/utils');
+const { enqueue } = require('../../internal/perf/observe');
+const nodeTiming = require('../../internal/perf/nodetiming');
 
 const {
   validateNumber,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -24,9 +24,9 @@ const {
     ERR_PERFORMANCE_INVALID_TIMESTAMP,
     ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const { structuredClone, lazyDOMException } = require('internal/util');
+const { structuredClone, lazyDOMException } = require('../../internal/util');
 
 const markTimings = new SafeMap();
 
diff --git a/lib/internal/policy/manifest.js b/lib/internal/policy/manifest.js
index a601113182..6af02d308d 100644
--- a/lib/internal/policy/manifest.js
+++ b/lib/internal/policy/manifest.js
@@ -23,20 +23,20 @@ const {
   ERR_MANIFEST_INVALID_RESOURCE_FIELD,
   ERR_MANIFEST_INVALID_SPECIFIER,
   ERR_MANIFEST_UNKNOWN_ONERROR,
-} = require('internal/errors').codes;
-let debug = require('internal/util/debuglog').debuglog('policy', (fn) => {
+} = require('../../internal/errors').codes;
+let debug = require('../../internal/util/debuglog').debuglog('policy', (fn) => {
   debug = fn;
 });
-const SRI = require('internal/policy/sri');
+const SRI = require('../../internal/policy/sri');
 const crypto = require('crypto');
 const { Buffer } = require('buffer');
-const { URL } = require('internal/url');
+const { URL } = require('../../internal/url');
 const { createHash, timingSafeEqual } = crypto;
 const HashUpdate = uncurryThis(crypto.Hash.prototype.update);
 const HashDigest = uncurryThis(crypto.Hash.prototype.digest);
 const BufferToString = uncurryThis(Buffer.prototype.toString);
 const kRelativeURLStringPattern = /^\.{0,2}\//;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 const shouldAbortOnUncaughtException = getOptionValue(
   '--abort-on-uncaught-exception'
 );
diff --git a/lib/internal/policy/sri.js b/lib/internal/policy/sri.js
index 6728ff4de2..1139ae3db7 100644
--- a/lib/internal/policy/sri.js
+++ b/lib/internal/policy/sri.js
@@ -16,7 +16,7 @@ const {
 
 const {
   ERR_SRI_PARSE
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const kWSP = '[\\x20\\x09]';
 const kVCHAR = '[\\x21-\\x7E]';
 const kHASH_ALGO = 'sha(?:256|384|512)';
diff --git a/lib/internal/process/esm_loader.js b/lib/internal/process/esm_loader.js
index 73385a85b4..9b817a4264 100644
--- a/lib/internal/process/esm_loader.js
+++ b/lib/internal/process/esm_loader.js
@@ -6,15 +6,15 @@ const {
 
 const {
   ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING,
-} = require('internal/errors').codes;
-const { ESMLoader } = require('internal/modules/esm/loader');
+} = require('../../internal/errors').codes;
+const { ESMLoader } = require('../../internal/modules/esm/loader');
 const {
   hasUncaughtExceptionCaptureCallback,
-} = require('internal/process/execution');
-const { pathToFileURL } = require('internal/url');
+} = require('../../internal/process/execution');
+const { pathToFileURL } = require('../../internal/url');
 const {
   getModuleFromWrap,
-} = require('internal/vm/module');
+} = require('../../internal/vm/module');
 
 exports.initializeImportMetaObject = function(wrap, meta) {
   const { callbackMap } = internalBinding('module_wrap');
@@ -48,14 +48,14 @@ exports.esmLoader = esmLoader;
  * @returns {void}
  */
 async function initializeLoader() {
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../../internal/options');
   // customLoaders CURRENTLY can be only 1 (a string)
   // Once chaining is implemented, it will be string[]
   const customLoaders = getOptionValue('--experimental-loader');
 
   if (!customLoaders.length) return;
 
-  const { emitExperimentalWarning } = require('internal/util');
+  const { emitExperimentalWarning } = require('../../internal/util');
   emitExperimentalWarning('--experimental-loader');
 
   let cwd;
diff --git a/lib/internal/process/execution.js b/lib/internal/process/execution.js
index e10a4f413c..70c4f760ad 100644
--- a/lib/internal/process/execution.js
+++ b/lib/internal/process/execution.js
@@ -12,7 +12,7 @@ const {
     ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET,
     ERR_EVAL_ESM_CANNOT_PRINT,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   executionAsyncId,
@@ -21,7 +21,7 @@ const {
   hasAsyncIdStack,
   afterHooksExist,
   emitAfter
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 
 // shouldAbortOnUncaughtToggle is a typed array for faster
 // communication with JS.
@@ -42,14 +42,14 @@ function evalModule(source, print) {
   if (print) {
     throw new ERR_EVAL_ESM_CANNOT_PRINT();
   }
-  const { loadESM } = require('internal/process/esm_loader');
-  const { handleMainPromise } = require('internal/modules/run_main');
+  const { loadESM } = require('../../internal/process/esm_loader');
+  const { handleMainPromise } = require('../../internal/modules/run_main');
   return handleMainPromise(loadESM((loader) => loader.eval(source)));
 }
 
 function evalScript(name, body, breakFirstLine, print) {
-  const CJSModule = require('internal/modules/cjs/loader').Module;
-  const { kVmBreakFirstLineSymbol } = require('internal/util');
+  const CJSModule = require('../../internal/modules/cjs/loader').Module;
+  const { kVmBreakFirstLineSymbol } = require('../../internal/util');
   const { pathToFileURL } = require('url');
 
   const cwd = tryGetCwd();
@@ -59,7 +59,7 @@ function evalScript(name, body, breakFirstLine, print) {
   module.filename = path.join(cwd, name);
   module.paths = CJSModule._nodeModulePaths(cwd);
 
-  const asyncESM = require('internal/process/esm_loader');
+  const asyncESM = require('../../internal/process/esm_loader');
   const baseUrl = pathToFileURL(module.filename).href;
 
   // Create wrapper for cache entry
@@ -82,7 +82,7 @@ function evalScript(name, body, breakFirstLine, print) {
       }
     }));
   if (print) {
-    const { log } = require('internal/console/global');
+    const { log } = require('../../internal/console/global');
     log(result);
   }
 
diff --git a/lib/internal/process/per_thread.js b/lib/internal/process/per_thread.js
index f1d11911a4..9a25f33ab3 100644
--- a/lib/internal/process/per_thread.js
+++ b/lib/internal/process/per_thread.js
@@ -39,13 +39,13 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_UNKNOWN_SIGNAL
   }
-} = require('internal/errors');
-const format = require('internal/util/inspect').format;
+} = require('../../internal/errors');
+const format = require('../../internal/util/inspect').format;
 const {
   validateArray,
   validateNumber,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const constants = internalBinding('constants').os.signals;
 
 const kInternal = Symbol('internal properties');
@@ -262,7 +262,7 @@ function buildAllowedFlags() {
     envSettings: { kAllowedInEnvironment },
     types: { kBoolean },
   } = internalBinding('options');
-  const { options, aliases } = require('internal/options');
+  const { options, aliases } = require('../../internal/options');
 
   const allowedNodeEnvironmentFlags = [];
   for (const { 0: name, 1: info } of options) {
@@ -386,7 +386,7 @@ function toggleTraceCategoryState(asyncHooksEnabled) {
   if (asyncHooksEnabled) {
     if (!traceEventsAsyncHook) {
       traceEventsAsyncHook =
-        require('internal/trace_events_async_hooks').createHook();
+        require('../../internal/trace_events_async_hooks').createHook();
     }
     traceEventsAsyncHook.enable();
   } else if (traceEventsAsyncHook) {
diff --git a/lib/internal/process/policy.js b/lib/internal/process/policy.js
index ea283a4497..9fa0b1fb5a 100644
--- a/lib/internal/process/policy.js
+++ b/lib/internal/process/policy.js
@@ -8,8 +8,8 @@ const {
 
 const {
   ERR_MANIFEST_TDZ,
-} = require('internal/errors').codes;
-const { Manifest } = require('internal/policy/manifest');
+} = require('../../internal/errors').codes;
+const { Manifest } = require('../../internal/policy/manifest');
 let manifest;
 let manifestSrc;
 let manifestURL;
diff --git a/lib/internal/process/promises.js b/lib/internal/process/promises.js
index a6c65b0be4..cc2819a9f8 100644
--- a/lib/internal/process/promises.js
+++ b/lib/internal/process/promises.js
@@ -27,9 +27,9 @@ const {
 const {
   pushAsyncContext,
   popAsyncContext,
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 const async_hooks = require('async_hooks');
-const { isErrorStackTraceLimitWritable } = require('internal/errors');
+const { isErrorStackTraceLimitWritable } = require('../../internal/errors');
 
 // *Must* match Environment::TickInfo::Fields in src/env.h.
 const kHasRejectionToWarn = 1;
@@ -77,7 +77,7 @@ function hasRejectionToWarn() {
 }
 
 function getUnhandledRejectionsMode() {
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../../internal/options');
   switch (getOptionValue('--unhandled-rejections')) {
     case 'none':
       return kIgnoreUnhandledRejections;
diff --git a/lib/internal/process/report.js b/lib/internal/process/report.js
index f34b71abe5..150a06e594 100644
--- a/lib/internal/process/report.js
+++ b/lib/internal/process/report.js
@@ -2,13 +2,13 @@
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_SYNTHETIC
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const {
   validateBoolean,
   validateObject,
   validateSignalName,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const nr = internalBinding('report');
 const {
   JSONParse,
diff --git a/lib/internal/process/signal.js b/lib/internal/process/signal.js
index 0631fe2b29..3e991cdc65 100644
--- a/lib/internal/process/signal.js
+++ b/lib/internal/process/signal.js
@@ -7,7 +7,7 @@ const {
 
 const {
   errnoException,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const { signals } = internalBinding('constants').os;
 
diff --git a/lib/internal/process/task_queues.js b/lib/internal/process/task_queues.js
index 2a14b9dea6..1ecb4607c5 100644
--- a/lib/internal/process/task_queues.js
+++ b/lib/internal/process/task_queues.js
@@ -20,7 +20,7 @@ const {
   hasRejectionToWarn,
   listenForRejections,
   processPromiseRejections
-} = require('internal/process/promises');
+} = require('../../internal/process/promises');
 
 const {
   getDefaultTriggerAsyncId,
@@ -32,13 +32,13 @@ const {
   emitAfter,
   emitDestroy,
   symbols: { async_id_symbol, trigger_async_id_symbol }
-} = require('internal/async_hooks');
-const FixedQueue = require('internal/fixed_queue');
+} = require('../../internal/async_hooks');
+const FixedQueue = require('../../internal/fixed_queue');
 
 const {
   validateCallback,
   validateFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { AsyncResource } = require('async_hooks');
 
diff --git a/lib/internal/process/warning.js b/lib/internal/process/warning.js
index 90c6076dc5..a781df8b2d 100644
--- a/lib/internal/process/warning.js
+++ b/lib/internal/process/warning.js
@@ -8,14 +8,14 @@ const {
   String,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   },
   isErrorStackTraceLimitWritable,
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
+} = require('../../internal/errors');
+const { validateString } = require('../../internal/validators');
 
 // Lazily loaded
 let fs;
@@ -27,7 +27,7 @@ function lazyOption() {
   // This will load `warningFile` only once. If the flag is not set,
   // `warningFile` will be set to an empty string.
   if (warningFile === undefined) {
-    options = require('internal/options');
+    options = require('../../internal/options');
     if (options.getOptionValue('--diagnostic-dir') !== '') {
       warningFile = options.getOptionValue('--diagnostic-dir');
     }
@@ -45,7 +45,7 @@ function lazyOption() {
 let error;
 function writeOut(message) {
   if (!error) {
-    error = require('internal/console/global').error;
+    error = require('../../internal/console/global').error;
   }
   error(message);
 }
diff --git a/lib/internal/process/worker_thread_only.js b/lib/internal/process/worker_thread_only.js
index 9d2a43b441..61abeba2e3 100644
--- a/lib/internal/process/worker_thread_only.js
+++ b/lib/internal/process/worker_thread_only.js
@@ -5,7 +5,7 @@
 
 const {
   codes: { ERR_WORKER_UNSUPPORTED_OPERATION }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 function unavailable(name) {
   function unavailableInWorker() {
diff --git a/lib/internal/querystring.js b/lib/internal/querystring.js
index 68f52c90c2..b474cdb19d 100644
--- a/lib/internal/querystring.js
+++ b/lib/internal/querystring.js
@@ -9,7 +9,7 @@ const {
   StringPrototypeToUpperCase,
 } = primordials;
 
-const { ERR_INVALID_URI } = require('internal/errors').codes;
+const { ERR_INVALID_URI } = require('../internal/errors').codes;
 
 const hexTable = new Array(256);
 for (let i = 0; i < 256; ++i)
diff --git a/lib/internal/readline/callbacks.js b/lib/internal/readline/callbacks.js
index ae7cf0c07d..e9a9bb77b5 100644
--- a/lib/internal/readline/callbacks.js
+++ b/lib/internal/readline/callbacks.js
@@ -9,14 +9,14 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_INVALID_CURSOR_POS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateCallback,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   CSI,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 
 const {
   kClearLine,
diff --git a/lib/internal/readline/emitKeypressEvents.js b/lib/internal/readline/emitKeypressEvents.js
index 9c5a2554de..459b1059fa 100644
--- a/lib/internal/readline/emitKeypressEvents.js
+++ b/lib/internal/readline/emitKeypressEvents.js
@@ -9,7 +9,7 @@ const {
   charLengthAt,
   CSI,
   emitKeys,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 
 const { clearTimeout, setTimeout } = require('timers');
 const {
diff --git a/lib/internal/repl.js b/lib/internal/repl.js
index 5eeb2e3490..e3d4fc4c09 100644
--- a/lib/internal/repl.js
+++ b/lib/internal/repl.js
@@ -8,7 +8,7 @@ const {
 } = primordials;
 
 const REPL = require('repl');
-const { kStandaloneREPL } = require('internal/repl/utils');
+const { kStandaloneREPL } = require('../internal/repl/utils');
 
 module.exports = ObjectCreate(REPL);
 module.exports.createInternalRepl = createRepl;
diff --git a/lib/internal/repl/await.js b/lib/internal/repl/await.js
index ec1d0c8823..fb37002e53 100644
--- a/lib/internal/repl/await.js
+++ b/lib/internal/repl/await.js
@@ -18,9 +18,9 @@ const {
   SyntaxError,
 } = primordials;
 
-const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
-const walk = require('internal/deps/acorn/acorn-walk/dist/walk');
-const { Recoverable } = require('internal/repl');
+const parser = require('../../internal/deps/acorn/acorn/dist/acorn').Parser;
+const walk = require('../../internal/deps/acorn/acorn-walk/dist/walk');
+const { Recoverable } = require('../../internal/repl');
 
 function isTopLevelDeclaration(state) {
   return state.ancestors[state.ancestors.length - 2] === state.body;
diff --git a/lib/internal/repl/history.js b/lib/internal/repl/history.js
index 74ef94e810..7c4e3b33f2 100644
--- a/lib/internal/repl/history.js
+++ b/lib/internal/repl/history.js
@@ -12,7 +12,7 @@ const { Interface } = require('readline');
 const path = require('path');
 const fs = require('fs');
 const os = require('os');
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
 const { clearTimeout, setTimeout } = require('timers');
diff --git a/lib/internal/repl/utils.js b/lib/internal/repl/utils.js
index 4ee177f6eb..1aa32e74c4 100644
--- a/lib/internal/repl/utils.js
+++ b/lib/internal/repl/utils.js
@@ -22,32 +22,32 @@ const {
 } = primordials;
 
 const { tokTypes: tt, Parser: AcornParser } =
-  require('internal/deps/acorn/acorn/dist/acorn');
+  require('../../internal/deps/acorn/acorn/dist/acorn');
 
-const { sendInspectorCommand } = require('internal/util/inspector');
+const { sendInspectorCommand } = require('../../internal/util/inspector');
 
 const {
   ERR_INSPECTOR_NOT_AVAILABLE
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 const {
   clearLine,
   clearScreenDown,
   cursorTo,
   moveCursor,
-} = require('internal/readline/callbacks');
+} = require('../../internal/readline/callbacks');
 
 const {
   commonPrefix,
   kSubstringSearch,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 
 const {
   getStringWidth,
   inspect,
-} = require('internal/util/inspect');
+} = require('../../internal/util/inspect');
 
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/socket_list.js b/lib/internal/socket_list.js
index e6b2a1d7c6..bbb53ff282 100644
--- a/lib/internal/socket_list.js
+++ b/lib/internal/socket_list.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('internal/errors').codes;
+const { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('../internal/errors').codes;
 
 const EventEmitter = require('events');
 
diff --git a/lib/internal/socketaddress.js b/lib/internal/socketaddress.js
index 9697a1e738..dd6a68442e 100644
--- a/lib/internal/socketaddress.js
+++ b/lib/internal/socketaddress.js
@@ -16,25 +16,25 @@ const {
   validateString,
   validatePort,
   validateUint32,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../internal/util');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 
 const {
   JSTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 const kHandle = Symbol('kHandle');
 const kDetail = Symbol('kDetail');
diff --git a/lib/internal/source_map/prepare_stack_trace.js b/lib/internal/source_map/prepare_stack_trace.js
index 9502cfef6f..7646d439e9 100644
--- a/lib/internal/source_map/prepare_stack_trace.js
+++ b/lib/internal/source_map/prepare_stack_trace.js
@@ -12,19 +12,19 @@ const {
   SafeStringIterator,
 } = primordials;
 
-let debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('source_map', (fn) => {
   debug = fn;
 });
-const { getStringWidth } = require('internal/util/inspect');
+const { getStringWidth } = require('../../internal/util/inspect');
 const { readFileSync } = require('fs');
-const { findSourceMap } = require('internal/source_map/source_map_cache');
+const { findSourceMap } = require('../../internal/source_map/source_map_cache');
 const {
   kNoOverride,
   overrideStackTrace,
   maybeOverridePrepareStackTrace,
   kIsNodeError,
-} = require('internal/errors');
-const { fileURLToPath } = require('internal/url');
+} = require('../../internal/errors');
+const { fileURLToPath } = require('../../internal/url');
 
 // Create a prettified stacktrace, inserting context from source maps
 // if possible.
diff --git a/lib/internal/source_map/source_map.js b/lib/internal/source_map/source_map.js
index 99091a4846..cba69de42d 100644
--- a/lib/internal/source_map/source_map.js
+++ b/lib/internal/source_map/source_map.js
@@ -77,7 +77,7 @@ const {
 
 const {
   ERR_INVALID_ARG_TYPE
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 let base64Map;
 
diff --git a/lib/internal/source_map/source_map_cache.js b/lib/internal/source_map/source_map_cache.js
index c0de6aeb51..53286c99d7 100644
--- a/lib/internal/source_map/source_map_cache.js
+++ b/lib/internal/source_map/source_map_cache.js
@@ -20,23 +20,23 @@ function ObjectGetValueSafe(obj, key) {
 
 // See https://sourcemaps.info/spec.html for SourceMap V3 specification.
 const { Buffer } = require('buffer');
-let debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('source_map', (fn) => {
   debug = fn;
 });
 const fs = require('fs');
-const { getOptionValue } = require('internal/options');
-const { IterableWeakMap } = require('internal/util/iterable_weak_map');
+const { getOptionValue } = require('../../internal/options');
+const { IterableWeakMap } = require('../../internal/util/iterable_weak_map');
 const {
   normalizeReferrerURL,
-} = require('internal/modules/cjs/helpers');
-const { validateBoolean } = require('internal/validators');
+} = require('../../internal/modules/cjs/helpers');
+const { validateBoolean } = require('../../internal/validators');
 // Since the CJS module cache is mutable, which leads to memory leaks when
 // modules are deleted, we use a WeakMap so that the source map cache will
 // be purged automatically:
 const cjsSourceMapCache = new IterableWeakMap();
 // The esm cache is not mutable, so we can use a Map without memory concerns:
 const esmSourceMapCache = new SafeMap();
-const { fileURLToPath, pathToFileURL, URL } = require('internal/url');
+const { fileURLToPath, pathToFileURL, URL } = require('../../internal/url');
 let SourceMap;
 
 let sourceMapsEnabled;
@@ -58,13 +58,13 @@ function setSourceMapsEnabled(val) {
   if (val) {
     const {
       prepareStackTrace
-    } = require('internal/source_map/prepare_stack_trace');
+    } = require('../../internal/source_map/prepare_stack_trace');
     setPrepareStackTraceCallback(prepareStackTrace);
   } else if (sourceMapsEnabled !== undefined) {
     // Reset prepare stack trace callback only when disabling source maps.
     const {
       prepareStackTrace,
-    } = require('internal/errors');
+    } = require('../../internal/errors');
     setPrepareStackTraceCallback(prepareStackTrace);
   }
 
@@ -223,7 +223,7 @@ function findSourceMap(sourceURL) {
     sourceURL = pathToFileURL(sourceURL).href;
   }
   if (!SourceMap) {
-    SourceMap = require('internal/source_map/source_map').SourceMap;
+    SourceMap = require('../../internal/source_map/source_map').SourceMap;
   }
   let sourceMap = esmSourceMapCache.get(sourceURL);
   if (sourceMap === undefined) {
diff --git a/lib/internal/stream_base_commons.js b/lib/internal/stream_base_commons.js
index 13b5f541cb..e2a23c3005 100644
--- a/lib/internal/stream_base_commons.js
+++ b/lib/internal/stream_base_commons.js
@@ -6,7 +6,7 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { FastBuffer } = require('internal/buffer');
+const { FastBuffer } = require('../internal/buffer');
 const {
   WriteWrap,
   kReadBytesOrError,
@@ -18,16 +18,16 @@ const {
 const { UV_EOF } = internalBinding('uv');
 const {
   errnoException
-} = require('internal/errors');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+} = require('../internal/errors');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
 const {
   kTimeout,
   setUnrefTimeout,
   getTimerDuration
-} = require('internal/timers');
-const { isUint8Array } = require('internal/util/types');
+} = require('../internal/timers');
+const { isUint8Array } = require('../internal/util/types');
 const { clearTimeout } = require('timers');
-const { validateCallback } = require('internal/validators');
+const { validateCallback } = require('../internal/validators');
 
 const kMaybeDestroy = Symbol('kMaybeDestroy');
 const kUpdateTimer = Symbol('kUpdateTimer');
@@ -35,7 +35,7 @@ const kAfterAsyncWrite = Symbol('kAfterAsyncWrite');
 const kHandle = Symbol('kHandle');
 const kSession = Symbol('kSession');
 
-let debug = require('internal/util/debuglog').debuglog('stream', (fn) => {
+let debug = require('../internal/util/debuglog').debuglog('stream', (fn) => {
   debug = fn;
 });
 const kBuffer = Symbol('kBuffer');
diff --git a/lib/internal/streams/add-abort-signal.js b/lib/internal/streams/add-abort-signal.js
index ba0da5e8bc..1dbe329e20 100644
--- a/lib/internal/streams/add-abort-signal.js
+++ b/lib/internal/streams/add-abort-signal.js
@@ -3,9 +3,9 @@
 const {
   AbortError,
   codes,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const eos = require('internal/streams/end-of-stream');
+const eos = require('../../internal/streams/end-of-stream');
 const { ERR_INVALID_ARG_TYPE } = codes;
 
 // This method is inlined here for readable-stream
diff --git a/lib/internal/streams/buffer_list.js b/lib/internal/streams/buffer_list.js
index 2dc803d6fa..8efd4e61fd 100644
--- a/lib/internal/streams/buffer_list.js
+++ b/lib/internal/streams/buffer_list.js
@@ -8,7 +8,7 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 module.exports = class BufferList {
   constructor() {
diff --git a/lib/internal/streams/compose.js b/lib/internal/streams/compose.js
index d11a372732..a84e16b7d1 100644
--- a/lib/internal/streams/compose.js
+++ b/lib/internal/streams/compose.js
@@ -1,20 +1,20 @@
 'use strict';
 
-const { pipeline } = require('internal/streams/pipeline');
-const Duplex = require('internal/streams/duplex');
-const { destroyer } = require('internal/streams/destroy');
+const { pipeline } = require('../../internal/streams/pipeline');
+const Duplex = require('../../internal/streams/duplex');
+const { destroyer } = require('../../internal/streams/destroy');
 const {
   isNodeStream,
   isReadable,
   isWritable,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 const {
   AbortError,
   codes: {
     ERR_INVALID_ARG_VALUE,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 // This is needed for pre node 17.
 class ComposeDuplex extends Duplex {
diff --git a/lib/internal/streams/destroy.js b/lib/internal/streams/destroy.js
index 06c74db830..3641927f25 100644
--- a/lib/internal/streams/destroy.js
+++ b/lib/internal/streams/destroy.js
@@ -5,7 +5,7 @@ const {
   codes: {
     ERR_MULTIPLE_CALLBACK,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   Symbol,
 } = primordials;
diff --git a/lib/internal/streams/duplex.js b/lib/internal/streams/duplex.js
index c7b3056de4..8f9be77346 100644
--- a/lib/internal/streams/duplex.js
+++ b/lib/internal/streams/duplex.js
@@ -35,8 +35,8 @@ const {
 
 module.exports = Duplex;
 
-const Readable = require('internal/streams/readable');
-const Writable = require('internal/streams/writable');
+const Readable = require('../../internal/streams/readable');
+const Writable = require('../../internal/streams/writable');
 
 ObjectSetPrototypeOf(Duplex.prototype, Readable.prototype);
 ObjectSetPrototypeOf(Duplex, Readable);
@@ -113,7 +113,7 @@ let duplexify;
 
 Duplex.from = function(body) {
   if (!duplexify) {
-    duplexify = require('internal/streams/duplexify');
+    duplexify = require('../../internal/streams/duplexify');
   }
   return duplexify(body, 'body');
 };
diff --git a/lib/internal/streams/duplexify.js b/lib/internal/streams/duplexify.js
index 7fd5df9f27..405e049960 100644
--- a/lib/internal/streams/duplexify.js
+++ b/lib/internal/streams/duplexify.js
@@ -8,25 +8,25 @@ const {
   isWritable,
   isWritableNodeStream,
   isDuplexNodeStream,
-} = require('internal/streams/utils');
-const eos = require('internal/streams/end-of-stream');
+} = require('../../internal/streams/utils');
+const eos = require('../../internal/streams/end-of-stream');
 const {
   AbortError,
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_RETURN_VALUE,
   },
-} = require('internal/errors');
-const { destroyer } = require('internal/streams/destroy');
-const Duplex = require('internal/streams/duplex');
-const Readable = require('internal/streams/readable');
-const { createDeferredPromise } = require('internal/util');
-const from = require('internal/streams/from');
+} = require('../../internal/errors');
+const { destroyer } = require('../../internal/streams/destroy');
+const Duplex = require('../../internal/streams/duplex');
+const Readable = require('../../internal/streams/readable');
+const { createDeferredPromise } = require('../../internal/util');
+const from = require('../../internal/streams/from');
 
 const {
   isBlob,
-} = require('internal/blob');
-const { AbortController } = require('internal/abort_controller');
+} = require('../../internal/blob');
+const { AbortController } = require('../../internal/abort_controller');
 
 const {
   FunctionPrototypeCall
diff --git a/lib/internal/streams/end-of-stream.js b/lib/internal/streams/end-of-stream.js
index 4702ddd6d5..8b74c58744 100644
--- a/lib/internal/streams/end-of-stream.js
+++ b/lib/internal/streams/end-of-stream.js
@@ -6,16 +6,16 @@
 const {
   AbortError,
   codes,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   ERR_STREAM_PREMATURE_CLOSE
 } = codes;
-const { once } = require('internal/util');
+const { once } = require('../../internal/util');
 const {
   validateAbortSignal,
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 function isRequest(stream) {
   return stream.setHeader && typeof stream.abort === 'function';
diff --git a/lib/internal/streams/from.js b/lib/internal/streams/from.js
index d3d43f7dfb..9c22b9d34c 100644
--- a/lib/internal/streams/from.js
+++ b/lib/internal/streams/from.js
@@ -10,7 +10,7 @@ const { Buffer } = require('buffer');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_STREAM_NULL_VALUES
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 function from(Readable, iterable, opts) {
   let iterator;
diff --git a/lib/internal/streams/lazy_transform.js b/lib/internal/streams/lazy_transform.js
index 555e6430e3..59f73d166f 100644
--- a/lib/internal/streams/lazy_transform.js
+++ b/lib/internal/streams/lazy_transform.js
@@ -13,7 +13,7 @@ const stream = require('stream');
 
 const {
   getDefaultEncoding
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 module.exports = LazyTransform;
 
diff --git a/lib/internal/streams/passthrough.js b/lib/internal/streams/passthrough.js
index d37f9caf01..5127cc4e62 100644
--- a/lib/internal/streams/passthrough.js
+++ b/lib/internal/streams/passthrough.js
@@ -31,7 +31,7 @@ const {
 
 module.exports = PassThrough;
 
-const Transform = require('internal/streams/transform');
+const Transform = require('../../internal/streams/transform');
 ObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype);
 ObjectSetPrototypeOf(PassThrough, Transform);
 
diff --git a/lib/internal/streams/pipeline.js b/lib/internal/streams/pipeline.js
index 8dc4e5792c..d1b5ae977a 100644
--- a/lib/internal/streams/pipeline.js
+++ b/lib/internal/streams/pipeline.js
@@ -9,10 +9,10 @@ const {
   SymbolAsyncIterator,
 } = primordials;
 
-const eos = require('internal/streams/end-of-stream');
-const { once } = require('internal/util');
-const destroyImpl = require('internal/streams/destroy');
-const Duplex = require('internal/streams/duplex');
+const eos = require('../../internal/streams/end-of-stream');
+const { once } = require('../../internal/util');
+const destroyImpl = require('../../internal/streams/destroy');
+const Duplex = require('../../internal/streams/duplex');
 const {
   aggregateTwoErrors,
   codes: {
@@ -22,19 +22,19 @@ const {
     ERR_STREAM_DESTROYED,
   },
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateCallback,
   validateAbortSignal
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isIterable,
   isReadableNodeStream,
   isNodeStream,
-} = require('internal/streams/utils');
-const { AbortController } = require('internal/abort_controller');
+} = require('../../internal/streams/utils');
+const { AbortController } = require('../../internal/abort_controller');
 
 let PassThrough;
 let Readable;
@@ -102,7 +102,7 @@ function makeAsyncIterable(val) {
 
 async function* fromReadable(val) {
   if (!Readable) {
-    Readable = require('internal/streams/readable');
+    Readable = require('../../internal/streams/readable');
   }
 
   yield* Readable.prototype[SymbolAsyncIterator].call(val);
@@ -255,7 +255,7 @@ function pipelineImpl(streams, callback, opts) {
         }
       } else {
         if (!PassThrough) {
-          PassThrough = require('internal/streams/passthrough');
+          PassThrough = require('../../internal/streams/passthrough');
         }
 
         // If the last argument to pipeline is not a stream
diff --git a/lib/internal/streams/readable.js b/lib/internal/streams/readable.js
index 03953c37ea..546b0cc9d4 100644
--- a/lib/internal/streams/readable.js
+++ b/lib/internal/streams/readable.js
@@ -39,35 +39,35 @@ module.exports = Readable;
 Readable.ReadableState = ReadableState;
 
 const EE = require('events');
-const { Stream, prependListener } = require('internal/streams/legacy');
+const { Stream, prependListener } = require('../../internal/streams/legacy');
 const { Buffer } = require('buffer');
 
 const {
   addAbortSignalNoValidate,
-} = require('internal/streams/add-abort-signal');
+} = require('../../internal/streams/add-abort-signal');
 
-let debug = require('internal/util/debuglog').debuglog('stream', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('stream', (fn) => {
   debug = fn;
 });
-const BufferList = require('internal/streams/buffer_list');
-const destroyImpl = require('internal/streams/destroy');
+const BufferList = require('../../internal/streams/buffer_list');
+const destroyImpl = require('../../internal/streams/destroy');
 const {
   getHighWaterMark,
   getDefaultHighWaterMark
-} = require('internal/streams/state');
+} = require('../../internal/streams/state');
 
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_STREAM_PUSH_AFTER_EOF,
   ERR_METHOD_NOT_IMPLEMENTED,
   ERR_STREAM_UNSHIFT_AFTER_END_EVENT
-} = require('internal/errors').codes;
-const { validateObject } = require('internal/validators');
+} = require('../../internal/errors').codes;
+const { validateObject } = require('../../internal/validators');
 
 const kPaused = Symbol('kPaused');
 
 const { StringDecoder } = require('string_decoder');
-const from = require('internal/streams/from');
+const from = require('../../internal/streams/from');
 
 ObjectSetPrototypeOf(Readable.prototype, Stream.prototype);
 ObjectSetPrototypeOf(Readable, Stream);
diff --git a/lib/internal/streams/state.js b/lib/internal/streams/state.js
index 83050a62f9..2211cecebf 100644
--- a/lib/internal/streams/state.js
+++ b/lib/internal/streams/state.js
@@ -5,7 +5,7 @@ const {
   NumberIsInteger,
 } = primordials;
 
-const { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;
+const { ERR_INVALID_ARG_VALUE } = require('../../internal/errors').codes;
 
 function highWaterMarkFrom(options, isDuplex, duplexKey) {
   return options.highWaterMark != null ? options.highWaterMark :
diff --git a/lib/internal/streams/transform.js b/lib/internal/streams/transform.js
index 26e0b07c29..ffb7877612 100644
--- a/lib/internal/streams/transform.js
+++ b/lib/internal/streams/transform.js
@@ -71,8 +71,8 @@ const {
 module.exports = Transform;
 const {
   ERR_METHOD_NOT_IMPLEMENTED
-} = require('internal/errors').codes;
-const Duplex = require('internal/streams/duplex');
+} = require('../../internal/errors').codes;
+const Duplex = require('../../internal/streams/duplex');
 ObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);
 ObjectSetPrototypeOf(Transform, Duplex);
 
diff --git a/lib/internal/streams/writable.js b/lib/internal/streams/writable.js
index f41cc183f0..ee672a73de 100644
--- a/lib/internal/streams/writable.js
+++ b/lib/internal/streams/writable.js
@@ -41,18 +41,18 @@ module.exports = Writable;
 Writable.WritableState = WritableState;
 
 const EE = require('events');
-const Stream = require('internal/streams/legacy').Stream;
+const Stream = require('../../internal/streams/legacy').Stream;
 const { Buffer } = require('buffer');
-const destroyImpl = require('internal/streams/destroy');
+const destroyImpl = require('../../internal/streams/destroy');
 
 const {
   addAbortSignalNoValidate,
-} = require('internal/streams/add-abort-signal');
+} = require('../../internal/streams/add-abort-signal');
 
 const {
   getHighWaterMark,
   getDefaultHighWaterMark
-} = require('internal/streams/state');
+} = require('../../internal/streams/state');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_METHOD_NOT_IMPLEMENTED,
@@ -63,7 +63,7 @@ const {
   ERR_STREAM_NULL_VALUES,
   ERR_STREAM_WRITE_AFTER_END,
   ERR_UNKNOWN_ENCODING
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 const { errorOrDestroy } = destroyImpl;
 
diff --git a/lib/internal/test/transfer.js b/lib/internal/test/transfer.js
index b814c37fe6..90570935c8 100644
--- a/lib/internal/test/transfer.js
+++ b/lib/internal/test/transfer.js
@@ -4,7 +4,7 @@ const {
   makeTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 process.emitWarning(
   'These APIs are for internal testing only. Do not use them.',
diff --git a/lib/internal/timers.js b/lib/internal/timers.js
index 9a07fe3348..9304773a42 100644
--- a/lib/internal/timers.js
+++ b/lib/internal/timers.js
@@ -100,7 +100,7 @@ const {
   emitBefore,
   emitAfter,
   emitDestroy,
-} = require('internal/async_hooks');
+} = require('../internal/async_hooks');
 
 // Symbols for storing async id state.
 const async_id_symbol = Symbol('asyncId');
@@ -110,17 +110,17 @@ const kHasPrimitive = Symbol('kHasPrimitive');
 
 const {
   ERR_OUT_OF_RANGE
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 const {
   validateCallback,
   validateNumber,
-} = require('internal/validators');
+} = require('../internal/validators');
 
-const L = require('internal/linkedlist');
-const PriorityQueue = require('internal/priority_queue');
+const L = require('../internal/linkedlist');
+const PriorityQueue = require('../internal/priority_queue');
 
-const { inspect } = require('internal/util/inspect');
-let debug = require('internal/util/debuglog').debuglog('timer', (fn) => {
+const { inspect } = require('../internal/util/inspect');
+let debug = require('../internal/util/debuglog').debuglog('timer', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/tls/secure-context.js b/lib/internal/tls/secure-context.js
index 50a68df092..95936aba25 100644
--- a/lib/internal/tls/secure-context.js
+++ b/lib/internal/tls/secure-context.js
@@ -15,21 +15,21 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   toBuf,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   crypto: {
diff --git a/lib/internal/trace_events_async_hooks.js b/lib/internal/trace_events_async_hooks.js
index 482a635f25..887af4a44e 100644
--- a/lib/internal/trace_events_async_hooks.js
+++ b/lib/internal/trace_events_async_hooks.js
@@ -13,7 +13,7 @@ const async_hooks = require('async_hooks');
 const {
   CHAR_LOWERCASE_B,
   CHAR_LOWERCASE_E,
-} = require('internal/constants');
+} = require('../internal/constants');
 
 // Use small letters such that chrome://tracing groups by the name.
 // The behavior is not only useful but the same as the events emitted using
diff --git a/lib/internal/tty.js b/lib/internal/tty.js
index 5abf0b908b..e5beafc4e4 100644
--- a/lib/internal/tty.js
+++ b/lib/internal/tty.js
@@ -29,7 +29,7 @@ const {
   StringPrototypeToLowerCase,
 } = primordials;
 
-const { validateInteger } = require('internal/validators');
+const { validateInteger } = require('../internal/validators');
 
 let OSRelease;
 
diff --git a/lib/internal/url.js b/lib/internal/url.js
index 3035c9c197..e509e83a64 100644
--- a/lib/internal/url.js
+++ b/lib/internal/url.js
@@ -32,18 +32,18 @@ const {
   decodeURIComponent,
 } = primordials;
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 const {
   encodeStr,
   hexTable,
   isHexTable
-} = require('internal/querystring');
+} = require('../internal/querystring');
 
 const {
   getConstructorOf,
   removeColors,
   toUSVString,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   codes: {
@@ -59,7 +59,7 @@ const {
     ERR_MISSING_ARGS,
     ERR_NO_CRYPTO,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 const {
   CHAR_AMPERSAND,
   CHAR_BACKWARD_SLASH,
@@ -69,13 +69,13 @@ const {
   CHAR_LOWERCASE_Z,
   CHAR_PERCENT,
   CHAR_PLUS
-} = require('internal/constants');
+} = require('../internal/constants');
 const path = require('path');
 
 const {
   validateCallback,
   validateObject,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const querystring = require('querystring');
 
@@ -123,13 +123,13 @@ let blob;
 let cryptoRandom;
 
 function lazyBlob() {
-  blob ??= require('internal/blob');
+  blob ??= require('../internal/blob');
   return blob;
 }
 
 function lazyCryptoRandom() {
   try {
-    cryptoRandom ??= require('internal/crypto/random');
+    cryptoRandom ??= require('../internal/crypto/random');
   } catch {
     // If Node.js built without crypto support, we'll fall
     // through here and handle it later.
diff --git a/lib/internal/util.js b/lib/internal/util.js
index a370606256..68080b6a28 100644
--- a/lib/internal/util.js
+++ b/lib/internal/util.js
@@ -36,7 +36,7 @@ const {
   },
   uvErrmapGet,
   overrideStackTrace,
-} = require('internal/errors');
+} = require('../internal/errors');
 const { signals } = internalBinding('constants').os;
 const {
   getHiddenValue,
@@ -100,7 +100,7 @@ function deprecate(fn, msg, code) {
 
   // Lazy-load to avoid a circular dependency.
   if (validateString === undefined)
-    ({ validateString } = require('internal/validators'));
+    ({ validateString } = require('../internal/validators'));
 
   if (code !== undefined)
     validateString(code, 'code');
@@ -324,7 +324,7 @@ let validateFunction;
 function promisify(original) {
   // Lazy-load to avoid a circular dependency.
   if (validateFunction === undefined)
-    ({ validateFunction } = require('internal/validators'));
+    ({ validateFunction } = require('../internal/validators'));
 
   validateFunction(original, 'original');
 
@@ -449,7 +449,7 @@ let validateUint32;
 function sleep(msec) {
   // Lazy-load to avoid a circular dependency.
   if (validateUint32 === undefined)
-    ({ validateUint32 } = require('internal/validators'));
+    ({ validateUint32 } = require('../internal/validators'));
 
   validateUint32(msec, 'msec');
   _sleep(msec);
diff --git a/lib/internal/util/comparisons.js b/lib/internal/util/comparisons.js
index 95515fb78a..920271fcd5 100644
--- a/lib/internal/util/comparisons.js
+++ b/lib/internal/util/comparisons.js
@@ -26,8 +26,8 @@ const {
 } = primordials;
 
 const { compare } = internalBinding('buffer');
-const assert = require('internal/assert');
-const types = require('internal/util/types');
+const assert = require('../../internal/assert');
+const types = require('../../internal/util/types');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
diff --git a/lib/internal/util/debuglog.js b/lib/internal/util/debuglog.js
index 93c741e753..da71520150 100644
--- a/lib/internal/util/debuglog.js
+++ b/lib/internal/util/debuglog.js
@@ -10,7 +10,7 @@ const {
   StringPrototypeToUpperCase,
 } = primordials;
 
-const { inspect, format, formatWithOptions } = require('internal/util/inspect');
+const { inspect, format, formatWithOptions } = require('../../internal/util/inspect');
 
 // `debugImpls` and `testEnabled` are deliberately not initialized so any call
 // to `debuglog()` before `initializeDebugEnv()` is called will throw.
diff --git a/lib/internal/util/inspect.js b/lib/internal/util/inspect.js
index 4936ab761d..7e02cece1b 100644
--- a/lib/internal/util/inspect.js
+++ b/lib/internal/util/inspect.js
@@ -99,14 +99,14 @@ const {
   isError,
   join,
   removeColors
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE
   },
   isStackOverflowError
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   isAsyncFunction,
@@ -133,15 +133,15 @@ const {
   isNumberObject,
   isBooleanObject,
   isBigIntObject,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
-const { NativeModule } = require('internal/bootstrap/loaders');
+const { NativeModule } = require('../../internal/bootstrap/loaders');
 const {
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 let hexSlice;
 
diff --git a/lib/internal/util/inspector.js b/lib/internal/util/inspector.js
index cf8651c33a..21c0fb66e7 100644
--- a/lib/internal/util/inspector.js
+++ b/lib/internal/util/inspector.js
@@ -24,9 +24,9 @@ function sendInspectorCommand(cb, onError) {
 // Create a special require function for the inspector command line API
 function installConsoleExtensions(commandLineApi) {
   if (commandLineApi.require) { return; }
-  const { tryGetCwd } = require('internal/process/execution');
-  const CJSModule = require('internal/modules/cjs/loader').Module;
-  const { makeRequireFunction } = require('internal/modules/cjs/helpers');
+  const { tryGetCwd } = require('../../internal/process/execution');
+  const CJSModule = require('../../internal/modules/cjs/loader').Module;
+  const { makeRequireFunction } = require('../../internal/modules/cjs/helpers');
   const consoleAPIModule = new CJSModule('<inspector console>');
   const cwd = tryGetCwd();
   consoleAPIModule.paths = ArrayPrototypeConcat(
diff --git a/lib/internal/util/types.js b/lib/internal/util/types.js
index aca7dbc4b2..c6683300ca 100644
--- a/lib/internal/util/types.js
+++ b/lib/internal/util/types.js
@@ -84,7 +84,7 @@ ObjectDefineProperties(module.exports, {
       }
 
       if (!isKeyObject) {
-        ({ isKeyObject } = require('internal/crypto/keys'));
+        ({ isKeyObject } = require('../../internal/crypto/keys'));
       }
 
       return isKeyObject(obj);
@@ -99,7 +99,7 @@ ObjectDefineProperties(module.exports, {
       }
 
       if (!isCryptoKey) {
-        ({ isCryptoKey } = require('internal/crypto/keys'));
+        ({ isCryptoKey } = require('../../internal/crypto/keys'));
       }
 
       return isCryptoKey(obj);
diff --git a/lib/internal/v8_prof_processor.js b/lib/internal/v8_prof_processor.js
index 4ed6fe8b9b..b771a47ab0 100644
--- a/lib/internal/v8_prof_processor.js
+++ b/lib/internal/v8_prof_processor.js
@@ -8,9 +8,9 @@ const {
 } = primordials;
 
 const Buffer = require('buffer').Buffer;
-const console = require('internal/console/global');
+const console = require('../internal/console/global');
 const vm = require('vm');
-const { SourceTextModule } = require('internal/vm/module');
+const { SourceTextModule } = require('../internal/vm/module');
 
 const natives = internalBinding('natives');
 
diff --git a/lib/internal/validators.js b/lib/internal/validators.js
index 81329160f0..9d23e82399 100644
--- a/lib/internal/validators.js
+++ b/lib/internal/validators.js
@@ -25,11 +25,11 @@ const {
     ERR_UNKNOWN_SIGNAL,
     ERR_INVALID_CALLBACK,
   }
-} = require('internal/errors');
-const { normalizeEncoding } = require('internal/util');
+} = require('../internal/errors');
+const { normalizeEncoding } = require('../internal/util');
 const {
   isArrayBufferView
-} = require('internal/util/types');
+} = require('../internal/util/types');
 const { signals } = internalBinding('constants').os;
 
 function isInt32(value) {
diff --git a/lib/internal/vm/module.js b/lib/internal/vm/module.js
index 911b8f4426..7f6a8ec343 100644
--- a/lib/internal/vm/module.js
+++ b/lib/internal/vm/module.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const {
   ArrayIsArray,
   ArrayPrototypeForEach,
@@ -22,12 +22,12 @@ const { isContext } = internalBinding('contextify');
 const {
   isModuleNamespaceObject,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 const {
   getConstructorOf,
   customInspectSymbol,
   emitExperimentalWarning,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
@@ -37,7 +37,7 @@ const {
   ERR_VM_MODULE_LINKING_ERRORED,
   ERR_VM_MODULE_NOT_MODULE,
   ERR_VM_MODULE_STATUS,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const {
   validateBoolean,
   validateFunction,
@@ -45,7 +45,7 @@ const {
   validateObject,
   validateUint32,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const binding = internalBinding('module_wrap');
 const {
@@ -244,7 +244,7 @@ class Module {
     });
 
     // Lazy to avoid circular dependency
-    const { inspect } = require('internal/util/inspect');
+    const { inspect } = require('../../internal/util/inspect');
     return inspect(o, { ...options, customInspect: false });
   }
 }
diff --git a/lib/internal/webstreams/encoding.js b/lib/internal/webstreams/encoding.js
index 5af59bc9f4..2dcd113f64 100644
--- a/lib/internal/webstreams/encoding.js
+++ b/lib/internal/webstreams/encoding.js
@@ -8,26 +8,26 @@ const {
 const {
   TextDecoder,
   TextEncoder,
-} = require('internal/encoding');
+} = require('../../internal/encoding');
 
 const {
   TransformStream,
-} = require('internal/webstreams/transformstream');
+} = require('../../internal/webstreams/transformstream');
 
 const {
   customInspect,
   kEnumerableProperty,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   codes: {
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect
-} = require('internal/util');
+} = require('../../internal/util');
 
 const kHandle = Symbol('kHandle');
 const kTransform = Symbol('kTransform');
diff --git a/lib/internal/webstreams/queuingstrategies.js b/lib/internal/webstreams/queuingstrategies.js
index 2db51b92a7..3ec074d553 100644
--- a/lib/internal/webstreams/queuingstrategies.js
+++ b/lib/internal/webstreams/queuingstrategies.js
@@ -10,11 +10,11 @@ const {
     ERR_INVALID_THIS,
     ERR_MISSING_OPTION,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   customInspect,
@@ -22,11 +22,11 @@ const {
   kType,
   kState,
   kEnumerableProperty,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const isByteLengthQueuingStrategy =
   isBrandCheck('ByteLengthQueuingStrategy');
diff --git a/lib/internal/webstreams/readablestream.js b/lib/internal/webstreams/readablestream.js
index fe9b26b991..8dc545cb31 100644
--- a/lib/internal/webstreams/readablestream.js
+++ b/lib/internal/webstreams/readablestream.js
@@ -36,7 +36,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -45,12 +45,12 @@ const {
 const {
   isArrayBufferView,
   isDataView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   createDeferredPromise,
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   serialize,
@@ -59,30 +59,30 @@ const {
 
 const {
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   kAborted,
-} = require('internal/abort_controller');
+} = require('../../internal/abort_controller');
 
 const {
   MessageChannel,
-} = require('internal/worker/io');
+} = require('../../internal/worker/io');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   makeTransferable,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   queueMicrotask,
-} = require('internal/process/task_queues');
+} = require('../../internal/process/task_queues');
 
 const {
   kIsDisturbed,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
 const {
   ArrayBufferViewGetBuffer,
@@ -108,7 +108,7 @@ const {
   kType,
   kState,
   kEnumerableProperty,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   WritableStreamDefaultWriter,
@@ -123,9 +123,9 @@ const {
   writableStreamDefaultWriterCloseWithErrorPropagation,
   writableStreamDefaultWriterRelease,
   writableStreamDefaultWriterWrite,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kCancel = Symbol('kCancel');
 const kClose = Symbol('kClose');
diff --git a/lib/internal/webstreams/transfer.js b/lib/internal/webstreams/transfer.js
index 985d7e8673..659f170663 100644
--- a/lib/internal/webstreams/transfer.js
+++ b/lib/internal/webstreams/transfer.js
@@ -9,7 +9,7 @@ const {
 const {
   kState,
   setPromiseHandled,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   DOMException,
@@ -21,24 +21,24 @@ const {
   readableStreamDefaultControllerClose,
   readableStreamDefaultControllerError,
   readableStreamPipeTo,
-} = require('internal/webstreams/readablestream');
+} = require('../../internal/webstreams/readablestream');
 
 const {
   WritableStream,
   writableStreamDefaultControllerErrorIfNeeded,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
 const {
   createDeferredPromise,
-} = require('internal/util');
+} = require('../../internal/util');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const {
   makeTransferable,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 // This class is a bit of a hack. The Node.js implementation of
 // DOMException is not transferable/cloneable. This provides us
diff --git a/lib/internal/webstreams/transformstream.js b/lib/internal/webstreams/transformstream.js
index b4e690daa9..62262ed986 100644
--- a/lib/internal/webstreams/transformstream.js
+++ b/lib/internal/webstreams/transformstream.js
@@ -18,7 +18,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -27,14 +27,14 @@ const {
 const {
   createDeferredPromise,
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   makeTransferable,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspect,
@@ -46,7 +46,7 @@ const {
   kType,
   kState,
   kEnumerableProperty,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   ReadableStream,
@@ -56,14 +56,14 @@ const {
   readableStreamDefaultControllerError,
   readableStreamDefaultControllerGetDesiredSize,
   readableStreamDefaultControllerHasBackpressure,
-} = require('internal/webstreams/readablestream');
+} = require('../../internal/webstreams/readablestream');
 
 const {
   WritableStream,
   writableStreamDefaultControllerErrorIfNeeded,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 /**
  * @typedef {import('./queuingstrategies').QueuingStrategy
diff --git a/lib/internal/webstreams/util.js b/lib/internal/webstreams/util.js
index 58f191cf07..5641e21fcc 100644
--- a/lib/internal/webstreams/util.js
+++ b/lib/internal/webstreams/util.js
@@ -22,7 +22,7 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_OPERATION_FAILED,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   copyArrayBuffer,
@@ -31,7 +31,7 @@ const {
 
 const {
   isPromise,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   inspect,
@@ -42,7 +42,7 @@ const {
   kPending,
 } = internalBinding('util');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kState = Symbol('kState');
 const kType = Symbol('kType');
@@ -203,7 +203,7 @@ async function nonOpWrite() {}
 let transfer;
 function lazyTransfer() {
   if (transfer === undefined)
-    transfer = require('internal/webstreams/transfer');
+    transfer = require('../../internal/webstreams/transfer');
   return transfer;
 }
 
diff --git a/lib/internal/webstreams/writablestream.js b/lib/internal/webstreams/writablestream.js
index dba7560c54..d872d3cad2 100644
--- a/lib/internal/webstreams/writablestream.js
+++ b/lib/internal/webstreams/writablestream.js
@@ -24,7 +24,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -33,18 +33,18 @@ const {
 const {
   createDeferredPromise,
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   MessageChannel,
-} = require('internal/worker/io');
+} = require('../../internal/worker/io');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   makeTransferable,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspect,
@@ -65,13 +65,13 @@ const {
   kType,
   kState,
   kEnumerableProperty,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   AbortController,
-} = require('internal/abort_controller');
+} = require('../../internal/abort_controller');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kAbort = Symbol('kAbort');
 const kCloseSentinel = Symbol('kCloseSentinel');
diff --git a/lib/internal/worker.js b/lib/internal/worker.js
index 1d2cd8cefd..cc242edc5c 100644
--- a/lib/internal/worker.js
+++ b/lib/internal/worker.js
@@ -25,11 +25,11 @@ const {
 } = primordials;
 
 const EventEmitter = require('events');
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 const path = require('path');
-const { now } = require('internal/perf/utils');
+const { now } = require('../internal/perf/utils');
 
-const errorCodes = require('internal/errors').codes;
+const errorCodes = require('../internal/errors').codes;
 const {
   ERR_WORKER_NOT_RUNNING,
   ERR_WORKER_PATH,
@@ -38,9 +38,9 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
 } = errorCodes;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../internal/options');
 
-const workerIo = require('internal/worker/io');
+const workerIo = require('../internal/worker/io');
 const {
   drainMessagePort,
   MessageChannel,
@@ -53,9 +53,9 @@ const {
   ReadableWorkerStdio,
   WritableWorkerStdio
 } = workerIo;
-const { deserializeError } = require('internal/error_serdes');
-const { fileURLToPath, isURLInstance, pathToFileURL } = require('internal/url');
-const { validateArray } = require('internal/validators');
+const { deserializeError } = require('../internal/error_serdes');
+const { fileURLToPath, isURLInstance, pathToFileURL } = require('../internal/url');
+const { validateArray } = require('../internal/validators');
 
 const {
   ownsProcessState,
@@ -82,7 +82,7 @@ const kLoopStartTime = Symbol('kLoopStartTime');
 const kIsOnline = Symbol('kIsOnline');
 
 const SHARE_ENV = SymbolFor('nodejs.worker_threads.SHARE_ENV');
-let debug = require('internal/util/debuglog').debuglog('worker', (fn) => {
+let debug = require('../internal/util/debuglog').debuglog('worker', (fn) => {
   debug = fn;
 });
 
@@ -242,10 +242,10 @@ class Worker extends EventEmitter {
       environmentData,
       publicPort: port2,
       manifestURL: getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').url :
+        require('../internal/process/policy').url :
         null,
       manifestSrc: getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').src :
+        require('../internal/process/policy').src :
         null,
       hasStdin: !!options.stdin
     }, transferList);
@@ -410,7 +410,7 @@ class Worker extends EventEmitter {
     return new Promise((resolve, reject) => {
       if (!heapSnapshotTaker) return reject(new ERR_WORKER_NOT_RUNNING());
       heapSnapshotTaker.ondone = (handle) => {
-        const { HeapSnapshotStream } = require('internal/heap_utils');
+        const { HeapSnapshotStream } = require('../internal/heap_utils');
         resolve(new HeapSnapshotStream(handle));
       };
     });
diff --git a/lib/internal/worker/io.js b/lib/internal/worker/io.js
index 5d03f43ef6..3dcfc91a6f 100644
--- a/lib/internal/worker/io.js
+++ b/lib/internal/worker/io.js
@@ -48,15 +48,15 @@ const {
   kCreateEvent,
   kNewListener,
   kRemoveListener,
-} = require('internal/event_target');
-const { inspect } = require('internal/util/inspect');
+} = require('../../internal/event_target');
+const { inspect } = require('../../internal/util/inspect');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_THIS,
     ERR_MISSING_ARGS,
   }
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const kData = Symbol('kData');
 const kHandle = Symbol('kHandle');
diff --git a/lib/module.js b/lib/module.js
index b4a6dd7d18..4815cffaee 100644
--- a/lib/module.js
+++ b/lib/module.js
@@ -1,8 +1,8 @@
 'use strict';
 
-const { findSourceMap } = require('internal/source_map/source_map_cache');
-const { Module } = require('internal/modules/cjs/loader');
-const { SourceMap } = require('internal/source_map/source_map');
+const { findSourceMap } = require('./internal/source_map/source_map_cache');
+const { Module } = require('./internal/modules/cjs/loader');
+const { SourceMap } = require('./internal/source_map/source_map');
 
 Module.findSourceMap = findSourceMap;
 Module.SourceMap = SourceMap;
diff --git a/lib/net.js b/lib/net.js
index 41ff284e1e..0ff3df0e00 100644
--- a/lib/net.js
+++ b/lib/net.js
@@ -36,7 +36,7 @@ const {
 
 const EventEmitter = require('events');
 const stream = require('stream');
-let debug = require('internal/util/debuglog').debuglog('net', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('net', (fn) => {
   debug = fn;
 });
 const {
@@ -45,8 +45,8 @@ const {
   isIPv6,
   normalizedArgsSymbol,
   makeSyncWrite
-} = require('internal/net');
-const assert = require('internal/assert');
+} = require('./internal/net');
+const assert = require('./internal/assert');
 const {
   UV_EADDRINUSE,
   UV_EINVAL,
@@ -70,7 +70,7 @@ const {
   newAsyncId,
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol, owner_symbol }
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const {
   writevGeneric,
   writeGeneric,
@@ -82,7 +82,7 @@ const {
   kBuffer,
   kBufferCb,
   kBufferGen
-} = require('internal/stream_base_commons');
+} = require('./internal/stream_base_commons');
 const {
   codes: {
     ERR_INVALID_ADDRESS_FAMILY,
@@ -98,8 +98,8 @@ const {
   errnoException,
   exceptionWithHostPort,
   uvExceptionWithHostPort
-} = require('internal/errors');
-const { isUint8Array } = require('internal/util/types');
+} = require('./internal/errors');
+const { isUint8Array } = require('./internal/util/types');
 const {
   validateAbortSignal,
   validateFunction,
@@ -107,12 +107,12 @@ const {
   validateNumber,
   validatePort,
   validateString
-} = require('internal/validators');
+} = require('./internal/validators');
 const kLastWriteQueueSize = Symbol('lastWriteQueueSize');
 const {
   DTRACE_NET_SERVER_CONNECTION,
   DTRACE_NET_STREAM_END
-} = require('internal/dtrace');
+} = require('./internal/dtrace');
 
 // Lazy loaded to improve startup performance.
 let cluster;
@@ -121,7 +121,7 @@ let BlockList;
 let SocketAddress;
 
 const { clearTimeout } = require('timers');
-const { kTimeout } = require('internal/timers');
+const { kTimeout } = require('./internal/timers');
 
 const DEFAULT_IPV4_ADDR = '0.0.0.0';
 const DEFAULT_IPV6_ADDR = '::';
@@ -1777,11 +1777,11 @@ module.exports = {
   _normalizeArgs: normalizeArgs,
   _setSimultaneousAccepts,
   get BlockList() {
-    BlockList ??= require('internal/blocklist').BlockList;
+    BlockList ??= require('./internal/blocklist').BlockList;
     return BlockList;
   },
   get SocketAddress() {
-    SocketAddress ??= require('internal/socketaddress').SocketAddress;
+    SocketAddress ??= require('./internal/socketaddress').SocketAddress;
     return SocketAddress;
   },
   connect,
diff --git a/lib/os.js b/lib/os.js
index f0f0fdb15f..108633aede 100644
--- a/lib/os.js
+++ b/lib/os.js
@@ -41,8 +41,8 @@ const {
     ERR_SYSTEM_ERROR
   },
   hideStackFrames
-} = require('internal/errors');
-const { validateInt32 } = require('internal/validators');
+} = require('./internal/errors');
+const { validateInt32 } = require('./internal/validators');
 
 const {
   getCPUs,
diff --git a/lib/path.js b/lib/path.js
index 21bed936ca..0b0b82576e 100644
--- a/lib/path.js
+++ b/lib/path.js
@@ -41,11 +41,11 @@ const {
   CHAR_BACKWARD_SLASH,
   CHAR_COLON,
   CHAR_QUESTION_MARK,
-} = require('internal/constants');
+} = require('./internal/constants');
 const {
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const platformIsWin32 = (process.platform === 'win32');
 
diff --git a/lib/perf_hooks.js b/lib/perf_hooks.js
index 74ba890f53..71756d98f0 100644
--- a/lib/perf_hooks.js
+++ b/lib/perf_hooks.js
@@ -8,22 +8,22 @@ const {
   constants,
 } = internalBinding('performance');
 
-const { PerformanceEntry } = require('internal/perf/performance_entry');
+const { PerformanceEntry } = require('./internal/perf/performance_entry');
 const {
   PerformanceObserver,
   PerformanceObserverEntryList,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 const {
   PerformanceMark,
   PerformanceMeasure,
-} = require('internal/perf/usertiming');
-const { InternalPerformance } = require('internal/perf/performance');
+} = require('./internal/perf/usertiming');
+const { InternalPerformance } = require('./internal/perf/performance');
 
 const {
   createHistogram
-} = require('internal/histogram');
+} = require('./internal/histogram');
 
-const monitorEventLoopDelay = require('internal/perf/event_loop_delay');
+const monitorEventLoopDelay = require('./internal/perf/event_loop_delay');
 
 module.exports = {
   PerformanceEntry,
diff --git a/lib/punycode.js b/lib/punycode.js
index 3483fd667b..db8613c7ab 100644
--- a/lib/punycode.js
+++ b/lib/punycode.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 if (getOptionValue('--pending-deprecation')){
 	process.emitWarning(
 		'The `punycode` module is deprecated. Please use a userland ' +
diff --git a/lib/querystring.js b/lib/querystring.js
index 5bcfa13a6a..86448d9a77 100644
--- a/lib/querystring.js
+++ b/lib/querystring.js
@@ -42,7 +42,7 @@ const {
   encodeStr,
   hexTable,
   isHexTable
-} = require('internal/querystring');
+} = require('./internal/querystring');
 const QueryString = module.exports = {
   unescapeBuffer,
   // `unescape()` is a JS global, so we need to use a different local name
diff --git a/lib/readline.js b/lib/readline.js
index 1b8b276a6d..3dce22ca3d 100644
--- a/lib/readline.js
+++ b/lib/readline.js
@@ -70,13 +70,13 @@ const {
   clearScreenDown,
   cursorTo,
   moveCursor,
-} = require('internal/readline/callbacks');
-const emitKeypressEvents = require('internal/readline/emitKeypressEvents');
+} = require('./internal/readline/callbacks');
+const emitKeypressEvents = require('./internal/readline/emitKeypressEvents');
 
 const {
   AbortError,
   codes
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   ERR_INVALID_ARG_VALUE,
@@ -86,21 +86,21 @@ const {
   validateArray,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('./internal/validators');
 const {
   inspect,
   getStringWidth,
   stripVTControlCharacters,
-} = require('internal/util/inspect');
+} = require('./internal/util/inspect');
 const EventEmitter = require('events');
 const {
   charLengthAt,
   charLengthLeft,
   commonPrefix,
   kSubstringSearch,
-} = require('internal/readline/utils');
+} = require('./internal/readline/utils');
 
-const { promisify } = require('internal/util');
+const { promisify } = require('./internal/util');
 
 const { StringDecoder } = require('string_decoder');
 
diff --git a/lib/repl.js b/lib/repl.js
index 4ee8e24d47..b634731628 100644
--- a/lib/repl.js
+++ b/lib/repl.js
@@ -103,26 +103,26 @@ const {
 const {
   makeRequireFunction,
   addBuiltinLibsToObject
-} = require('internal/modules/cjs/helpers');
+} = require('./internal/modules/cjs/helpers');
 const {
   isIdentifierStart,
   isIdentifierChar
-} = require('internal/deps/acorn/acorn/dist/acorn');
+} = require('./internal/deps/acorn/acorn/dist/acorn');
 const {
   decorateErrorStack,
   isError,
   deprecate
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('./internal/util');
+const { inspect } = require('./internal/util/inspect');
 const vm = require('vm');
 const path = require('path');
 const fs = require('fs');
 const { Interface } = require('readline');
 const {
   commonPrefix
-} = require('internal/readline/utils');
+} = require('./internal/readline/utils');
 const { Console } = require('console');
-const CJSModule = require('internal/modules/cjs/loader').Module;
+const CJSModule = require('./internal/modules/cjs/loader').Module;
 let _builtinLibs = ArrayPrototypeFilter(
   CJSModule.builtinModules,
   (e) => !StringPrototypeStartsWith(e, '_') && !StringPrototypeIncludes(e, '/')
@@ -130,7 +130,7 @@ let _builtinLibs = ArrayPrototypeFilter(
 const nodeSchemeBuiltinLibs = ArrayPrototypeMap(
   _builtinLibs, (lib) => `node:${lib}`);
 const domain = require('domain');
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
 const {
@@ -142,13 +142,13 @@ const {
   },
   isErrorStackTraceLimitWritable,
   overrideStackTrace,
-} = require('internal/errors');
-const { sendInspectorCommand } = require('internal/util/inspector');
-const { getOptionValue } = require('internal/options');
+} = require('./internal/errors');
+const { sendInspectorCommand } = require('./internal/util/inspector');
+const { getOptionValue } = require('./internal/options');
 const {
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('./internal/validators');
 const experimentalREPLAwait = getOptionValue(
   '--experimental-repl-await'
 );
@@ -160,7 +160,7 @@ const {
   kStandaloneREPL,
   setupPreview,
   setupReverseSearch,
-} = require('internal/repl/utils');
+} = require('./internal/repl/utils');
 const {
   getOwnNonIndexProperties,
   propertyFilter: {
@@ -173,11 +173,11 @@ const {
   stopSigintWatchdog
 } = internalBinding('contextify');
 
-const history = require('internal/repl/history');
+const history = require('./internal/repl/history');
 const {
   extensionFormatMap,
   legacyExtensionFormatMap,
-} = require('internal/modules/esm/get_format');
+} = require('./internal/modules/esm/get_format');
 
 let nextREPLResourceNumber = 1;
 // This prevents v8 code cache from getting confused and using a different
@@ -402,7 +402,7 @@ function REPLServer(prompt,
   }
 
   function defaultEval(code, context, file, cb) {
-    const asyncESM = require('internal/process/esm_loader');
+    const asyncESM = require('./internal/process/esm_loader');
 
     let result, script, wrappedErr;
     let err = null;
@@ -425,7 +425,7 @@ function REPLServer(prompt,
     // Shall be false in case `--no-experimental-repl-await` flag is used.
     if (experimentalREPLAwait && StringPrototypeIncludes(code, 'await')) {
       if (processTopLevelAwait === undefined) {
-        ({ processTopLevelAwait } = require('internal/repl/await'));
+        ({ processTopLevelAwait } = require('./internal/repl/await'));
       }
 
       try {
diff --git a/lib/stream.js b/lib/stream.js
index cc56b76e31..6ab4f79356 100644
--- a/lib/stream.js
+++ b/lib/stream.js
@@ -27,25 +27,25 @@ const {
 
 const {
   promisify: { custom: customPromisify },
-} = require('internal/util');
+} = require('./internal/util');
 
-const compose = require('internal/streams/compose');
-const { pipeline } = require('internal/streams/pipeline');
-const { destroyer } = require('internal/streams/destroy');
-const eos = require('internal/streams/end-of-stream');
-const internalBuffer = require('internal/buffer');
+const compose = require('./internal/streams/compose');
+const { pipeline } = require('./internal/streams/pipeline');
+const { destroyer } = require('./internal/streams/destroy');
+const eos = require('./internal/streams/end-of-stream');
+const internalBuffer = require('./internal/buffer');
 
 const promises = require('stream/promises');
 
-const Stream = module.exports = require('internal/streams/legacy').Stream;
-Stream.isDisturbed = require('internal/streams/utils').isDisturbed;
-Stream.Readable = require('internal/streams/readable');
-Stream.Writable = require('internal/streams/writable');
-Stream.Duplex = require('internal/streams/duplex');
-Stream.Transform = require('internal/streams/transform');
-Stream.PassThrough = require('internal/streams/passthrough');
+const Stream = module.exports = require('./internal/streams/legacy').Stream;
+Stream.isDisturbed = require('./internal/streams/utils').isDisturbed;
+Stream.Readable = require('./internal/streams/readable');
+Stream.Writable = require('./internal/streams/writable');
+Stream.Duplex = require('./internal/streams/duplex');
+Stream.Transform = require('./internal/streams/transform');
+Stream.PassThrough = require('./internal/streams/passthrough');
 Stream.pipeline = pipeline;
-const { addAbortSignal } = require('internal/streams/add-abort-signal');
+const { addAbortSignal } = require('./internal/streams/add-abort-signal');
 Stream.addAbortSignal = addAbortSignal;
 Stream.finished = eos;
 Stream.destroy = destroyer;
@@ -76,7 +76,7 @@ ObjectDefineProperty(eos, customPromisify, {
 // Backwards-compat with node 0.4.x
 Stream.Stream = Stream;
 
-Stream._isUint8Array = require('internal/util/types').isUint8Array;
+Stream._isUint8Array = require('./internal/util/types').isUint8Array;
 Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
   return new internalBuffer.FastBuffer(chunk.buffer,
                                        chunk.byteOffset,
diff --git a/lib/stream/consumers.js b/lib/stream/consumers.js
index 4566eff6a3..e720d77ae6 100644
--- a/lib/stream/consumers.js
+++ b/lib/stream/consumers.js
@@ -6,11 +6,11 @@ const {
 
 const {
   TextDecoder,
-} = require('internal/encoding');
+} = require('../internal/encoding');
 
 const {
   Blob,
-} = require('internal/blob');
+} = require('../internal/blob');
 
 const {
   Buffer,
diff --git a/lib/stream/promises.js b/lib/stream/promises.js
index 0db01a8b20..f0d8df8001 100644
--- a/lib/stream/promises.js
+++ b/lib/stream/promises.js
@@ -8,10 +8,10 @@ const {
 const {
   isIterable,
   isNodeStream,
-} = require('internal/streams/utils');
+} = require('../internal/streams/utils');
 
-const { pipelineImpl: pl } = require('internal/streams/pipeline');
-const eos = require('internal/streams/end-of-stream');
+const { pipelineImpl: pl } = require('../internal/streams/pipeline');
+const eos = require('../internal/streams/end-of-stream');
 
 function pipeline(...streams) {
   return new Promise((resolve, reject) => {
diff --git a/lib/stream/web.js b/lib/stream/web.js
index 06b320f001..5e53c10538 100644
--- a/lib/stream/web.js
+++ b/lib/stream/web.js
@@ -2,20 +2,20 @@
 
 const {
   emitExperimentalWarning,
-} = require('internal/util');
+} = require('../internal/util');
 
 emitExperimentalWarning('stream/web');
 
 const {
   TransformStream,
   TransformStreamDefaultController,
-} = require('internal/webstreams/transformstream');
+} = require('../internal/webstreams/transformstream');
 
 const {
   WritableStream,
   WritableStreamDefaultController,
   WritableStreamDefaultWriter,
-} = require('internal/webstreams/writablestream');
+} = require('../internal/webstreams/writablestream');
 
 const {
   ReadableStream,
@@ -24,17 +24,17 @@ const {
   ReadableStreamBYOBRequest,
   ReadableByteStreamController,
   ReadableStreamDefaultController,
-} = require('internal/webstreams/readablestream');
+} = require('../internal/webstreams/readablestream');
 
 const {
   ByteLengthQueuingStrategy,
   CountQueuingStrategy,
-} = require('internal/webstreams/queuingstrategies');
+} = require('../internal/webstreams/queuingstrategies');
 
 const {
   TextEncoderStream,
   TextDecoderStream,
-} = require('internal/webstreams/encoding');
+} = require('../internal/webstreams/encoding');
 
 module.exports = {
   ReadableStream,
diff --git a/lib/string_decoder.js b/lib/string_decoder.js
index 2891e0a1d1..796399a25b 100644
--- a/lib/string_decoder.js
+++ b/lib/string_decoder.js
@@ -40,11 +40,11 @@ const {
   flush,
   encodings
 } = internalBinding('string_decoder');
-const internalUtil = require('internal/util');
+const internalUtil = require('./internal/util');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_UNKNOWN_ENCODING
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const isEncoding = Buffer[internalUtil.kIsEncodingSymbol];
 
 const kNativeDecoder = Symbol('kNativeDecoder');
diff --git a/lib/timers.js b/lib/timers.js
index a4543fea1d..a4b637f276 100644
--- a/lib/timers.js
+++ b/lib/timers.js
@@ -32,7 +32,7 @@ const {
   immediateInfo,
   toggleImmediateRef
 } = internalBinding('timers');
-const L = require('internal/linkedlist');
+const L = require('./internal/linkedlist');
 const {
   async_id_symbol,
   Timeout,
@@ -51,15 +51,15 @@ const {
   active,
   unrefActive,
   insert
-} = require('internal/timers');
+} = require('./internal/timers');
 const {
   promisify: { custom: customPromisify },
   deprecate
-} = require('internal/util');
-let debug = require('internal/util/debuglog').debuglog('timer', (fn) => {
+} = require('./internal/util');
+let debug = require('./internal/util/debuglog').debuglog('timer', (fn) => {
   debug = fn;
 });
-const { validateCallback } = require('internal/validators');
+const { validateCallback } = require('./internal/validators');
 
 let timersPromises;
 
@@ -67,7 +67,7 @@ const {
   destroyHooksExist,
   // The needed emit*() functions.
   emitDestroy
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 
 // This stores all the known timer async ids to allow users to clearTimeout and
 // clearInterval using those ids, to match the spec and the rest of the web
diff --git a/lib/timers/promises.js b/lib/timers/promises.js
index 162f465da2..52209b6a61 100644
--- a/lib/timers/promises.js
+++ b/lib/timers/promises.js
@@ -11,18 +11,18 @@ const {
   Timeout,
   Immediate,
   insert
-} = require('internal/timers');
+} = require('../internal/timers');
 
 const {
   AbortError,
   codes: { ERR_INVALID_ARG_TYPE }
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateAbortSignal,
   validateBoolean,
   validateObject,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 function cancelListenerHandler(clear, reject) {
   if (!this._destroyed) {
diff --git a/lib/tls.js b/lib/tls.js
index 683736460b..029235e9b2 100644
--- a/lib/tls.js
+++ b/lib/tls.js
@@ -46,21 +46,21 @@ const {
 const {
   ERR_TLS_CERT_ALTNAME_INVALID,
   ERR_OUT_OF_RANGE
-} = require('internal/errors').codes;
-const internalUtil = require('internal/util');
+} = require('./internal/errors').codes;
+const internalUtil = require('./internal/util');
 internalUtil.assertCrypto();
-const { isArrayBufferView } = require('internal/util/types');
+const { isArrayBufferView } = require('./internal/util/types');
 
 const net = require('net');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const { getRootCertificates, getSSLCiphers } = internalBinding('crypto');
 const { Buffer } = require('buffer');
-const { URL } = require('internal/url');
+const { URL } = require('./internal/url');
 const { canonicalizeIP } = internalBinding('cares_wrap');
 const _tls_common = require('_tls_common');
 const _tls_wrap = require('_tls_wrap');
-const { createSecurePair } = require('internal/tls/secure-pair');
-const { parseCertString } = require('internal/tls/parse-cert-string');
+const { createSecurePair } = require('./internal/tls/secure-pair');
+const { parseCertString } = require('./internal/tls/parse-cert-string');
 
 // Allow {CLIENT_RENEG_LIMIT} client-initiated session renegotiations
 // every {CLIENT_RENEG_WINDOW} seconds. An error event is emitted if more
diff --git a/lib/trace_events.js b/lib/trace_events.js
index 5211f8b0b1..8b10a89012 100644
--- a/lib/trace_events.js
+++ b/lib/trace_events.js
@@ -18,18 +18,18 @@ const {
   ERR_TRACE_EVENTS_CATEGORY_REQUIRED,
   ERR_TRACE_EVENTS_UNAVAILABLE,
   ERR_INVALID_ARG_TYPE
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 
-const { ownsProcessState } = require('internal/worker');
+const { ownsProcessState } = require('./internal/worker');
 if (!hasTracing || !ownsProcessState)
   throw new ERR_TRACE_EVENTS_UNAVAILABLE();
 
 const { CategorySet, getEnabledCategories } = internalBinding('trace_events');
-const { customInspectSymbol } = require('internal/util');
-const { format } = require('internal/util/inspect');
+const { customInspectSymbol } = require('./internal/util');
+const { format } = require('./internal/util/inspect');
 const {
   validateObject,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const enabledTracingObjects = new SafeSet();
 
diff --git a/lib/tty.js b/lib/tty.js
index e61a5c3ac3..76c5032087 100644
--- a/lib/tty.js
+++ b/lib/tty.js
@@ -29,12 +29,12 @@ const {
 
 const net = require('net');
 const { TTY, isTTY } = internalBinding('tty_wrap');
-const errors = require('internal/errors');
+const errors = require('./internal/errors');
 const { ERR_INVALID_FD, ERR_TTY_INIT_FAILED } = errors.codes;
 const {
   getColorDepth,
   hasColors
-} = require('internal/tty');
+} = require('./internal/tty');
 
 // Lazy loaded for startup performance.
 let readline;
diff --git a/lib/url.js b/lib/url.js
index e3071a3a56..cedaeb1f6f 100644
--- a/lib/url.js
+++ b/lib/url.js
@@ -30,18 +30,18 @@ const {
   decodeURIComponent,
 } = primordials;
 
-const { toASCII } = require('internal/idna');
-const { encodeStr, hexTable } = require('internal/querystring');
+const { toASCII } = require('./internal/idna');
+const { encodeStr, hexTable } = require('./internal/querystring');
 const querystring = require('querystring');
 
 const {
   ERR_INVALID_ARG_TYPE
-} = require('internal/errors').codes;
-const { validateString } = require('internal/validators');
+} = require('./internal/errors').codes;
+const { validateString } = require('./internal/validators');
 
 // This ensures setURLConstructor() is called before the native
 // URL::ToObject() method is used.
-const { spliceOne } = require('internal/util');
+const { spliceOne } = require('./internal/util');
 
 // WHATWG URL implementation provided by internal/url
 const {
@@ -53,7 +53,7 @@ const {
   formatSymbol,
   pathToFileURL,
   urlToHttpOptions,
-} = require('internal/url');
+} = require('./internal/url');
 
 // Original url.parse() API
 
@@ -147,7 +147,7 @@ const {
   CHAR_GRAVE_ACCENT,
   CHAR_VERTICAL_LINE,
   CHAR_AT,
-} = require('internal/constants');
+} = require('./internal/constants');
 
 function urlParse(url, parseQueryString, slashesDenoteHost) {
   if (url instanceof Url) return url;
diff --git a/lib/util.js b/lib/util.js
index fbd8c55031..0b031d65a7 100644
--- a/lib/util.js
+++ b/lib/util.js
@@ -53,21 +53,21 @@ const {
   errnoException,
   exceptionWithHostPort,
   hideStackFrames
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   format,
   formatWithOptions,
   inspect,
   stripVTControlCharacters,
-} = require('internal/util/inspect');
-const { debuglog } = require('internal/util/debuglog');
+} = require('./internal/util/inspect');
+const { debuglog } = require('./internal/util/debuglog');
 const {
   validateFunction,
   validateNumber,
-} = require('internal/validators');
-const { TextDecoder, TextEncoder } = require('internal/encoding');
+} = require('./internal/validators');
+const { TextDecoder, TextEncoder } = require('./internal/encoding');
 const { isBuffer } = require('buffer').Buffer;
-const types = require('internal/util/types');
+const types = require('./internal/util/types');
 
 const {
   deprecate,
@@ -75,7 +75,7 @@ const {
   getSystemErrorName: internalErrorName,
   promisify,
   toUSVString,
-} = require('internal/util');
+} = require('./internal/util');
 
 let internalDeepEqual;
 
@@ -210,7 +210,7 @@ let console;
  */
 function log(...args) {
   if (!console) {
-    console = require('internal/console/global');
+    console = require('./internal/console/global');
   }
   console.log('%s - %s', timestamp(), format(...args));
 }
@@ -351,7 +351,7 @@ module.exports = {
   isBuffer,
   isDeepStrictEqual(a, b) {
     if (internalDeepEqual === undefined) {
-      internalDeepEqual = require('internal/util/comparisons')
+      internalDeepEqual = require('./internal/util/comparisons')
         .isDeepStrictEqual;
     }
     return internalDeepEqual(a, b);
diff --git a/lib/util/types.js b/lib/util/types.js
index a48a552d6d..484de44987 100644
--- a/lib/util/types.js
+++ b/lib/util/types.js
@@ -1,3 +1,3 @@
 'use strict';
 
-module.exports = require('internal/util/types');
+module.exports = require('../internal/util/types');
diff --git a/lib/v8.js b/lib/v8.js
index a7ae0cabbb..bb2879c66e 100644
--- a/lib/v8.js
+++ b/lib/v8.js
@@ -35,7 +35,7 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { validateString } = require('internal/validators');
+const { validateString } = require('./internal/validators');
 const {
   Serializer,
   Deserializer
@@ -46,17 +46,17 @@ if (internalBinding('config').hasInspector) {
   profiler = internalBinding('profiler');
 }
 
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const { copy } = internalBinding('buffer');
-const { inspect } = require('internal/util/inspect');
-const { FastBuffer } = require('internal/buffer');
-const { getValidatedPath } = require('internal/fs/utils');
+const { inspect } = require('./internal/util/inspect');
+const { FastBuffer } = require('./internal/buffer');
+const { getValidatedPath } = require('./internal/fs/utils');
 const { toNamespacedPath } = require('path');
 const {
   createHeapSnapshotStream,
   triggerHeapSnapshot
 } = internalBinding('heap_utils');
-const { HeapSnapshotStream } = require('internal/heap_utils');
+const { HeapSnapshotStream } = require('./internal/heap_utils');
 
 /**
  * Generates a snapshot of the current V8 heap
diff --git a/lib/vm.js b/lib/vm.js
index 92afa9f696..fba858141a 100644
--- a/lib/vm.js
+++ b/lib/vm.js
@@ -41,10 +41,10 @@ const {
 const {
   ERR_CONTEXT_NOT_INITIALIZED,
   ERR_INVALID_ARG_TYPE,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('./internal/util/types');
 const {
   validateArray,
   validateBoolean,
@@ -55,11 +55,11 @@ const {
   validateOneOf,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('./internal/validators');
 const {
   kVmBreakFirstLineSymbol,
   emitExperimentalWarning,
-} = require('internal/util');
+} = require('./internal/util');
 const kParsingContext = Symbol('script parsing context');
 
 class Script extends ContextifyScript {
@@ -112,7 +112,7 @@ class Script extends ContextifyScript {
       validateFunction(importModuleDynamically,
                        'options.importModuleDynamically');
       const { importModuleDynamicallyWrap } =
-        require('internal/vm/module');
+        require('./internal/vm/module');
       const { callbackMap } = internalBinding('module_wrap');
       callbackMap.set(this, {
         importModuleDynamically:
@@ -373,7 +373,7 @@ function compileFunction(code, params, options = {}) {
     validateFunction(importModuleDynamically,
                      'options.importModuleDynamically');
     const { importModuleDynamicallyWrap } =
-      require('internal/vm/module');
+      require('./internal/vm/module');
     const { callbackMap } = internalBinding('module_wrap');
     const wrapped = importModuleDynamicallyWrap(importModuleDynamically);
     const func = result.function;
diff --git a/lib/wasi.js b/lib/wasi.js
index 43ecf94b4c..bb29486812 100644
--- a/lib/wasi.js
+++ b/lib/wasi.js
@@ -12,9 +12,9 @@ const {
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_WASI_ALREADY_STARTED
-} = require('internal/errors').codes;
-const { emitExperimentalWarning } = require('internal/util');
-const { isArrayBuffer } = require('internal/util/types');
+} = require('./internal/errors').codes;
+const { emitExperimentalWarning } = require('./internal/util');
+const { isArrayBuffer } = require('./internal/util/types');
 const {
   validateArray,
   validateBoolean,
@@ -22,7 +22,7 @@ const {
   validateInt32,
   validateObject,
   validateUndefined,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { WASI: _WASI } = internalBinding('wasi');
 const kExitCode = Symbol('kExitCode');
 const kSetMemory = Symbol('kSetMemory');
diff --git a/lib/worker_threads.js b/lib/worker_threads.js
index 9d702fa288..955c8b82b6 100644
--- a/lib/worker_threads.js
+++ b/lib/worker_threads.js
@@ -8,7 +8,7 @@ const {
   getEnvironmentData,
   threadId,
   Worker
-} = require('internal/worker');
+} = require('./internal/worker');
 
 const {
   MessagePort,
@@ -16,11 +16,11 @@ const {
   moveMessagePortToContext,
   receiveMessageOnPort,
   BroadcastChannel,
-} = require('internal/worker/io');
+} = require('./internal/worker/io');
 
 const {
   markAsUntransferable,
-} = require('internal/buffer');
+} = require('./internal/buffer');
 
 module.exports = {
   isMainThread,
diff --git a/lib/zlib.js b/lib/zlib.js
index 35e16534fb..0a006077be 100644
--- a/lib/zlib.js
+++ b/lib/zlib.js
@@ -52,27 +52,27 @@ const {
     ERR_ZLIB_INITIALIZATION_FAILED,
   },
   hideStackFrames
-} = require('internal/errors');
+} = require('./internal/errors');
 const { Transform, finished } = require('stream');
 const {
   deprecate
-} = require('internal/util');
+} = require('./internal/util');
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
   isUint8Array,
-} = require('internal/util/types');
+} = require('./internal/util/types');
 const binding = internalBinding('zlib');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const {
   Buffer,
   kMaxLength
 } = require('buffer');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+const { owner_symbol } = require('./internal/async_hooks').symbols;
 const {
   validateFunction,
   validateNumber,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kFlushFlag = Symbol('kFlushFlag');
 const kError = Symbol('kError');
