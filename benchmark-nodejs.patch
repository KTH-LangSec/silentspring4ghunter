diff --git a/lib/_http_agent.js b/lib/_http_agent.js
index e23409f2ee..e0d230d674 100644
--- a/lib/_http_agent.js
+++ b/lib/_http_agent.js
@@ -44,20 +44,20 @@ const {
 
 const net = require('net');
 const EventEmitter = require('events');
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 const { AsyncResource } = require('async_hooks');
-const { async_id_symbol } = require('internal/async_hooks').symbols;
+const { async_id_symbol } = require('./internal/async_hooks').symbols;
 const {
   kEmptyObject,
   once,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   validateNumber,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kOnKeylog = Symbol('onkeylog');
 const kRequestOptions = Symbol('requestOptions');
diff --git a/lib/_http_client.js b/lib/_http_client.js
index 9fd07e1676..9ba7a00893 100644
--- a/lib/_http_client.js
+++ b/lib/_http_client.js
@@ -42,11 +42,11 @@ const {
 } = primordials;
 
 const net = require('net');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const {
   kEmptyObject,
   once,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   _checkIsHttpToken: checkIsHttpToken,
   freeParser,
@@ -62,8 +62,8 @@ const {
 } = require('_http_outgoing');
 const Agent = require('_http_agent');
 const { Buffer } = require('buffer');
-const { defaultTriggerAsyncIdScope } = require('internal/async_hooks');
-const { URL, urlToHttpOptions, isURL } = require('internal/url');
+const { defaultTriggerAsyncIdScope } = require('./internal/async_hooks');
+const { URL, urlToHttpOptions, isURL } = require('./internal/url');
 const {
   kOutHeaders,
   kNeedDrain,
@@ -71,8 +71,8 @@ const {
   traceBegin,
   traceEnd,
   getNextTraceEventId,
-} = require('internal/http');
-const { connResetException, codes } = require('internal/errors');
+} = require('./internal/http');
+const { connResetException, codes } = require('./internal/errors');
 const {
   ERR_HTTP_HEADERS_SENT,
   ERR_INVALID_ARG_TYPE,
@@ -83,13 +83,13 @@ const {
 const {
   validateInteger,
   validateBoolean,
-} = require('internal/validators');
-const { getTimerDuration } = require('internal/timers');
+} = require('./internal/validators');
+const { getTimerDuration } = require('./internal/timers');
 const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 
 const kClientRequestStatistics = Symbol('ClientRequestStatistics');
 
@@ -99,7 +99,7 @@ const onClientResponseFinishChannel = dc.channel('http.client.response.finish');
 
 const { addAbortSignal, finished } = require('stream');
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/_http_common.js b/lib/_http_common.js
index 2c7866d350..c90916f3fb 100644
--- a/lib/_http_common.js
+++ b/lib/_http_common.js
@@ -29,10 +29,10 @@ const {
 const { setImmediate } = require('timers');
 
 const { methods, HTTPParser } = internalBinding('http_parser');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const insecureHTTPParser = getOptionValue('--insecure-http-parser');
 
-const FreeList = require('internal/freelist');
+const FreeList = require('./internal/freelist');
 const incoming = require('_http_incoming');
 const {
   IncomingMessage,
diff --git a/lib/_http_outgoing.js b/lib/_http_outgoing.js
index 64e0d4ab71..e56e335954 100644
--- a/lib/_http_outgoing.js
+++ b/lib/_http_outgoing.js
@@ -38,12 +38,12 @@ const {
   Symbol,
 } = primordials;
 
-const { getDefaultHighWaterMark } = require('internal/streams/state');
-const assert = require('internal/assert');
+const { getDefaultHighWaterMark } = require('./internal/streams/state');
+const assert = require('./internal/assert');
 const EE = require('events');
 const Stream = require('stream');
-const internalUtil = require('internal/util');
-const { kOutHeaders, utcDate, kNeedDrain } = require('internal/http');
+const internalUtil = require('./internal/util');
+const { kOutHeaders, utcDate, kNeedDrain } = require('./internal/http');
 const { Buffer } = require('buffer');
 const {
   _checkIsHttpToken: checkIsHttpToken,
@@ -53,7 +53,7 @@ const {
 const {
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol },
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const {
   codes: {
     ERR_HTTP_CONTENT_LENGTH_MISMATCH,
@@ -73,11 +73,11 @@ const {
     ERR_STREAM_DESTROYED,
   },
   hideStackFrames,
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
-const { isUint8Array } = require('internal/util/types');
+} = require('./internal/errors');
+const { validateString } = require('./internal/validators');
+const { isUint8Array } = require('./internal/util/types');
 
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/_http_server.js b/lib/_http_server.js
index c62ea17599..6e9127bea0 100644
--- a/lib/_http_server.js
+++ b/lib/_http_server.js
@@ -37,7 +37,7 @@ const {
 
 const net = require('net');
 const EE = require('events');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const {
   parsers,
   freeParser,
@@ -62,16 +62,16 @@ const {
   traceBegin,
   traceEnd,
   getNextTraceEventId,
-} = require('internal/http');
+} = require('./internal/http');
 const {
   defaultTriggerAsyncIdScope,
   getOrSetAsyncId,
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const { IncomingMessage } = require('_http_incoming');
 const {
   connResetException,
   codes,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   ERR_HTTP_REQUEST_TIMEOUT,
   ERR_HTTP_HEADERS_SENT,
@@ -84,16 +84,16 @@ const {
 const {
   kEmptyObject,
   promisify,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   validateInteger,
   validateBoolean,
   validateLinkHeaderValue,
   validateObject,
-} = require('internal/validators');
+} = require('./internal/validators');
 const Buffer = require('buffer').Buffer;
 const { setInterval, clearInterval } = require('timers');
-let debug = require('internal/util/debuglog').debuglog('http', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('http', (fn) => {
   debug = fn;
 });
 
@@ -108,7 +108,7 @@ const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 
 const STATUS_CODES = {
   100: 'Continue',                   // RFC 7231 6.2.1
diff --git a/lib/_stream_wrap.js b/lib/_stream_wrap.js
index 904128a382..a8a2c5882f 100644
--- a/lib/_stream_wrap.js
+++ b/lib/_stream_wrap.js
@@ -1,5 +1,5 @@
 'use strict';
 
-module.exports = require('internal/js_stream_socket');
+module.exports = require('./internal/js_stream_socket');
 process.emitWarning('The _stream_wrap module is deprecated.',
                     'DeprecationWarning', 'DEP0125');
diff --git a/lib/_tls_common.js b/lib/_tls_common.js
index 16c6a647cc..793c653996 100644
--- a/lib/_tls_common.js
+++ b/lib/_tls_common.js
@@ -34,7 +34,7 @@ const {
     ERR_TLS_INVALID_PROTOCOL_VERSION,
     ERR_TLS_PROTOCOL_VERSION_CONFLICT,
   },
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   crypto: {
@@ -48,15 +48,15 @@ const {
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('./internal/util');
 
 const {
   validateInteger,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const {
   configSecureContext,
-} = require('internal/tls/secure-context');
+} = require('./internal/tls/secure-context');
 
 function toV(which, v, def) {
   if (v == null) v = def;
diff --git a/lib/_tls_wrap.js b/lib/_tls_wrap.js
index 4810871093..ec7048836a 100644
--- a/lib/_tls_wrap.js
+++ b/lib/_tls_wrap.js
@@ -43,30 +43,30 @@ const {
   assertCrypto,
   deprecate,
   kEmptyObject,
-} = require('internal/util');
+} = require('./internal/util');
 
 assertCrypto();
 
 const { setImmediate } = require('timers');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const crypto = require('crypto');
 const EE = require('events');
 const net = require('net');
 const tls = require('tls');
 const common = require('_tls_common');
-const { kReinitializeHandle } = require('internal/net');
-const JSStreamSocket = require('internal/js_stream_socket');
+const { kReinitializeHandle } = require('./internal/net');
+const JSStreamSocket = require('./internal/js_stream_socket');
 const { Buffer } = require('buffer');
-let debug = require('internal/util/debuglog').debuglog('tls', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('tls', (fn) => {
   debug = fn;
 });
 const { TCP, constants: TCPConstants } = internalBinding('tcp_wrap');
 const tls_wrap = internalBinding('tls_wrap');
 const { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { isArrayBufferView } = require('internal/util/types');
+const { owner_symbol } = require('./internal/async_hooks').symbols;
+const { isArrayBufferView } = require('./internal/util/types');
 const { SecureContext: NativeSecureContext } = internalBinding('crypto');
-const { connResetException, codes } = require('internal/errors');
+const { connResetException, codes } = require('./internal/errors');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
@@ -87,7 +87,7 @@ const { onpskexchange: kOnPskExchange } = internalBinding('symbols');
 const {
   getOptionValue,
   getAllowUnauthorized,
-} = require('internal/options');
+} = require('./internal/options');
 const {
   validateBoolean,
   validateBuffer,
@@ -97,10 +97,10 @@ const {
   validateObject,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('./internal/validators');
 const {
   InternalX509Certificate,
-} = require('internal/crypto/x509');
+} = require('./internal/crypto/x509');
 const traceTls = getOptionValue('--trace-tls');
 const tlsKeylog = getOptionValue('--tls-keylog');
 const { appendFile } = require('fs');
diff --git a/lib/assert.js b/lib/assert.js
index b7d7a3da01..03e82a0aab 100644
--- a/lib/assert.js
+++ b/lib/assert.js
@@ -59,20 +59,20 @@ const {
   },
   isErrorStackTraceLimitWritable,
   overrideStackTrace,
-} = require('internal/errors');
-const AssertionError = require('internal/assert/assertion_error');
+} = require('./internal/errors');
+const AssertionError = require('./internal/assert/assertion_error');
 const { openSync, closeSync, readSync } = require('fs');
-const { inspect } = require('internal/util/inspect');
-const { isPromise, isRegExp } = require('internal/util/types');
-const { EOL } = require('internal/constants');
-const { BuiltinModule } = require('internal/bootstrap/realm');
-const { isError, deprecate } = require('internal/util');
+const { inspect } = require('./internal/util/inspect');
+const { isPromise, isRegExp } = require('./internal/util/types');
+const { EOL } = require('./internal/constants');
+const { BuiltinModule } = require('./internal/bootstrap/realm');
+const { isError, deprecate } = require('./internal/util');
 
 const errorCache = new SafeMap();
-const CallTracker = require('internal/assert/calltracker');
+const CallTracker = require('./internal/assert/calltracker');
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 let isDeepEqual;
 let isDeepStrictEqual;
@@ -82,7 +82,7 @@ let tokenizer;
 let decoder;
 
 function lazyLoadComparison() {
-  const comparison = require('internal/util/comparisons');
+  const comparison = require('./internal/util/comparisons');
   isDeepEqual = comparison.isDeepEqual;
   isDeepStrictEqual = comparison.isDeepStrictEqual;
 }
@@ -244,8 +244,8 @@ function getCode(fd, line, column) {
 function parseCode(code, offset) {
   // Lazy load acorn.
   if (parseExpressionAt === undefined) {
-    const Parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
-    ({ findNodeAround } = require('internal/deps/acorn/acorn-walk/dist/walk'));
+    const Parser = require('./internal/deps/acorn/acorn/dist/acorn').Parser;
+    ({ findNodeAround } = require('./internal/deps/acorn/acorn-walk/dist/walk'));
 
     parseExpressionAt = FunctionPrototypeBind(Parser.parseExpressionAt, Parser);
     tokenizer = FunctionPrototypeBind(Parser.tokenizer, Parser);
diff --git a/lib/async_hooks.js b/lib/async_hooks.js
index b4dd54022d..b180c42e21 100644
--- a/lib/async_hooks.js
+++ b/lib/async_hooks.js
@@ -19,16 +19,16 @@ const {
   ERR_ASYNC_CALLBACK,
   ERR_ASYNC_TYPE,
   ERR_INVALID_ASYNC_ID,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   deprecate,
   kEmptyObject,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   validateFunction,
   validateString,
-} = require('internal/validators');
-const internal_async_hooks = require('internal/async_hooks');
+} = require('./internal/validators');
+const internal_async_hooks = require('./internal/async_hooks');
 
 // Get functions
 // For userland AsyncResources, make sure to emit a destroy event when the
diff --git a/lib/buffer.js b/lib/buffer.js
index 0ff7c1920a..23d32fb33c 100644
--- a/lib/buffer.js
+++ b/lib/buffer.js
@@ -85,16 +85,16 @@ const {
   normalizeEncoding,
   kIsEncodingSymbol,
   defineLazyProperties,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
   isUint8Array,
   isTypedArray,
-} = require('internal/util/types');
+} = require('./internal/util/types');
 const {
   inspect: utilInspect,
-} = require('internal/util/inspect');
+} = require('./internal/util/inspect');
 const { encodings } = internalBinding('string_decoder');
 
 const {
@@ -109,14 +109,14 @@ const {
   },
   genericNodeError,
   hideStackFrames,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   validateArray,
   validateBuffer,
   validateInteger,
   validateNumber,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 // Provide validateInteger() but with kMaxLength as the default maximum value.
 const validateOffset = (value, name, min = 0, max = kMaxLength) =>
   validateInteger(value, name, min, max);
@@ -126,7 +126,7 @@ const {
   markAsUntransferable,
   addBufferPrototypeMethods,
   createUnsafeBuffer,
-} = require('internal/buffer');
+} = require('./internal/buffer');
 
 FastBuffer.prototype.constructor = Buffer;
 Buffer.prototype = FastBuffer.prototype;
@@ -179,7 +179,7 @@ const bufferWarning = 'Buffer() is deprecated due to security and usability ' +
 function showFlaggedDeprecation() {
   if (bufferWarningAlreadyEmitted ||
       ++nodeModulesCheckCounter > 10000 ||
-      (!require('internal/options').getOptionValue('--pending-deprecation') &&
+      (!require('./internal/options').getOptionValue('--pending-deprecation') &&
        isInsideNodeModules())) {
     // We don't emit a warning, because we either:
     // - Already did so, or
diff --git a/lib/child_process.js b/lib/child_process.js
index 449013906e..05552dc49d 100644
--- a/lib/child_process.js
+++ b/lib/child_process.js
@@ -51,9 +51,9 @@ const {
   getSystemErrorName,
   kEmptyObject,
   promisify,
-} = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
-let debug = require('internal/util/debuglog').debuglog(
+} = require('./internal/util');
+const { isArrayBufferView } = require('./internal/util/types');
+let debug = require('./internal/util/debuglog').debuglog(
   'child_process',
   (fn) => {
     debug = fn;
@@ -66,7 +66,7 @@ const {
   AbortError,
   codes: errorCodes,
   genericNodeError,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   ERR_INVALID_ARG_VALUE,
   ERR_CHILD_PROCESS_IPC_REQUIRED,
@@ -75,7 +75,7 @@ const {
   ERR_OUT_OF_RANGE,
 } = errorCodes;
 const { clearTimeout, setTimeout } = require('timers');
-const { getValidatedPath } = require('internal/fs/utils');
+const { getValidatedPath } = require('./internal/fs/utils');
 const {
   isInt32,
   validateAbortSignal,
@@ -84,8 +84,8 @@ const {
   validateFunction,
   validateObject,
   validateString,
-} = require('internal/validators');
-const child_process = require('internal/child_process');
+} = require('./internal/validators');
+const child_process = require('./internal/child_process');
 const {
   getValidStdio,
   setupChannel,
diff --git a/lib/console.js b/lib/console.js
index 85a89ecc99..e21350da7c 100644
--- a/lib/console.js
+++ b/lib/console.js
@@ -21,4 +21,4 @@
 
 'use strict';
 
-module.exports = require('internal/console/global');
+module.exports = require('./internal/console/global');
diff --git a/lib/crypto.js b/lib/crypto.js
index 41adecc97c..c2fc5e1f89 100644
--- a/lib/crypto.js
+++ b/lib/crypto.js
@@ -32,15 +32,15 @@ const {
 const {
   assertCrypto,
   deprecate,
-} = require('internal/util');
+} = require('./internal/util');
 assertCrypto();
 
 const {
   ERR_CRYPTO_FIPS_FORCED,
   ERR_WORKER_UNSUPPORTED_OPERATION,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const constants = internalBinding('constants').crypto;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const {
   getFipsCrypto,
   setFipsCrypto,
@@ -56,37 +56,37 @@ const {
   randomFillSync,
   randomInt,
   randomUUID,
-} = require('internal/crypto/random');
+} = require('./internal/crypto/random');
 const {
   pbkdf2,
   pbkdf2Sync,
-} = require('internal/crypto/pbkdf2');
+} = require('./internal/crypto/pbkdf2');
 const {
   scrypt,
   scryptSync,
-} = require('internal/crypto/scrypt');
+} = require('./internal/crypto/scrypt');
 const {
   hkdf,
   hkdfSync,
-} = require('internal/crypto/hkdf');
+} = require('./internal/crypto/hkdf');
 const {
   generateKeyPair,
   generateKeyPairSync,
   generateKey,
   generateKeySync,
-} = require('internal/crypto/keygen');
+} = require('./internal/crypto/keygen');
 const {
   createSecretKey,
   createPublicKey,
   createPrivateKey,
   KeyObject,
-} = require('internal/crypto/keys');
+} = require('./internal/crypto/keys');
 const {
   DiffieHellman,
   DiffieHellmanGroup,
   ECDH,
   diffieHellman,
-} = require('internal/crypto/diffiehellman');
+} = require('./internal/crypto/diffiehellman');
 const {
   Cipher,
   Cipheriv,
@@ -97,38 +97,38 @@ const {
   publicDecrypt,
   publicEncrypt,
   getCipherInfo,
-} = require('internal/crypto/cipher');
+} = require('./internal/crypto/cipher');
 const {
   Sign,
   signOneShot,
   Verify,
   verifyOneShot,
-} = require('internal/crypto/sig');
+} = require('./internal/crypto/sig');
 const {
   Hash,
   Hmac,
-} = require('internal/crypto/hash');
+} = require('./internal/crypto/hash');
 const {
   X509Certificate,
-} = require('internal/crypto/x509');
+} = require('./internal/crypto/x509');
 const {
   getCiphers,
   getCurves,
   getHashes,
   setEngine,
   secureHeapUsed,
-} = require('internal/crypto/util');
-const Certificate = require('internal/crypto/certificate');
+} = require('./internal/crypto/util');
+const Certificate = require('./internal/crypto/certificate');
 
 let webcrypto;
 function lazyWebCrypto() {
-  webcrypto ??= require('internal/crypto/webcrypto');
+  webcrypto ??= require('./internal/crypto/webcrypto');
   return webcrypto;
 }
 
 let ownsProcessState;
 function lazyOwnsProcessState() {
-  ownsProcessState ??= require('internal/worker').ownsProcessState;
+  ownsProcessState ??= require('./internal/worker').ownsProcessState;
   return ownsProcessState;
 }
 
diff --git a/lib/dgram.js b/lib/dgram.js
index 01b5886d72..dc081e232d 100644
--- a/lib/dgram.js
+++ b/lib/dgram.js
@@ -34,12 +34,12 @@ const {
   SymbolDispose,
 } = primordials;
 
-const errors = require('internal/errors');
+const errors = require('./internal/errors');
 const {
   kStateSymbol,
   _createSocketHandle,
   newHandle,
-} = require('internal/dgram');
+} = require('./internal/dgram');
 const {
   ERR_BUFFER_OUT_OF_BOUNDS,
   ERR_INVALID_ARG_TYPE,
@@ -58,15 +58,15 @@ const {
   validateString,
   validateNumber,
   validatePort,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { Buffer } = require('buffer');
-const { deprecate, guessHandleType, promisify } = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
+const { deprecate, guessHandleType, promisify } = require('./internal/util');
+const { isArrayBufferView } = require('./internal/util/types');
 const EventEmitter = require('events');
 const {
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol, owner_symbol },
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const { UV_UDP_REUSEADDR } = internalBinding('constants').os;
 
 const {
diff --git a/lib/diagnostics_channel.js b/lib/diagnostics_channel.js
index 10d35054f5..d758a82dd3 100644
--- a/lib/diagnostics_channel.js
+++ b/lib/diagnostics_channel.js
@@ -21,14 +21,14 @@ const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   },
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const { triggerUncaughtException } = internalBinding('errors');
 
-const { WeakReference } = require('internal/util');
+const { WeakReference } = require('./internal/util');
 
 // Can't delete when weakref count reaches 0 as it could increment again.
 // Only GC can be used as a valid time to clean up the channels map.
diff --git a/lib/dns.js b/lib/dns.js
index ca932ad05f..7d302a9e99 100644
--- a/lib/dns.js
+++ b/lib/dns.js
@@ -28,9 +28,9 @@ const {
 } = primordials;
 
 const cares = internalBinding('cares_wrap');
-const { isIP } = require('internal/net');
-const { customPromisifyArgs } = require('internal/util');
-const errors = require('internal/errors');
+const { isIP } = require('./internal/net');
+const { customPromisifyArgs } = require('./internal/util');
+const errors = require('./internal/errors');
 const {
   bindDefaultResolver,
   setDefaultResolver,
@@ -40,10 +40,10 @@ const {
   getDefaultResultOrder,
   setDefaultResultOrder,
   errorCodes: dnsErrorCodes,
-} = require('internal/dns/utils');
+} = require('./internal/dns/utils');
 const {
   Resolver,
-} = require('internal/dns/callback_resolver');
+} = require('./internal/dns/callback_resolver');
 const {
   NODATA,
   FORMERR,
@@ -82,7 +82,7 @@ const {
   validateOneOf,
   validatePort,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const {
   GetAddrInfoReqWrap,
@@ -96,7 +96,7 @@ const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 
 const dnsException = errors.dnsException;
 
@@ -350,7 +350,7 @@ ObjectDefineProperties(module.exports, {
     enumerable: true,
     get() {
       if (promises === null) {
-        promises = require('internal/dns/promises');
+        promises = require('./internal/dns/promises');
       }
       return promises;
     },
diff --git a/lib/dns/promises.js b/lib/dns/promises.js
index 35881e5bb4..60f207b6ac 100644
--- a/lib/dns/promises.js
+++ b/lib/dns/promises.js
@@ -1,3 +1,3 @@
 'use strict';
 
-module.exports = require('internal/dns/promises');
+module.exports = require('../internal/dns/promises');
diff --git a/lib/domain.js b/lib/domain.js
index 7da672a369..3a84fca0c2 100644
--- a/lib/domain.js
+++ b/lib/domain.js
@@ -48,12 +48,12 @@ const {
   ERR_DOMAIN_CALLBACK_NOT_AVAILABLE,
   ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE,
   ERR_UNHANDLED_ERROR,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const { createHook } = require('async_hooks');
-const { useDomainTrampoline } = require('internal/async_hooks');
+const { useDomainTrampoline } = require('./internal/async_hooks');
 
 const kWeak = Symbol('kWeak');
-const { WeakReference } = require('internal/util');
+const { WeakReference } = require('./internal/util');
 
 // Overwrite process.domain with a getter/setter that will allow for more
 // effective optimizations
diff --git a/lib/events.js b/lib/events.js
index a1837cc1a9..f870bf8aa8 100644
--- a/lib/events.js
+++ b/lib/events.js
@@ -52,12 +52,12 @@ const {
 } = primordials;
 const kRejection = SymbolFor('nodejs.rejection');
 
-const { kEmptyObject } = require('internal/util');
+const { kEmptyObject } = require('./internal/util');
 
 const {
   inspect,
   identicalSequenceRange,
-} = require('internal/util/inspect');
+} = require('./internal/util/inspect');
 
 let spliceOne;
 let FixedQueue;
@@ -73,7 +73,7 @@ const {
     ERR_UNHANDLED_ERROR,
   },
   genericNodeError,
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   validateInteger,
@@ -83,7 +83,7 @@ const {
   validateNumber,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kCapture = Symbol('kCapture');
 const kErrorMonitor = Symbol('events.errorMonitor');
@@ -317,7 +317,7 @@ EventEmitter.setMaxListeners =
       defaultMaxListeners = n;
     } else {
       if (isEventTarget === undefined)
-        isEventTarget = require('internal/event_target').isEventTarget;
+        isEventTarget = require('./internal/event_target').isEventTarget;
 
       for (let i = 0; i < eventTargets.length; i++) {
         const target = eventTargets[i];
@@ -710,7 +710,7 @@ EventEmitter.prototype.removeListener =
           list.shift();
         else {
           if (spliceOne === undefined)
-            spliceOne = require('internal/util').spliceOne;
+            spliceOne = require('./internal/util').spliceOne;
           spliceOne(list, position);
         }
 
@@ -917,7 +917,7 @@ function getEventListeners(emitterOrTarget, type) {
     return emitterOrTarget.listeners(type);
   }
   // Require event target lazily to avoid always loading it
-  const { isEventTarget, kEvents } = require('internal/event_target');
+  const { isEventTarget, kEvents } = require('./internal/event_target');
   if (isEventTarget(emitterOrTarget)) {
     const root = emitterOrTarget[kEvents].get(type);
     const listeners = [];
@@ -984,7 +984,7 @@ async function once(emitter, name, options = kEmptyObject) {
       resolve(args);
     };
 
-    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+    kResistStopPropagation ??= require('./internal/event_target').kResistStopPropagation;
     const opts = { __proto__: null, once: true, [kResistStopPropagation]: true };
     eventTargetAgnosticAddListener(emitter, name, resolver, opts);
     if (name !== 'error' && typeof emitter.once === 'function') {
@@ -1060,7 +1060,7 @@ function on(emitter, event, options = kEmptyObject) {
   validateInteger(lowWatermark, 'options.lowWatermark', 1);
 
   // Preparing controlling queues and variables
-  FixedQueue ??= require('internal/fixed_queue');
+  FixedQueue ??= require('./internal/fixed_queue');
   const unconsumedEvents = new FixedQueue();
   const unconsumedPromises = new FixedQueue();
   let paused = false;
@@ -1144,7 +1144,7 @@ function on(emitter, event, options = kEmptyObject) {
 
   // Adding event handlers
   const { addEventListener, removeAll } = listenersController();
-  kFirstEventParam ??= require('internal/events/symbols').kFirstEventParam;
+  kFirstEventParam ??= require('./internal/events/symbols').kFirstEventParam;
   addEventListener(emitter, event, options[kFirstEventParam] ? eventHandler : function(...args) {
     return eventHandler(args);
   });
@@ -1158,7 +1158,7 @@ function on(emitter, event, options = kEmptyObject) {
     }
   }
   if (signal) {
-    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+    kResistStopPropagation ??= require('./internal/event_target').kResistStopPropagation;
     eventTargetAgnosticAddListener(
       signal,
       'abort',
@@ -1229,10 +1229,10 @@ function addAbortListener(signal, listener) {
 
   let removeEventListener;
   if (signal.aborted) {
-    queueMicrotask ??= require('internal/process/task_queues').queueMicrotask;
+    queueMicrotask ??= require('./internal/process/task_queues').queueMicrotask;
     queueMicrotask(() => listener());
   } else {
-    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+    kResistStopPropagation ??= require('./internal/event_target').kResistStopPropagation;
     // TODO(atlowChemi) add { subscription: true } and return directly
     signal.addEventListener('abort', listener, { __proto__: null, once: true, [kResistStopPropagation]: true });
     removeEventListener = () => {
diff --git a/lib/fs.js b/lib/fs.js
index 2d5170cd2f..b7d0db18d9 100644
--- a/lib/fs.js
+++ b/lib/fs.js
@@ -58,11 +58,11 @@ const {
 } = constants;
 
 const pathModule = require('path');
-const { isArrayBufferView } = require('internal/util/types');
+const { isArrayBufferView } = require('./internal/util/types');
 
 const binding = internalBinding('fs');
 
-const { createBlobFromFilePath } = require('internal/blob');
+const { createBlobFromFilePath } = require('./internal/blob');
 
 const { Buffer } = require('buffer');
 const {
@@ -74,13 +74,13 @@ const {
   AbortError,
   uvErrmapGet,
   uvException,
-} = require('internal/errors');
+} = require('./internal/errors');
 
 const {
   FSReqCallback,
   statValues,
 } = binding;
-const { toPathIfFileURL } = require('internal/url');
+const { toPathIfFileURL } = require('./internal/url');
 const {
   customPromisifyArgs: kCustomPromisifyArgsSymbol,
   kEmptyObject,
@@ -89,7 +89,7 @@ const {
   },
   SideEffectFreeRegExpPrototypeExec,
   defineLazyProperties,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   constants: {
     kIoMaxLength,
@@ -125,11 +125,11 @@ const {
   validateRmdirOptions,
   validateStringAfterArrayBufferView,
   warnOnNonPortableTemplate,
-} = require('internal/fs/utils');
+} = require('./internal/fs/utils');
 const {
   CHAR_FORWARD_SLASH,
   CHAR_BACKWARD_SLASH,
-} = require('internal/constants');
+} = require('./internal/constants');
 const {
   isInt32,
   parseFileMode,
@@ -141,7 +141,7 @@ const {
   validateObject,
   validateString,
   kValidateObjectAllowNullable,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 let truncateWarn = true;
 let fs;
@@ -368,7 +368,7 @@ function checkAborted(signal, callback) {
 function readFile(path, options, callback) {
   callback = maybeCallback(callback || options);
   options = getOptions(options, { flag: 'r' });
-  const ReadFileContext = require('internal/fs/read/context');
+  const ReadFileContext = require('./internal/fs/read/context');
   const context = new ReadFileContext(callback, options.encoding);
   context.isUserFd = isFd(path); // File descriptor ownership
 
@@ -1138,15 +1138,15 @@ function ftruncateSync(fd, len = 0) {
 
 function lazyLoadCp() {
   if (cpFn === undefined) {
-    ({ cpFn } = require('internal/fs/cp/cp'));
+    ({ cpFn } = require('./internal/fs/cp/cp'));
     cpFn = require('util').callbackify(cpFn);
-    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));
+    ({ cpSyncFn } = require('./internal/fs/cp/cp-sync'));
   }
 }
 
 function lazyLoadRimraf() {
   if (rimraf === undefined)
-    ({ rimraf, rimrafSync } = require('internal/fs/rimraf'));
+    ({ rimraf, rimrafSync } = require('./internal/fs/rimraf'));
 }
 
 /**
@@ -2443,13 +2443,13 @@ function watch(filename, options, listener) {
   if (options.recursive === undefined) options.recursive = false;
 
   let watcher;
-  const watchers = require('internal/fs/watchers');
+  const watchers = require('./internal/fs/watchers');
   const path = possiblyTransformPath(filename);
   // TODO(anonrig): Remove non-native watcher when/if libuv supports recursive.
   // As of November 2022, libuv does not support recursive file watch on all platforms,
   // e.g. Linux due to the limitations of inotify.
   if (options.recursive && !isOSX && !isWindows) {
-    const nonNativeWatcher = require('internal/fs/recursive_watch');
+    const nonNativeWatcher = require('./internal/fs/recursive_watch');
     watcher = new nonNativeWatcher.FSWatcher(options);
     watcher[watchers.kFSWatchStart](path);
   } else {
@@ -2468,7 +2468,7 @@ function watch(filename, options, listener) {
       process.nextTick(() => watcher.close());
     } else {
       const listener = () => watcher.close();
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('./internal/event_target').kResistStopPropagation;
       options.signal.addEventListener('abort', listener, { __proto__: null, [kResistStopPropagation]: true });
       watcher.once('close', () => {
         options.signal.removeEventListener('abort', listener);
@@ -2518,7 +2518,7 @@ function watchFile(filename, options, listener) {
   validateFunction(listener, 'listener');
 
   stat = statWatchers.get(filename);
-  const watchers = require('internal/fs/watchers');
+  const watchers = require('./internal/fs/watchers');
   if (stat === undefined) {
     stat = new watchers.StatWatcher(options.bigint);
     stat[watchers.kFSStatWatcherStart](filename,
@@ -2544,7 +2544,7 @@ function unwatchFile(filename, listener) {
   const stat = statWatchers.get(filename);
 
   if (stat === undefined) return;
-  const watchers = require('internal/fs/watchers');
+  const watchers = require('./internal/fs/watchers');
   if (typeof listener === 'function') {
     const beforeListenerCount = stat.listenerCount('change');
     stat.removeListener('change', listener);
@@ -3060,7 +3060,7 @@ function cpSync(src, dest, options) {
 
 function lazyLoadStreams() {
   if (!ReadStream) {
-    ({ ReadStream, WriteStream } = require('internal/fs/streams'));
+    ({ ReadStream, WriteStream } = require('./internal/fs/streams'));
     FileReadStream = ReadStream;
     FileWriteStream = WriteStream;
   }
@@ -3266,7 +3266,7 @@ ObjectDefineProperties(fs, {
     configurable: true,
     enumerable: true,
     get() {
-      promises ??= require('internal/fs/promises').exports;
+      promises ??= require('./internal/fs/promises').exports;
       return promises;
     },
   },
diff --git a/lib/fs/promises.js b/lib/fs/promises.js
index 1fa3a185de..798a206abb 100644
--- a/lib/fs/promises.js
+++ b/lib/fs/promises.js
@@ -1,3 +1,3 @@
 'use strict';
 
-module.exports = require('internal/fs/promises').exports;
+module.exports = require('../internal/fs/promises').exports;
diff --git a/lib/http.js b/lib/http.js
index 9fce02d6e3..2a82044615 100644
--- a/lib/http.js
+++ b/lib/http.js
@@ -27,7 +27,7 @@ const {
   ObjectDefineProperty,
 } = primordials;
 
-const { validateInteger } = require('internal/validators');
+const { validateInteger } = require('./internal/validators');
 const httpAgent = require('_http_agent');
 const { ClientRequest } = require('_http_client');
 const { methods, parsers } = require('_http_common');
@@ -143,7 +143,7 @@ ObjectDefineProperty(module.exports, 'maxHeaderSize', {
   enumerable: true,
   get() {
     if (maxHeaderSize === undefined) {
-      const { getOptionValue } = require('internal/options');
+      const { getOptionValue } = require('./internal/options');
       maxHeaderSize = getOptionValue('--max-http-header-size');
     }
 
diff --git a/lib/http2.js b/lib/http2.js
index 8db4d91862..ee9d693d0a 100644
--- a/lib/http2.js
+++ b/lib/http2.js
@@ -11,7 +11,7 @@ const {
   sensitiveHeaders,
   Http2ServerRequest,
   Http2ServerResponse,
-} = require('internal/http2/core');
+} = require('./internal/http2/core');
 
 module.exports = {
   connect,
diff --git a/lib/https.js b/lib/https.js
index ca8c49d5be..0a3367e9e7 100644
--- a/lib/https.js
+++ b/lib/https.js
@@ -40,7 +40,7 @@ const {
   assertCrypto,
   kEmptyObject,
   promisify,
-} = require('internal/util');
+} = require('./internal/util');
 assertCrypto();
 
 const tls = require('tls');
@@ -53,11 +53,11 @@ const {
   _connectionListener,
 } = require('_http_server');
 const { ClientRequest } = require('_http_client');
-let debug = require('internal/util/debuglog').debuglog('https', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('https', (fn) => {
   debug = fn;
 });
-const { URL, urlToHttpOptions, isURL } = require('internal/url');
-const { validateObject } = require('internal/validators');
+const { URL, urlToHttpOptions, isURL } = require('./internal/url');
+const { validateObject } = require('./internal/validators');
 
 function Server(opts, requestListener) {
   if (!(this instanceof Server)) return new Server(opts, requestListener);
diff --git a/lib/inspector.js b/lib/inspector.js
index 70796c83fc..f58648bae8 100644
--- a/lib/inspector.js
+++ b/lib/inspector.js
@@ -17,21 +17,21 @@ const {
   ERR_INSPECTOR_NOT_CONNECTED,
   ERR_INSPECTOR_NOT_ACTIVE,
   ERR_INSPECTOR_NOT_WORKER,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 
 const { hasInspector } = internalBinding('config');
 if (!hasInspector)
   throw new ERR_INSPECTOR_NOT_AVAILABLE();
 
 const EventEmitter = require('events');
-const { queueMicrotask } = require('internal/process/task_queues');
+const { queueMicrotask } = require('./internal/process/task_queues');
 const {
   isUint32,
   validateFunction,
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { isMainThread } = require('worker_threads');
 const { _debugEnd } = internalBinding('process_methods');
 
diff --git a/lib/inspector/promises.js b/lib/inspector/promises.js
index 462941f1d5..425197d1d4 100644
--- a/lib/inspector/promises.js
+++ b/lib/inspector/promises.js
@@ -1,7 +1,7 @@
 'use strict';
 
 const inspector = require('inspector');
-const { promisify } = require('internal/util');
+const { promisify } = require('../internal/util');
 
 class Session extends inspector.Session {
   constructor() { super(); } // eslint-disable-line no-useless-constructor
diff --git a/lib/internal/abort_controller.js b/lib/internal/abort_controller.js
index b10fb35a1a..3b324b34cb 100644
--- a/lib/internal/abort_controller.js
+++ b/lib/internal/abort_controller.js
@@ -25,21 +25,21 @@ const {
   kRemoveListener,
   kResistStopPropagation,
   kWeakHandler,
-} = require('internal/event_target');
+} = require('../internal/event_target');
 const {
   createDeferredPromise,
   customInspectSymbol,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('../internal/util');
+const { inspect } = require('../internal/util/inspect');
 const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateAbortSignal,
@@ -48,7 +48,7 @@ const {
   validateUint32,
   kValidateObjectAllowArray,
   kValidateObjectAllowFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   DOMException,
@@ -58,13 +58,13 @@ const {
   clearTimeout,
   setTimeout,
 } = require('timers');
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 let _MessageChannel;
 let markTransferMode;
@@ -74,13 +74,13 @@ let markTransferMode;
 // an incomplete initialization of abort_controller.
 
 function lazyMessageChannel() {
-  _MessageChannel ??= require('internal/worker/io').MessageChannel;
+  _MessageChannel ??= require('../internal/worker/io').MessageChannel;
   return new _MessageChannel();
 }
 
 function lazyMarkTransferMode(obj, cloneable, transferable) {
   markTransferMode ??=
-    require('internal/worker/js_transferable').markTransferMode;
+    require('../internal/worker/js_transferable').markTransferMode;
   markTransferMode(obj, cloneable, transferable);
 }
 
diff --git a/lib/internal/assert.js b/lib/internal/assert.js
index 0f52faab4b..2145278dab 100644
--- a/lib/internal/assert.js
+++ b/lib/internal/assert.js
@@ -3,7 +3,7 @@
 let error;
 function lazyError() {
   if (!error) {
-    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;
+    error = require('../internal/errors').codes.ERR_INTERNAL_ASSERTION;
   }
   return error;
 }
diff --git a/lib/internal/assert/assertion_error.js b/lib/internal/assert/assertion_error.js
index f12243790b..efc83133d2 100644
--- a/lib/internal/assert/assertion_error.js
+++ b/lib/internal/assert/assertion_error.js
@@ -16,15 +16,15 @@ const {
   StringPrototypeSplit,
 } = primordials;
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 const {
   removeColors,
-} = require('internal/util');
-const colors = require('internal/util/colors');
+} = require('../../internal/util');
+const colors = require('../../internal/util/colors');
 const {
   validateObject,
-} = require('internal/validators');
-const { isErrorStackTraceLimitWritable } = require('internal/errors');
+} = require('../../internal/validators');
+const { isErrorStackTraceLimitWritable } = require('../../internal/errors');
 
 
 const kReadableOperator = {
diff --git a/lib/internal/assert/calltracker.js b/lib/internal/assert/calltracker.js
index 0e22753053..d4dd597e66 100644
--- a/lib/internal/assert/calltracker.js
+++ b/lib/internal/assert/calltracker.js
@@ -17,11 +17,11 @@ const {
     ERR_UNAVAILABLE_DURING_EXIT,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
-const AssertionError = require('internal/assert/assertion_error');
+} = require('../../internal/errors');
+const AssertionError = require('../../internal/assert/assertion_error');
 const {
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const noop = FunctionPrototype;
 
diff --git a/lib/internal/async_hooks.js b/lib/internal/async_hooks.js
index 56061b7575..134cfa816c 100644
--- a/lib/internal/async_hooks.js
+++ b/lib/internal/async_hooks.js
@@ -153,7 +153,7 @@ function executionAsyncResource() {
 }
 
 function inspectExceptionValue(e) {
-  inspect ??= require('internal/util/inspect').inspect;
+  inspect ??= require('../internal/util/inspect').inspect;
   return { message: inspect(e) };
 }
 
@@ -167,7 +167,7 @@ function fatalError(e) {
     process._rawDebug(o.stack);
   }
 
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../internal/options');
   if (getOptionValue('--abort-on-uncaught-exception')) {
     process.abort();
   }
@@ -382,7 +382,7 @@ function updatePromiseHookMode() {
     initHook = destroyTracking;
   }
   if (stopPromiseHook) stopPromiseHook();
-  const promiseHooks = require('internal/promise_hooks');
+  const promiseHooks = require('../internal/promise_hooks');
   stopPromiseHook = promiseHooks.createHook({
     init: initHook,
     before: promiseBeforeHook,
diff --git a/lib/internal/blob.js b/lib/internal/blob.js
index a6801f3d7f..0c289e86e6 100644
--- a/lib/internal/blob.js
+++ b/lib/internal/blob.js
@@ -32,19 +32,19 @@ const {
 const {
   TextDecoder,
   TextEncoder,
-} = require('internal/encoding');
-const { URL } = require('internal/url');
+} = require('../internal/encoding');
+const { URL } = require('../internal/url');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../internal/util/types');
 
 const {
   createDeferredPromise,
@@ -52,8 +52,8 @@ const {
   kEmptyObject,
   kEnumerableProperty,
   lazyDOMException,
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('../internal/util');
+const { inspect } = require('../internal/util/inspect');
 
 const {
   codes: {
@@ -63,17 +63,17 @@ const {
     ERR_INVALID_STATE,
     ERR_BUFFER_TOO_LARGE,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateDictionary,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   CountQueuingStrategy,
-} = require('internal/webstreams/queuingstrategies');
+} = require('../internal/webstreams/queuingstrategies');
 
-const { queueMicrotask } = require('internal/process/task_queues');
+const { queueMicrotask } = require('../internal/process/task_queues');
 
 const kHandle = Symbol('kHandle');
 const kType = Symbol('kType');
@@ -94,11 +94,11 @@ let dec;
 function lazyReadableStream(options) {
   // eslint-disable-next-line no-global-assign
   ReadableStream ??=
-    require('internal/webstreams/readablestream').ReadableStream;
+    require('../internal/webstreams/readablestream').ReadableStream;
   return new ReadableStream(options);
 }
 
-const { EOL } = require('internal/constants');
+const { EOL } = require('../internal/constants');
 
 function isBlob(object) {
   return object?.[kHandle] !== undefined;
diff --git a/lib/internal/blocklist.js b/lib/internal/blocklist.js
index d4eb35c9a7..3f2108c429 100644
--- a/lib/internal/blocklist.js
+++ b/lib/internal/blocklist.js
@@ -12,29 +12,29 @@ const {
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   SocketAddress,
   kHandle: kSocketAddressHandle,
-} = require('internal/socketaddress');
+} = require('../internal/socketaddress');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 
 const kHandle = Symbol('kHandle');
 const { owner_symbol } = internalBinding('symbols');
 
 const {
   ERR_INVALID_ARG_VALUE,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
-const { validateInt32, validateString } = require('internal/validators');
+const { validateInt32, validateString } = require('../internal/validators');
 
 class BlockList {
   constructor() {
diff --git a/lib/internal/bootstrap/node.js b/lib/internal/bootstrap/node.js
index 7a773d5208..a16654b3a4 100644
--- a/lib/internal/bootstrap/node.js
+++ b/lib/internal/bootstrap/node.js
@@ -66,14 +66,14 @@ const {
   globalThis,
 } = primordials;
 const config = internalBinding('config');
-const internalTimers = require('internal/timers');
+const internalTimers = require('../../internal/timers');
 const {
   defineOperation,
   deprecate,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   validateInteger,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   constants: {
     kExitCode,
@@ -151,10 +151,10 @@ ObjectDefineProperty(process, 'config', {
   value: processConfig,
 });
 
-require('internal/worker/js_transferable').setup();
+require('../../internal/worker/js_transferable').setup();
 
 // Bootstrappers for all threads, including worker threads and main thread
-const perThreadSetup = require('internal/process/per_thread');
+const perThreadSetup = require('../../internal/process/per_thread');
 const rawMethods = internalBinding('process_methods');
 
 // Set up methods on the process object for all threads
@@ -202,12 +202,12 @@ if (credentials.implementsPosixCredentials) {
 // process. They use the same functions as the JS embedder API. These callbacks
 // are setup immediately to prevent async_wrap.setupHooks() from being hijacked
 // and the cost of doing so is negligible.
-const { nativeHooks } = require('internal/async_hooks');
+const { nativeHooks } = require('../../internal/async_hooks');
 internalBinding('async_wrap').setupHooks(nativeHooks);
 
 const {
   setupTaskQueue,
-} = require('internal/process/task_queues');
+} = require('../../internal/process/task_queues');
 const timers = require('timers');
 // Non-standard extensions:
 defineOperation(globalThis, 'clearImmediate', timers.clearImmediate);
@@ -281,7 +281,7 @@ ObjectDefineProperty(process, 'features', {
     onGlobalUncaughtException,
     setUncaughtExceptionCaptureCallback,
     hasUncaughtExceptionCaptureCallback,
-  } = require('internal/process/execution');
+  } = require('../../internal/process/execution');
 
   // For legacy reasons this is still called `_fatalException`, even
   // though it is now a global uncaught exception handler.
@@ -296,7 +296,7 @@ ObjectDefineProperty(process, 'features', {
     hasUncaughtExceptionCaptureCallback;
 }
 
-const { emitWarning } = require('internal/process/warning');
+const { emitWarning } = require('../../internal/process/warning');
 process.emitWarning = emitWarning;
 
 // We initialize the tick callbacks and the timer callbacks last during
@@ -329,7 +329,7 @@ process.emitWarning = emitWarning;
     getSourceMapsEnabled,
     setSourceMapsEnabled,
     maybeCacheGeneratedSourceMap,
-  } = require('internal/source_map/source_map_cache');
+  } = require('../../internal/source_map/source_map_cache');
   const {
     setMaybeCacheGeneratedSourceMap,
   } = internalBinding('errors');
diff --git a/lib/internal/bootstrap/realm.js b/lib/internal/bootstrap/realm.js
index c6935c6f77..48e0ab4ec8 100644
--- a/lib/internal/bootstrap/realm.js
+++ b/lib/internal/bootstrap/realm.js
@@ -24,7 +24,7 @@
 //   can be created using NODE_BINDING_CONTEXT_AWARE_CPP() with the flag
 //   NM_F_LINKED.
 // - internalBinding(): the private internal C++ binding loader, inaccessible
-//   from user land unless through `require('internal/test/binding')`.
+//   from user land unless through `require('../../internal/test/binding')`.
 //   These C++ bindings are created using NODE_BINDING_CONTEXT_AWARE_INTERNAL()
 //   and have their nm_flags set to NM_F_INTERNAL.
 //
@@ -35,7 +35,7 @@
 //   so they can be loaded faster without the cost of I/O. This class makes the
 //   lib/internal/*, deps/internal/* modules and internalBinding() available by
 //   default to core modules, and lets the core modules require itself via
-//   require('internal/bootstrap/realm') even when this file is not written in
+//   require('../../internal/bootstrap/realm') even when this file is not written in
 //   CommonJS style.
 //
 // Other objects:
diff --git a/lib/internal/bootstrap/switches/does_not_own_process_state.js b/lib/internal/bootstrap/switches/does_not_own_process_state.js
index 21be25384f..486d2adc88 100644
--- a/lib/internal/bootstrap/switches/does_not_own_process_state.js
+++ b/lib/internal/bootstrap/switches/does_not_own_process_state.js
@@ -3,7 +3,7 @@
 const credentials = internalBinding('credentials');
 const rawMethods = internalBinding('process_methods');
 // TODO: this should be detached from ERR_WORKER_UNSUPPORTED_OPERATION
-const { unavailable } = require('internal/process/worker_thread_only');
+const { unavailable } = require('../../../internal/process/worker_thread_only');
 
 process.abort = unavailable('process.abort()');
 process.chdir = unavailable('process.chdir()');
@@ -24,7 +24,7 @@ if (credentials.implementsPosixCredentials) {
 
 const {
   codes: { ERR_WORKER_UNSUPPORTED_OPERATION },
-} = require('internal/errors');
+} = require('../../../internal/errors');
 
 function wrappedUmask(mask) {
   // process.umask() is a read-only operation in workers.
diff --git a/lib/internal/bootstrap/switches/does_own_process_state.js b/lib/internal/bootstrap/switches/does_own_process_state.js
index 8f457de3e1..0130acd62c 100644
--- a/lib/internal/bootstrap/switches/does_own_process_state.js
+++ b/lib/internal/bootstrap/switches/does_own_process_state.js
@@ -7,7 +7,7 @@ const {
     addSerializeCallback,
     isBuildingSnapshot,
   },
-} = require('internal/v8/startup_snapshot');
+} = require('../../../internal/v8/startup_snapshot');
 
 process.abort = rawMethods.abort;
 process.umask = wrappedUmask;
@@ -32,7 +32,7 @@ const {
   parseFileMode,
   validateArray,
   validateString,
-} = require('internal/validators');
+} = require('../../../internal/validators');
 
 function wrapPosixCredentialSetters(credentials) {
   const {
@@ -40,10 +40,10 @@ function wrapPosixCredentialSetters(credentials) {
       ERR_INVALID_ARG_TYPE,
       ERR_UNKNOWN_CREDENTIAL,
     },
-  } = require('internal/errors');
+  } = require('../../../internal/errors');
   const {
     validateUint32,
-  } = require('internal/validators');
+  } = require('../../../internal/validators');
 
   const {
     initgroups: _initgroups,
diff --git a/lib/internal/bootstrap/switches/is_main_thread.js b/lib/internal/bootstrap/switches/is_main_thread.js
index 8707bc7daa..c09418f4a5 100644
--- a/lib/internal/bootstrap/switches/is_main_thread.js
+++ b/lib/internal/bootstrap/switches/is_main_thread.js
@@ -7,7 +7,7 @@ const {
     addSerializeCallback,
     isBuildingSnapshot,
   },
-} = require('internal/v8/startup_snapshot');
+} = require('../../../internal/v8/startup_snapshot');
 // TODO(joyeecheung): deprecate and remove these underscore methods
 process._debugProcess = rawMethods._debugProcess;
 process._debugEnd = rawMethods._debugEnd;
@@ -35,14 +35,14 @@ defineStream('stderr', getStderr);
 const {
   startListeningIfSignal,
   stopListeningIfSignal,
-} = require('internal/process/signal');
+} = require('../../../internal/process/signal');
 process.on('newListener', startListeningIfSignal);
 process.on('removeListener', stopListeningIfSignal);
 
 // ---- keep the attachment of the wrappers above so that it's easier to ----
 // ----              compare the setups side-by-side                    -----
 
-const { guessHandleType } = require('internal/util');
+const { guessHandleType } = require('../../../internal/util');
 
 function createWritableStdioStream(fd) {
   let stream;
@@ -56,7 +56,7 @@ function createWritableStdioStream(fd) {
     }
 
     case 'FILE': {
-      const SyncWriteStream = require('internal/fs/sync_write_stream');
+      const SyncWriteStream = require('../../../internal/fs/sync_write_stream');
       stream = new SyncWriteStream(fd, { autoClose: false });
       stream._type = 'fs';
       break;
@@ -70,7 +70,7 @@ function createWritableStdioStream(fd) {
       // an error when trying to use it again. In that case, create the socket
       // using the existing handle instead of the fd.
       if (process.channel && process.channel.fd === fd) {
-        const { kChannelHandle } = require('internal/child_process');
+        const { kChannelHandle } = require('../../../internal/child_process');
         stream = new net.Socket({
           handle: process[kChannelHandle],
           readable: false,
@@ -292,24 +292,24 @@ require('fs');
 require('util');
 require('url'); // eslint-disable-line no-restricted-modules
 
-require('internal/modules/cjs/loader');
-require('internal/modules/esm/utils');
-require('internal/vm/module');
+require('../../../internal/modules/cjs/loader');
+require('../../../internal/modules/esm/utils');
+require('../../../internal/vm/module');
 // Needed to refresh the time origin.
-require('internal/perf/utils');
+require('../../../internal/perf/utils');
 // Needed to register the async hooks.
 if (internalBinding('config').hasInspector) {
-  require('internal/inspector_async_hook');
+  require('../../../internal/inspector_async_hook');
 }
 // Needed to set the wasm web API callbacks.
 internalBinding('wasm_web_api');
 // Needed to detect whether it's on main thread.
 internalBinding('worker');
 // Needed by most execution modes.
-require('internal/modules/run_main');
+require('../../../internal/modules/run_main');
 // Needed to refresh DNS configurations.
-require('internal/dns/utils');
+require('../../../internal/dns/utils');
 // Needed by almost all execution modes. It's fine to
 // load them into the snapshot as long as we don't run
 // any of the initialization.
-require('internal/process/pre_execution');
+require('../../../internal/process/pre_execution');
diff --git a/lib/internal/bootstrap/switches/is_not_main_thread.js b/lib/internal/bootstrap/switches/is_not_main_thread.js
index c2cb0106f0..f2f83fc429 100644
--- a/lib/internal/bootstrap/switches/is_not_main_thread.js
+++ b/lib/internal/bootstrap/switches/is_not_main_thread.js
@@ -22,7 +22,7 @@ defineStream('stderr', getStderr);
 const {
   startListeningIfSignal,
   stopListeningIfSignal,
-} = require('internal/process/signal');
+} = require('../../../internal/process/signal');
 process.removeListener('newListener', startListeningIfSignal);
 process.removeListener('removeListener', stopListeningIfSignal);
 
@@ -31,7 +31,7 @@ process.removeListener('removeListener', stopListeningIfSignal);
 
 const {
   createWorkerStdio,
-} = require('internal/worker/io');
+} = require('../../../internal/worker/io');
 
 let workerStdio;
 function lazyWorkerStdio() {
diff --git a/lib/internal/bootstrap/web/exposed-wildcard.js b/lib/internal/bootstrap/web/exposed-wildcard.js
index 7d9b75caab..5fd786fcef 100644
--- a/lib/internal/bootstrap/web/exposed-wildcard.js
+++ b/lib/internal/bootstrap/web/exposed-wildcard.js
@@ -16,14 +16,14 @@ const {
   exposeLazyInterfaces,
   exposeGetterAndSetter,
   exposeNamespace,
-} = require('internal/util');
+} = require('../../../internal/util');
 const config = internalBinding('config');
 
 // https://console.spec.whatwg.org/#console-namespace
 exposeNamespace(globalThis, 'console',
                 createGlobalConsole());
 
-const { URL, URLSearchParams } = require('internal/url');
+const { URL, URLSearchParams } = require('../../../internal/url');
 // https://url.spec.whatwg.org/#url
 exposeInterface(globalThis, 'URL', URL);
 // https://url.spec.whatwg.org/#urlsearchparams
@@ -47,7 +47,7 @@ exposeLazyInterfaces(globalThis, 'internal/abort_controller', [
 // https://dom.spec.whatwg.org/#interface-eventtarget
 const {
   EventTarget, Event,
-} = require('internal/event_target');
+} = require('../../../internal/event_target');
 exposeInterface(globalThis, 'Event', Event);
 exposeInterface(globalThis, 'EventTarget', EventTarget);
 
@@ -59,9 +59,9 @@ exposeLazyInterfaces(globalThis,
 
 function createGlobalConsole() {
   const consoleFromNode =
-    require('internal/console/global');
+    require('../../../internal/console/global');
   if (config.hasInspector) {
-    const inspector = require('internal/util/inspector');
+    const inspector = require('../../../internal/util/inspector');
     // TODO(joyeecheung): postpone this until the first time inspector
     // is activated.
     inspector.wrapConsole(consoleFromNode);
diff --git a/lib/internal/bootstrap/web/exposed-window-or-worker.js b/lib/internal/bootstrap/web/exposed-window-or-worker.js
index 3cc555b82f..0f74a09b56 100644
--- a/lib/internal/bootstrap/web/exposed-window-or-worker.js
+++ b/lib/internal/bootstrap/web/exposed-window-or-worker.js
@@ -17,7 +17,7 @@ const {
   defineLazyProperties,
   defineReplaceableLazyAttribute,
   exposeLazyInterfaces,
-} = require('internal/util');
+} = require('../../../internal/util');
 
 // https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope
 const timers = require('timers');
@@ -28,7 +28,7 @@ defineOperation(globalThis, 'setTimeout', timers.setTimeout);
 
 const {
   queueMicrotask,
-} = require('internal/process/task_queues');
+} = require('../../../internal/process/task_queues');
 defineOperation(globalThis, 'queueMicrotask', queueMicrotask);
 
 defineLazyProperties(
@@ -60,5 +60,5 @@ exposeLazyInterfaces(globalThis, 'internal/navigator', ['Navigator']);
 defineReplaceableLazyAttribute(globalThis, 'internal/navigator', ['navigator'], false);
 
 // https://w3c.github.io/FileAPI/#creating-revoking
-const { installObjectURLMethods } = require('internal/url');
+const { installObjectURLMethods } = require('../../../internal/url');
 installObjectURLMethods();
diff --git a/lib/internal/buffer.js b/lib/internal/buffer.js
index a65dd43263..5e50b634d6 100644
--- a/lib/internal/buffer.js
+++ b/lib/internal/buffer.js
@@ -13,8 +13,8 @@ const {
   ERR_BUFFER_OUT_OF_BOUNDS,
   ERR_INVALID_ARG_TYPE,
   ERR_OUT_OF_RANGE,
-} = require('internal/errors').codes;
-const { validateNumber } = require('internal/validators');
+} = require('../internal/errors').codes;
+const { validateNumber } = require('../internal/validators');
 const {
   asciiSlice,
   base64Slice,
diff --git a/lib/internal/child_process.js b/lib/internal/child_process.js
index 2cad5aaf71..03ae173a90 100644
--- a/lib/internal/child_process.js
+++ b/lib/internal/child_process.js
@@ -29,18 +29,18 @@ const {
     ERR_IPC_SYNC_FORK,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 const {
   validateArray,
   validateObject,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../internal/validators');
 const EventEmitter = require('events');
 const net = require('net');
 const dgram = require('dgram');
-const inspect = require('internal/util/inspect').inspect;
-const assert = require('internal/assert');
+const inspect = require('../internal/util/inspect').inspect;
+const assert = require('../internal/assert');
 
 const { Process } = internalBinding('process_wrap');
 const {
@@ -54,12 +54,12 @@ const { Pipe, constants: PipeConstants } = internalBinding('pipe_wrap');
 const { TCP } = internalBinding('tcp_wrap');
 const { TTY } = internalBinding('tty_wrap');
 const { UDP } = internalBinding('udp_wrap');
-const SocketList = require('internal/socket_list');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { convertToValidSignal, deprecate } = require('internal/util');
-const { isArrayBufferView } = require('internal/util/types');
+const SocketList = require('../internal/socket_list');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
+const { convertToValidSignal, deprecate } = require('../internal/util');
+const { isArrayBufferView } = require('../internal/util/types');
 const spawn_sync = internalBinding('spawn_sync');
-const { kStateSymbol } = require('internal/dgram');
+const { kStateSymbol } = require('../internal/dgram');
 const dc = require('diagnostics_channel');
 const childProcessChannel = dc.channel('child_process');
 
@@ -601,7 +601,7 @@ function setupChannel(target, channel, serializationMode) {
   target._pendingMessage = null;
 
   if (serialization === undefined)
-    serialization = require('internal/child_process/serialization');
+    serialization = require('../internal/child_process/serialization');
   const {
     initMessageChannel,
     parseChannelMessages,
diff --git a/lib/internal/child_process/serialization.js b/lib/internal/child_process/serialization.js
index 365c1f6f57..845c7b4d8c 100644
--- a/lib/internal/child_process/serialization.js
+++ b/lib/internal/child_process/serialization.js
@@ -11,8 +11,8 @@ const {
 const { Buffer } = require('buffer');
 const { StringDecoder } = require('string_decoder');
 const v8 = require('v8');
-const { isArrayBufferView } = require('internal/util/types');
-const assert = require('internal/assert');
+const { isArrayBufferView } = require('../../internal/util/types');
+const assert = require('../../internal/assert');
 const { streamBaseState, kLastWriteWasAsync } = internalBinding('stream_wrap');
 
 const kMessageBuffer = Symbol('kMessageBuffer');
diff --git a/lib/internal/cli_table.js b/lib/internal/cli_table.js
index 79b15a38f4..8d31100724 100644
--- a/lib/internal/cli_table.js
+++ b/lib/internal/cli_table.js
@@ -10,7 +10,7 @@ const {
   StringPrototypeRepeat,
 } = primordials;
 
-const { getStringWidth } = require('internal/util/inspect');
+const { getStringWidth } = require('../internal/util/inspect');
 
 // The use of Unicode characters below is the only non-comment use of non-ASCII
 // Unicode characters in Node.js built-in modules. If they are ever removed or
diff --git a/lib/internal/cluster/child.js b/lib/internal/cluster/child.js
index be5353c928..efc9861e65 100644
--- a/lib/internal/cluster/child.js
+++ b/lib/internal/cluster/child.js
@@ -9,14 +9,14 @@ const {
   SafeSet,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const path = require('path');
 const EventEmitter = require('events');
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const Worker = require('internal/cluster/worker');
-const { internal, sendHelper } = require('internal/cluster/utils');
+const { owner_symbol } = require('../../internal/async_hooks').symbols;
+const Worker = require('../../internal/cluster/worker');
+const { internal, sendHelper } = require('../../internal/cluster/utils');
 const { exitCodes: { kNoFailure } } = internalBinding('errors');
-const { TIMEOUT_MAX } = require('internal/timers');
+const { TIMEOUT_MAX } = require('../../internal/timers');
 const { setInterval, clearInterval } = require('timers');
 
 const cluster = new EventEmitter();
diff --git a/lib/internal/cluster/primary.js b/lib/internal/cluster/primary.js
index 945f440cd1..ca9d6af672 100644
--- a/lib/internal/cluster/primary.js
+++ b/lib/internal/cluster/primary.js
@@ -13,17 +13,17 @@ const {
   codes: {
     ERR_SOCKET_BAD_PORT,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const { fork } = require('child_process');
 const path = require('path');
 const EventEmitter = require('events');
-const RoundRobinHandle = require('internal/cluster/round_robin_handle');
-const SharedHandle = require('internal/cluster/shared_handle');
-const Worker = require('internal/cluster/worker');
-const { getInspectPort, isUsingInspector } = require('internal/util/inspector');
-const { internal, sendHelper } = require('internal/cluster/utils');
+const RoundRobinHandle = require('../../internal/cluster/round_robin_handle');
+const SharedHandle = require('../../internal/cluster/shared_handle');
+const Worker = require('../../internal/cluster/worker');
+const { getInspectPort, isUsingInspector } = require('../../internal/util/inspector');
+const { internal, sendHelper } = require('../../internal/cluster/utils');
 const cluster = new EventEmitter();
 const intercom = new EventEmitter();
 const SCHED_NONE = 1;
diff --git a/lib/internal/cluster/round_robin_handle.js b/lib/internal/cluster/round_robin_handle.js
index 7ba28d7f4e..53f7f2061b 100644
--- a/lib/internal/cluster/round_robin_handle.js
+++ b/lib/internal/cluster/round_robin_handle.js
@@ -6,10 +6,10 @@ const {
   SafeMap,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const net = require('net');
-const { sendHelper } = require('internal/cluster/utils');
-const { append, init, isEmpty, peek, remove } = require('internal/linkedlist');
+const { sendHelper } = require('../../internal/cluster/utils');
+const { append, init, isEmpty, peek, remove } = require('../../internal/linkedlist');
 const { constants } = internalBinding('tcp_wrap');
 
 module.exports = RoundRobinHandle;
diff --git a/lib/internal/cluster/shared_handle.js b/lib/internal/cluster/shared_handle.js
index 87b83df200..f39c1e9c91 100644
--- a/lib/internal/cluster/shared_handle.js
+++ b/lib/internal/cluster/shared_handle.js
@@ -1,7 +1,7 @@
 'use strict';
 const { SafeMap } = primordials;
-const assert = require('internal/assert');
-const dgram = require('internal/dgram');
+const assert = require('../../internal/assert');
+const dgram = require('../../internal/dgram');
 const net = require('net');
 
 module.exports = SharedHandle;
diff --git a/lib/internal/cluster/worker.js b/lib/internal/cluster/worker.js
index 872c5f89e0..7db8bb8dd6 100644
--- a/lib/internal/cluster/worker.js
+++ b/lib/internal/cluster/worker.js
@@ -7,7 +7,7 @@ const {
 
 const EventEmitter = require('events');
 
-const { kEmptyObject } = require('internal/util');
+const { kEmptyObject } = require('../../internal/util');
 
 module.exports = Worker;
 
diff --git a/lib/internal/console/constructor.js b/lib/internal/console/constructor.js
index 44fa0f32d7..7fb5aaa884 100644
--- a/lib/internal/console/constructor.js
+++ b/lib/internal/console/constructor.js
@@ -46,27 +46,27 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_INCOMPATIBLE_OPTION_PAIR,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateArray,
   validateInteger,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const { previewEntries } = internalBinding('util');
 const { Buffer: { isBuffer } } = require('buffer');
 const {
   inspect,
   formatWithOptions,
-} = require('internal/util/inspect');
+} = require('../../internal/util/inspect');
 const {
   isTypedArray, isSet, isMap, isSetIterator, isMapIterator,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 const {
   CHAR_LOWERCASE_B: kTraceBegin,
   CHAR_LOWERCASE_E: kTraceEnd,
   CHAR_LOWERCASE_N: kTraceInstant,
   CHAR_UPPERCASE_C: kTraceCount,
-} = require('internal/constants');
+} = require('../../internal/constants');
 const kCounts = Symbol('counts');
 
 const kTraceConsoleCategory = 'node,node.console';
@@ -81,7 +81,7 @@ let cliTable;
 
 let utilColors;
 function lazyUtilColors() {
-  utilColors ??= require('internal/util/colors');
+  utilColors ??= require('../../internal/util/colors');
   return utilColors;
 }
 
@@ -448,7 +448,7 @@ const consoleMethods = {
       const {
         cursorTo,
         clearScreenDown,
-      } = require('internal/readline/callbacks');
+      } = require('../../internal/readline/callbacks');
       cursorTo(this._stdout, 0, 0);
       clearScreenDown(this._stdout);
     }
@@ -505,7 +505,7 @@ const consoleMethods = {
     if (tabularData === null || typeof tabularData !== 'object')
       return this.log(tabularData);
 
-    cliTable ??= require('internal/cli_table');
+    cliTable ??= require('../../internal/cli_table');
     const final = (k, v) => this.log(cliTable(k, v));
 
     const _inspect = (v) => {
@@ -696,7 +696,7 @@ function initializeGlobalConsole(globalConsole) {
       addSerializeCallback,
       isBuildingSnapshot,
     },
-  } = require('internal/v8/startup_snapshot');
+  } = require('../../internal/v8/startup_snapshot');
 
   if (!internalBinding('config').hasInspector || !isBuildingSnapshot()) {
     return;
diff --git a/lib/internal/console/global.js b/lib/internal/console/global.js
index 33654d8dbc..cfd460471c 100644
--- a/lib/internal/console/global.js
+++ b/lib/internal/console/global.js
@@ -21,7 +21,7 @@ const {
 
 const {
   Console,
-} = require('internal/console/constructor');
+} = require('../../internal/console/constructor');
 
 const globalConsole = { __proto__: {} };
 
diff --git a/lib/internal/crypto/aes.js b/lib/internal/crypto/aes.js
index b6d134dbfb..2b2bc2fb53 100644
--- a/lib/internal/crypto/aes.js
+++ b/lib/internal/crypto/aes.js
@@ -40,12 +40,12 @@ const {
   kAesKeyLengths,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { PromiseReject } = primordials;
 
@@ -53,11 +53,11 @@ const {
   InternalCryptoKey,
   SecretKeyObject,
   createSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKey: _generateKey,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const kMaxCounterLength = 128;
 const kTagLengths = [32, 64, 96, 104, 112, 120, 128];
diff --git a/lib/internal/crypto/certificate.js b/lib/internal/crypto/certificate.js
index 825153a4ac..e98a207e0e 100644
--- a/lib/internal/crypto/certificate.js
+++ b/lib/internal/crypto/certificate.js
@@ -8,7 +8,7 @@ const {
 
 const {
   getArrayBufferOrView,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 // The functions contained in this file cover the SPKAC format
 // (also referred to as Netscape SPKI). A general description of
diff --git a/lib/internal/crypto/cfrg.js b/lib/internal/crypto/cfrg.js
index 9112dbdd31..031b4af589 100644
--- a/lib/internal/crypto/cfrg.js
+++ b/lib/internal/crypto/cfrg.js
@@ -24,17 +24,17 @@ const {
   validateKeyOps,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   emitExperimentalWarning,
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   generateKeyPair: _generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   InternalCryptoKey,
@@ -42,7 +42,7 @@ const {
   PublicKeyObject,
   createPrivateKey,
   createPublicKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const generateKeyPair = promisify(_generateKeyPair);
 
diff --git a/lib/internal/crypto/cipher.js b/lib/internal/crypto/cipher.js
index a2b560d138..4e27b48248 100644
--- a/lib/internal/crypto/cipher.js
+++ b/lib/internal/crypto/cipher.js
@@ -29,36 +29,36 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_UNKNOWN_ENCODING,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateEncoding,
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   preparePrivateKey,
   preparePublicOrPrivateKey,
   prepareSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   getArrayBufferOrView,
   getStringOption,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
-const LazyTransform = require('internal/streams/lazy_transform');
+const LazyTransform = require('../../internal/streams/lazy_transform');
 
-const { normalizeEncoding } = require('internal/util');
+const { normalizeEncoding } = require('../../internal/util');
 
 const { StringDecoder } = require('string_decoder');
 
diff --git a/lib/internal/crypto/diffiehellman.js b/lib/internal/crypto/diffiehellman.js
index 59bbf8ff71..f318375bc4 100644
--- a/lib/internal/crypto/diffiehellman.js
+++ b/lib/internal/crypto/diffiehellman.js
@@ -28,26 +28,26 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   KeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   getArrayBufferOrView,
@@ -55,7 +55,7 @@ const {
   toBuf,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   crypto: {
diff --git a/lib/internal/crypto/ec.js b/lib/internal/crypto/ec.js
index 710917af2e..d94ce9b93a 100644
--- a/lib/internal/crypto/ec.js
+++ b/lib/internal/crypto/ec.js
@@ -26,16 +26,16 @@ const {
   kHandle,
   kKeyObject,
   kNamedCurveAliases,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   generateKeyPair: _generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   InternalCryptoKey,
@@ -43,7 +43,7 @@ const {
   PublicKeyObject,
   createPrivateKey,
   createPublicKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const generateKeyPair = promisify(_generateKeyPair);
 
diff --git a/lib/internal/crypto/hash.js b/lib/internal/crypto/hash.js
index 57fcb63518..f26eab0ace 100644
--- a/lib/internal/crypto/hash.js
+++ b/lib/internal/crypto/hash.js
@@ -19,15 +19,15 @@ const {
   normalizeHashName,
   validateMaxBufferLength,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   prepareSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   Buffer,
@@ -39,19 +39,19 @@ const {
     ERR_CRYPTO_HASH_UPDATE_FAILED,
     ERR_INVALID_ARG_TYPE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateEncoding,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const LazyTransform = require('internal/streams/lazy_transform');
+const LazyTransform = require('../../internal/streams/lazy_transform');
 
 const kState = Symbol('kState');
 const kFinalized = Symbol('kFinalized');
diff --git a/lib/internal/crypto/hkdf.js b/lib/internal/crypto/hkdf.js
index cf3c39e8d9..792b69d17b 100644
--- a/lib/internal/crypto/hkdf.js
+++ b/lib/internal/crypto/hkdf.js
@@ -14,7 +14,7 @@ const {
   validateFunction,
   validateInteger,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { kMaxLength } = require('buffer');
 
@@ -23,22 +23,22 @@ const {
   toBuf,
   validateByteSource,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   createSecretKey,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   codes: {
@@ -46,7 +46,7 @@ const {
     ERR_OUT_OF_RANGE,
   },
   hideStackFrames,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const validateParameters = hideStackFrames((hash, key, salt, info, length) => {
   validateString(hash, 'digest');
diff --git a/lib/internal/crypto/keygen.js b/lib/internal/crypto/keygen.js
index 3814734ecf..79b14aa40f 100644
--- a/lib/internal/crypto/keygen.js
+++ b/lib/internal/crypto/keygen.js
@@ -31,16 +31,16 @@ const {
   SecretKeyObject,
   parsePublicKeyEncoding,
   parsePrivateKeyEncoding,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   kAesKeyLengths,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   customPromisifyArgs,
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   validateFunction,
@@ -51,7 +51,7 @@ const {
   validateOneOf,
   validateInt32,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -59,9 +59,9 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_MISSING_OPTION,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const { isArrayBufferView } = require('internal/util/types');
+const { isArrayBufferView } = require('../../internal/util/types');
 
 function isJwk(obj) {
   return obj != null && obj.kty !== undefined;
diff --git a/lib/internal/crypto/keys.js b/lib/internal/crypto/keys.js
index 1e49bd6247..d406d399b1 100644
--- a/lib/internal/crypto/keys.js
+++ b/lib/internal/crypto/keys.js
@@ -30,7 +30,7 @@ const {
   validateObject,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -42,32 +42,32 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   kHandle,
   kKeyObject,
   getArrayBufferOrView,
   bigIntArrayToUnsignedBigInt,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspectSymbol: kInspect,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 const { Buffer } = require('buffer');
 
diff --git a/lib/internal/crypto/mac.js b/lib/internal/crypto/mac.js
index 91f58a85a9..d8be047f4b 100644
--- a/lib/internal/crypto/mac.js
+++ b/lib/internal/crypto/mac.js
@@ -22,22 +22,22 @@ const {
   validateKeyOps,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   generateKey: _generateKey,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const {
   InternalCryptoKey,
   SecretKeyObject,
   createSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const generateKey = promisify(_generateKey);
 
diff --git a/lib/internal/crypto/pbkdf2.js b/lib/internal/crypto/pbkdf2.js
index 697ceffa54..6c1bc20106 100644
--- a/lib/internal/crypto/pbkdf2.js
+++ b/lib/internal/crypto/pbkdf2.js
@@ -16,18 +16,18 @@ const {
   validateFunction,
   validateInt32,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   getArrayBufferOrView,
   normalizeHashName,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 function pbkdf2(password, salt, iterations, keylen, digest, callback) {
   if (typeof digest === 'function') {
diff --git a/lib/internal/crypto/random.js b/lib/internal/crypto/random.js
index 0533216969..726a2185cf 100644
--- a/lib/internal/crypto/random.js
+++ b/lib/internal/crypto/random.js
@@ -33,7 +33,7 @@ const {
 const {
   kEmptyObject,
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { Buffer, kMaxLength } = require('buffer');
 
@@ -43,7 +43,7 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_OPERATION_FAILED,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateNumber,
@@ -51,7 +51,7 @@ const {
   validateFunction,
   validateInt32,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isArrayBufferView,
@@ -59,9 +59,9 @@ const {
   isTypedArray,
   isFloat32Array,
   isFloat64Array,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const { FastBuffer } = require('internal/buffer');
+const { FastBuffer } = require('../../internal/buffer');
 
 const kMaxInt32 = 2 ** 31 - 1;
 const kMaxPossibleLength = MathMin(kMaxLength, kMaxInt32);
diff --git a/lib/internal/crypto/rsa.js b/lib/internal/crypto/rsa.js
index 1283aea872..8c5f58287f 100644
--- a/lib/internal/crypto/rsa.js
+++ b/lib/internal/crypto/rsa.js
@@ -23,7 +23,7 @@ const {
 
 const {
   validateInt32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   bigIntArrayToUnsignedInt,
@@ -35,12 +35,12 @@ const {
   validateMaxBufferLength,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   InternalCryptoKey,
@@ -48,11 +48,11 @@ const {
   PublicKeyObject,
   createPublicKey,
   createPrivateKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   generateKeyPair: _generateKeyPair,
-} = require('internal/crypto/keygen');
+} = require('../../internal/crypto/keygen');
 
 const kRsaVariants = {
   'RSASSA-PKCS1-v1_5': kKeyVariantRSA_SSA_PKCS1_v1_5,
diff --git a/lib/internal/crypto/scrypt.js b/lib/internal/crypto/scrypt.js
index a90d317c55..f0801b6183 100644
--- a/lib/internal/crypto/scrypt.js
+++ b/lib/internal/crypto/scrypt.js
@@ -17,18 +17,18 @@ const {
   validateInteger,
   validateInt32,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
     ERR_CRYPTO_SCRYPT_INVALID_PARAMETER,
     ERR_CRYPTO_SCRYPT_NOT_SUPPORTED,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   getArrayBufferOrView,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const defaults = {
   N: 16384,
diff --git a/lib/internal/crypto/sig.js b/lib/internal/crypto/sig.js
index 9b3895646c..64523d1feb 100644
--- a/lib/internal/crypto/sig.js
+++ b/lib/internal/crypto/sig.js
@@ -12,13 +12,13 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateFunction,
   validateEncoding,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Sign: _Sign,
@@ -35,12 +35,12 @@ const {
 const {
   getArrayBufferOrView,
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   preparePrivateKey,
   preparePublicOrPrivateKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const { Writable } = require('stream');
 
@@ -48,7 +48,7 @@ const { Buffer } = require('buffer');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 function Sign(algorithm, options) {
   if (!(this instanceof Sign))
diff --git a/lib/internal/crypto/util.js b/lib/internal/crypto/util.js
index 51ca3f4c05..85a4707114 100644
--- a/lib/internal/crypto/util.js
+++ b/lib/internal/crypto/util.js
@@ -31,7 +31,7 @@ const {
   secureHeapUsed: _secureHeapUsed,
 } = internalBinding('crypto');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 const {
   crypto: {
@@ -39,7 +39,7 @@ const {
   },
 } = internalBinding('constants');
 
-const normalizeHashName = require('internal/crypto/hashnames');
+const normalizeHashName = require('../../internal/crypto/hashnames');
 
 const {
   hideStackFrames,
@@ -50,13 +50,13 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_OUT_OF_RANGE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateArray,
   validateNumber,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { Buffer } = require('buffer');
 
@@ -64,13 +64,13 @@ const {
   cachedResult,
   filterDuplicateStrings,
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isDataView,
   isArrayBufferView,
   isAnyArrayBuffer,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const kHandle = Symbol('kHandle');
 const kKeyObject = Symbol('kKeyObject');
@@ -282,7 +282,7 @@ function normalizeAlgorithm(algorithm, op) {
   if (typeof algorithm === 'string')
     return normalizeAlgorithm({ name: algorithm }, op);
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
 
   // 1.
   const registeredAlgorithms = kSupportedAlgorithms[op];
diff --git a/lib/internal/crypto/webcrypto.js b/lib/internal/crypto/webcrypto.js
index aaf46ce03d..9909b8f8f8 100644
--- a/lib/internal/crypto/webcrypto.js
+++ b/lib/internal/crypto/webcrypto.js
@@ -23,26 +23,26 @@ const {
 
 const {
   getOptionValue,
-} = require('internal/options');
+} = require('../../internal/options');
 
-const { TextDecoder, TextEncoder } = require('internal/encoding');
+const { TextDecoder, TextEncoder } = require('../../internal/encoding');
 
 const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   CryptoKey,
   InternalCryptoKey,
   createSecretKey,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   asyncDigest,
-} = require('internal/crypto/hash');
+} = require('../../internal/crypto/hash');
 
 const {
   getBlockSize,
@@ -52,24 +52,24 @@ const {
   validateMaxBufferLength,
   kHandle,
   kKeyObject,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   kEnumerableProperty,
   lazyDOMException,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   getRandomValues: _getRandomValues,
   randomUUID: _randomUUID,
-} = require('internal/crypto/random');
+} = require('../../internal/crypto/random');
 
 let webidl;
 
 async function digest(algorithm, data) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'digest' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 2, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -97,7 +97,7 @@ async function generateKey(
   keyUsages) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'generateKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 3, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -123,7 +123,7 @@ async function generateKey(
       // Fall through
     case 'RSA-OAEP':
       resultType = 'CryptoKeyPair';
-      result = await require('internal/crypto/rsa')
+      result = await require('../../internal/crypto/rsa')
         .rsaKeyGenerate(algorithm, extractable, keyUsages);
       break;
     case 'Ed25519':
@@ -134,19 +134,19 @@ async function generateKey(
       // Fall through
     case 'X448':
       resultType = 'CryptoKeyPair';
-      result = await require('internal/crypto/cfrg')
+      result = await require('../../internal/crypto/cfrg')
         .cfrgGenerateKey(algorithm, extractable, keyUsages);
       break;
     case 'ECDSA':
       // Fall through
     case 'ECDH':
       resultType = 'CryptoKeyPair';
-      result = await require('internal/crypto/ec')
+      result = await require('../../internal/crypto/ec')
         .ecGenerateKey(algorithm, extractable, keyUsages);
       break;
     case 'HMAC':
       resultType = 'CryptoKey';
-      result = await require('internal/crypto/mac')
+      result = await require('../../internal/crypto/mac')
         .hmacGenerateKey(algorithm, extractable, keyUsages);
       break;
     case 'AES-CTR':
@@ -157,7 +157,7 @@ async function generateKey(
       // Fall through
     case 'AES-KW':
       resultType = 'CryptoKey';
-      result = await require('internal/crypto/aes')
+      result = await require('../../internal/crypto/aes')
         .aesGenerateKey(algorithm, extractable, keyUsages);
       break;
     default:
@@ -181,7 +181,7 @@ async function generateKey(
 async function deriveBits(algorithm, baseKey, length) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'deriveBits' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 3, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -213,13 +213,13 @@ async function deriveBits(algorithm, baseKey, length) {
     case 'X448':
       // Fall through
     case 'ECDH':
-      return require('internal/crypto/diffiehellman')
+      return require('../../internal/crypto/diffiehellman')
         .ecdhDeriveBits(algorithm, baseKey, length);
     case 'HKDF':
-      return require('internal/crypto/hkdf')
+      return require('../../internal/crypto/hkdf')
         .hkdfDeriveBits(algorithm, baseKey, length);
     case 'PBKDF2':
-      return require('internal/crypto/pbkdf2')
+      return require('../../internal/crypto/pbkdf2')
         .pbkdf2DeriveBits(algorithm, baseKey, length);
   }
   throw lazyDOMException('Unrecognized algorithm name', 'NotSupportedError');
@@ -259,7 +259,7 @@ async function deriveKey(
   keyUsages) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'deriveKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 5, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -301,15 +301,15 @@ async function deriveKey(
     case 'X448':
       // Fall through
     case 'ECDH':
-      bits = await require('internal/crypto/diffiehellman')
+      bits = await require('../../internal/crypto/diffiehellman')
         .ecdhDeriveBits(algorithm, baseKey, length);
       break;
     case 'HKDF':
-      bits = await require('internal/crypto/hkdf')
+      bits = await require('../../internal/crypto/hkdf')
         .hkdfDeriveBits(algorithm, baseKey, length);
       break;
     case 'PBKDF2':
-      bits = await require('internal/crypto/pbkdf2')
+      bits = await require('../../internal/crypto/pbkdf2')
         .pbkdf2DeriveBits(algorithm, baseKey, length);
       break;
     default:
@@ -331,7 +331,7 @@ async function exportKeySpki(key) {
       // Fall through
     case 'RSA-OAEP':
       if (key.type === 'public') {
-        return require('internal/crypto/rsa')
+        return require('../../internal/crypto/rsa')
           .rsaExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
@@ -339,7 +339,7 @@ async function exportKeySpki(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'public') {
-        return require('internal/crypto/ec')
+        return require('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
@@ -351,7 +351,7 @@ async function exportKeySpki(key) {
       // Fall through
     case 'X448':
       if (key.type === 'public') {
-        return require('internal/crypto/cfrg')
+        return require('../../internal/crypto/cfrg')
           .cfrgExportKey(key, kWebCryptoKeyFormatSPKI);
       }
       break;
@@ -370,7 +370,7 @@ async function exportKeyPkcs8(key) {
       // Fall through
     case 'RSA-OAEP':
       if (key.type === 'private') {
-        return require('internal/crypto/rsa')
+        return require('../../internal/crypto/rsa')
           .rsaExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
@@ -378,7 +378,7 @@ async function exportKeyPkcs8(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'private') {
-        return require('internal/crypto/ec')
+        return require('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
@@ -390,7 +390,7 @@ async function exportKeyPkcs8(key) {
       // Fall through
     case 'X448':
       if (key.type === 'private') {
-        return require('internal/crypto/cfrg')
+        return require('../../internal/crypto/cfrg')
           .cfrgExportKey(key, kWebCryptoKeyFormatPKCS8);
       }
       break;
@@ -407,7 +407,7 @@ async function exportKeyRaw(key) {
       // Fall through
     case 'ECDH':
       if (key.type === 'public') {
-        return require('internal/crypto/ec')
+        return require('../../internal/crypto/ec')
           .ecExportKey(key, kWebCryptoKeyFormatRaw);
       }
       break;
@@ -419,7 +419,7 @@ async function exportKeyRaw(key) {
       // Fall through
     case 'X448':
       if (key.type === 'public') {
-        return require('internal/crypto/cfrg')
+        return require('../../internal/crypto/cfrg')
           .cfrgExportKey(key, kWebCryptoKeyFormatRaw);
       }
       break;
@@ -483,7 +483,7 @@ async function exportKeyJWK(key) {
     case 'AES-GCM':
       // Fall through
     case 'AES-KW':
-      jwk.alg = require('internal/crypto/aes')
+      jwk.alg = require('../../internal/crypto/aes')
         .getAlgorithmName(key.algorithm.name, key.algorithm.length);
       return jwk;
     case 'HMAC':
@@ -501,7 +501,7 @@ async function exportKeyJWK(key) {
 async function exportKey(format, key) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'exportKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 2, { prefix });
   format = webidl.converters.KeyFormat(format, {
@@ -578,7 +578,7 @@ async function importKey(
   keyUsages) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'importKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 4, { prefix });
   format = webidl.converters.KeyFormat(format, {
@@ -611,13 +611,13 @@ async function importKey(
     case 'RSA-PSS':
       // Fall through
     case 'RSA-OAEP':
-      result = await require('internal/crypto/rsa')
+      result = await require('../../internal/crypto/rsa')
         .rsaImportKey(format, keyData, algorithm, extractable, keyUsages);
       break;
     case 'ECDSA':
       // Fall through
     case 'ECDH':
-      result = await require('internal/crypto/ec')
+      result = await require('../../internal/crypto/ec')
         .ecImportKey(format, keyData, algorithm, extractable, keyUsages);
       break;
     case 'Ed25519':
@@ -627,11 +627,11 @@ async function importKey(
     case 'X25519':
       // Fall through
     case 'X448':
-      result = await require('internal/crypto/cfrg')
+      result = await require('../../internal/crypto/cfrg')
         .cfrgImportKey(format, keyData, algorithm, extractable, keyUsages);
       break;
     case 'HMAC':
-      result = await require('internal/crypto/mac')
+      result = await require('../../internal/crypto/mac')
         .hmacImportKey(format, keyData, algorithm, extractable, keyUsages);
       break;
     case 'AES-CTR':
@@ -641,7 +641,7 @@ async function importKey(
     case 'AES-GCM':
       // Fall through
     case 'AES-KW':
-      result = await require('internal/crypto/aes')
+      result = await require('../../internal/crypto/aes')
         .aesImportKey(algorithm, format, keyData, extractable, keyUsages);
       break;
     case 'HKDF':
@@ -672,7 +672,7 @@ async function importKey(
 async function wrapKey(format, key, wrappingKey, algorithm) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'wrapKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 4, { prefix });
   format = webidl.converters.KeyFormat(format, {
@@ -732,7 +732,7 @@ async function unwrapKey(
   keyUsages) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'unwrapKey' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 7, { prefix });
   format = webidl.converters.KeyFormat(format, {
@@ -817,19 +817,19 @@ function signVerify(algorithm, key, data, signature) {
     case 'RSA-PSS':
       // Fall through
     case 'RSASSA-PKCS1-v1_5':
-      return require('internal/crypto/rsa')
+      return require('../../internal/crypto/rsa')
         .rsaSignVerify(key, data, algorithm, signature);
     case 'ECDSA':
-      return require('internal/crypto/ec')
+      return require('../../internal/crypto/ec')
         .ecdsaSignVerify(key, data, algorithm, signature);
     case 'Ed25519':
       // Fall through
     case 'Ed448':
       // Fall through
-      return require('internal/crypto/cfrg')
+      return require('../../internal/crypto/cfrg')
         .eddsaSignVerify(key, data, algorithm, signature);
     case 'HMAC':
-      return require('internal/crypto/mac')
+      return require('../../internal/crypto/mac')
         .hmacSignVerify(key, data, algorithm, signature);
   }
   throw lazyDOMException('Unrecognized algorithm name', 'NotSupportedError');
@@ -838,7 +838,7 @@ function signVerify(algorithm, key, data, signature) {
 async function sign(algorithm, key, data) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'sign' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 3, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -860,7 +860,7 @@ async function sign(algorithm, key, data) {
 async function verify(algorithm, key, signature, data) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'verify' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 4, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -903,18 +903,18 @@ async function cipherOrWrap(mode, algorithm, key, data, op) {
 
   switch (algorithm.name) {
     case 'RSA-OAEP':
-      return require('internal/crypto/rsa')
+      return require('../../internal/crypto/rsa')
         .rsaCipher(mode, key, data, algorithm);
     case 'AES-CTR':
       // Fall through
     case 'AES-CBC':
       // Fall through
     case 'AES-GCM':
-      return require('internal/crypto/aes')
+      return require('../../internal/crypto/aes')
         .aesCipher(mode, key, data, algorithm);
     case 'AES-KW':
       if (op === 'wrapKey' || op === 'unwrapKey') {
-        return require('internal/crypto/aes')
+        return require('../../internal/crypto/aes')
           .aesCipher(mode, key, data, algorithm);
       }
   }
@@ -924,7 +924,7 @@ async function cipherOrWrap(mode, algorithm, key, data, op) {
 async function encrypt(algorithm, key, data) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'encrypt' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 3, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -947,7 +947,7 @@ async function encrypt(algorithm, key, data) {
 async function decrypt(algorithm, key, data) {
   if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'decrypt' on 'SubtleCrypto'";
   webidl.requiredArguments(arguments.length, 3, { prefix });
   algorithm = webidl.converters.AlgorithmIdentifier(algorithm, {
@@ -992,7 +992,7 @@ const crypto = ReflectConstruct(function() {}, [], Crypto);
 function getRandomValues(array) {
   if (this !== crypto) throw new ERR_INVALID_THIS('Crypto');
 
-  webidl ??= require('internal/crypto/webidl');
+  webidl ??= require('../../internal/crypto/webidl');
   const prefix = "Failed to execute 'getRandomValues' on 'Crypto'";
   webidl.requiredArguments(arguments.length, 1, { prefix });
 
diff --git a/lib/internal/crypto/webidl.js b/lib/internal/crypto/webidl.js
index 61a4cfe433..80384d204f 100644
--- a/lib/internal/crypto/webidl.js
+++ b/lib/internal/crypto/webidl.js
@@ -36,9 +36,9 @@ const {
 const {
   kEmptyObject,
   setOwnProperty,
-} = require('internal/util');
-const { CryptoKey } = require('internal/crypto/webcrypto');
-const { getDataViewOrTypedArrayBuffer } = require('internal/crypto/util');
+} = require('../../internal/util');
+const { CryptoKey } = require('../../internal/crypto/webcrypto');
+const { getDataViewOrTypedArrayBuffer } = require('../../internal/crypto/util');
 
 function codedTypeError(message, errorProperties = kEmptyObject) {
   // eslint-disable-next-line no-restricted-syntax
diff --git a/lib/internal/crypto/x509.js b/lib/internal/crypto/x509.js
index 30005390a4..5d3c6aa707 100644
--- a/lib/internal/crypto/x509.js
+++ b/lib/internal/crypto/x509.js
@@ -19,43 +19,43 @@ const {
 const {
   PublicKeyObject,
   isKeyObject,
-} = require('internal/crypto/keys');
+} = require('../../internal/crypto/keys');
 
 const {
   customInspectSymbol: kInspect,
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   validateBoolean,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 const { Buffer } = require('buffer');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   kHandle,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 let lazyTranslatePeerCertificate;
 
diff --git a/lib/internal/debugger/inspect.js b/lib/internal/debugger/inspect.js
index 5e93699f8b..192b7b6053 100644
--- a/lib/internal/debugger/inspect.js
+++ b/lib/internal/debugger/inspect.js
@@ -30,17 +30,17 @@ const {
 } = require('timers/promises');
 const {
   AbortController,
-} = require('internal/abort_controller');
+} = require('../../internal/abort_controller');
 
 const { 0: InspectClient, 1: createRepl } =
     [
-      require('internal/debugger/inspect_client'),
-      require('internal/debugger/inspect_repl'),
+      require('../../internal/debugger/inspect_client'),
+      require('../../internal/debugger/inspect_repl'),
     ];
 
 const debuglog = util.debuglog('inspect');
 
-const { ERR_DEBUGGER_STARTUP_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_STARTUP_ERROR } = require('../../internal/errors').codes;
 const {
   exitCodes: {
     kGenericUserError,
diff --git a/lib/internal/debugger/inspect_client.js b/lib/internal/debugger/inspect_client.js
index 315617bf08..7de3f2266d 100644
--- a/lib/internal/debugger/inspect_client.js
+++ b/lib/internal/debugger/inspect_client.js
@@ -12,12 +12,12 @@ const {
 
 const Buffer = require('buffer').Buffer;
 const crypto = require('crypto');
-const { ERR_DEBUGGER_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_ERROR } = require('../../internal/errors').codes;
 const { EventEmitter } = require('events');
 const http = require('http');
-const { URL } = require('internal/url');
+const { URL } = require('../../internal/url');
 
-const debuglog = require('internal/util/debuglog').debuglog('inspect');
+const debuglog = require('../../internal/util/debuglog').debuglog('inspect');
 
 const kOpCodeText = 0x1;
 const kOpCodeClose = 0x8;
diff --git a/lib/internal/debugger/inspect_repl.js b/lib/internal/debugger/inspect_repl.js
index b4f454152d..ae10f98562 100644
--- a/lib/internal/debugger/inspect_repl.js
+++ b/lib/internal/debugger/inspect_repl.js
@@ -44,19 +44,19 @@ const {
   StringPrototypeTrim,
 } = primordials;
 
-const { ERR_DEBUGGER_ERROR } = require('internal/errors').codes;
+const { ERR_DEBUGGER_ERROR } = require('../../internal/errors').codes;
 
-const { validateString, validateNumber } = require('internal/validators');
+const { validateString, validateNumber } = require('../../internal/validators');
 
 const FS = require('fs');
 const Path = require('path');
 const Repl = require('repl');
 const vm = require('vm');
-const { fileURLToPath } = require('internal/url');
+const { fileURLToPath } = require('../../internal/url');
 
-const { customInspectSymbol, SideEffectFreeRegExpPrototypeSymbolReplace } = require('internal/util');
-const { inspect: utilInspect } = require('internal/util/inspect');
-const debuglog = require('internal/util/debuglog').debuglog('inspect');
+const { customInspectSymbol, SideEffectFreeRegExpPrototypeSymbolReplace } = require('../../internal/util');
+const { inspect: utilInspect } = require('../../internal/util/inspect');
+const debuglog = require('../../internal/util/debuglog').debuglog('inspect');
 
 const SHORTCUTS = {
   cont: 'c',
diff --git a/lib/internal/dgram.js b/lib/internal/dgram.js
index 435adaeaec..6c6f3a5d47 100644
--- a/lib/internal/dgram.js
+++ b/lib/internal/dgram.js
@@ -5,13 +5,13 @@ const {
   Symbol,
 } = primordials;
 
-const { codes } = require('internal/errors');
+const { codes } = require('../internal/errors');
 const { UDP } = internalBinding('udp_wrap');
-const { guessHandleType } = require('internal/util');
+const { guessHandleType } = require('../internal/util');
 const {
   isInt32,
   validateFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 const { UV_EINVAL } = internalBinding('uv');
 const {
   ERR_SOCKET_BAD_TYPE,
diff --git a/lib/internal/dns/callback_resolver.js b/lib/internal/dns/callback_resolver.js
index e57a597c08..45e9b1e808 100644
--- a/lib/internal/dns/callback_resolver.js
+++ b/lib/internal/dns/callback_resolver.js
@@ -13,16 +13,16 @@ const {
     ERR_INVALID_ARG_VALUE,
   },
   dnsException,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   createResolverClass,
-} = require('internal/dns/utils');
+} = require('../../internal/dns/utils');
 
 const {
   validateFunction,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   QueryReqWrap,
@@ -32,7 +32,7 @@ const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
 const kPerfHooksDnsLookupResolveContext = Symbol('kPerfHooksDnsLookupResolveContext');
 
diff --git a/lib/internal/dns/promises.js b/lib/internal/dns/promises.js
index 1169b2735d..cc464040b2 100644
--- a/lib/internal/dns/promises.js
+++ b/lib/internal/dns/promises.js
@@ -17,7 +17,7 @@ const {
   getDefaultResultOrder,
   setDefaultResultOrder,
   setDefaultResolver,
-} = require('internal/dns/utils');
+} = require('../../internal/dns/utils');
 
 const {
   NODATA,
@@ -45,8 +45,8 @@ const {
   ADDRGETNETWORKPARAMS,
   CANCELLED,
 } = dnsErrorCodes;
-const { codes, dnsException } = require('internal/errors');
-const { isIP } = require('internal/net');
+const { codes, dnsException } = require('../../internal/errors');
+const { isIP } = require('../../internal/net');
 const {
   getaddrinfo,
   getnameinfo,
@@ -65,7 +65,7 @@ const {
   validateOneOf,
   validatePort,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const kPerfHooksDnsLookupContext = Symbol('kPerfHooksDnsLookupContext');
 const kPerfHooksDnsLookupServiceContext = Symbol('kPerfHooksDnsLookupServiceContext');
@@ -75,7 +75,7 @@ const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
 function onlookup(err, addresses) {
   if (err) {
diff --git a/lib/internal/dns/utils.js b/lib/internal/dns/utils.js
index fa8f0b8cf1..1515f2c332 100644
--- a/lib/internal/dns/utils.js
+++ b/lib/internal/dns/utils.js
@@ -12,15 +12,15 @@ const {
   Symbol,
 } = primordials;
 
-const errors = require('internal/errors');
-const { isIP } = require('internal/net');
-const { getOptionValue } = require('internal/options');
+const errors = require('../../internal/errors');
+const { isIP } = require('../../internal/net');
+const { getOptionValue } = require('../../internal/options');
 const {
   validateArray,
   validateInt32,
   validateOneOf,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 let binding;
 function lazyBinding() {
   binding ??= internalBinding('cares_wrap');
@@ -41,7 +41,7 @@ const {
     addDeserializeCallback,
     isBuildingSnapshot,
   },
-} = require('internal/v8/startup_snapshot');
+} = require('../../internal/v8/startup_snapshot');
 
 function validateTimeout(options) {
   const { timeout = -1 } = { ...options };
diff --git a/lib/internal/encoding.js b/lib/internal/encoding.js
index 6ed89b3f9b..9c91d20c4b 100644
--- a/lib/internal/encoding.js
+++ b/lib/internal/encoding.js
@@ -21,7 +21,7 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_THIS,
   ERR_NO_ICU,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 const kHandle = Symbol('handle');
 const kFlags = Symbol('flags');
 const kEncoding = Symbol('encoding');
@@ -36,13 +36,13 @@ const {
   customInspectSymbol: inspect,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
   isUint8Array,
-} = require('internal/util/types');
+} = require('../internal/util/types');
 
 const {
   validateString,
@@ -50,7 +50,7 @@ const {
   kValidateObjectAllowNullable,
   kValidateObjectAllowArray,
   kValidateObjectAllowFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 const binding = internalBinding('encoding_binding');
 const {
   encodeInto,
@@ -376,7 +376,7 @@ class TextEncoder {
     } };
     obj.encoding = this.encoding;
     // Lazy to avoid circular dependency
-    return require('internal/util/inspect').inspect(obj, opts);
+    return require('../internal/util/inspect').inspect(obj, opts);
   }
 }
 
@@ -589,7 +589,7 @@ const sharedProperties = ObjectGetOwnPropertyDescriptors({
       obj[kHandle] = this[kHandle];
     }
     // Lazy to avoid circular dependency
-    const { inspect } = require('internal/util/inspect');
+    const { inspect } = require('../internal/util/inspect');
     return `${constructor.name} ${inspect(obj)}`;
   },
 });
diff --git a/lib/internal/error_serdes.js b/lib/internal/error_serdes.js
index f88dd09cb0..c38bb486fb 100644
--- a/lib/internal/error_serdes.js
+++ b/lib/internal/error_serdes.js
@@ -103,7 +103,7 @@ function GetName(object) {
 let internalUtilInspect;
 function inspect(...args) {
   if (!internalUtilInspect) {
-    internalUtilInspect = require('internal/util/inspect');
+    internalUtilInspect = require('../internal/util/inspect');
   }
   return internalUtilInspect.inspect(...args);
 }
diff --git a/lib/internal/errors.js b/lib/internal/errors.js
index 76ce786704..98866a77fb 100644
--- a/lib/internal/errors.js
+++ b/lib/internal/errors.js
@@ -176,26 +176,26 @@ const aggregateErrors = hideStackFrames((errors, message, code) => {
   return err;
 });
 
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 
 // Lazily loaded
 let util;
 
 let internalUtil = null;
 function lazyInternalUtil() {
-  internalUtil ??= require('internal/util');
+  internalUtil ??= require('../internal/util');
   return internalUtil;
 }
 
 let internalUtilInspect = null;
 function lazyInternalUtilInspect() {
-  internalUtilInspect ??= require('internal/util/inspect');
+  internalUtilInspect ??= require('../internal/util/inspect');
   return internalUtilInspect;
 }
 
 let utilColors;
 function lazyUtilColors() {
-  utilColors ??= require('internal/util/colors');
+  utilColors ??= require('../internal/util/colors');
   return utilColors;
 }
 
@@ -208,7 +208,7 @@ function lazyBuffer() {
 function isErrorStackTraceLimitWritable() {
   // Do no touch Error.stackTraceLimit as V8 would attempt to install
   // it again during deserialization.
-  if (require('internal/v8/startup_snapshot').namespace.isBuildingSnapshot()) {
+  if (require('../internal/v8/startup_snapshot').namespace.isBuildingSnapshot()) {
     return false;
   }
 
diff --git a/lib/internal/event_target.js b/lib/internal/event_target.js
index 0236f3a53c..989691e16b 100644
--- a/lib/internal/event_target.js
+++ b/lib/internal/event_target.js
@@ -29,7 +29,7 @@ const {
     ERR_MISSING_ARGS,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 const {
   validateAbortSignal,
   validateObject,
@@ -37,15 +37,15 @@ const {
   validateInternalField,
   kValidateObjectAllowArray,
   kValidateObjectAllowFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   customInspectSymbol,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../internal/util');
 const { inspect } = require('util');
-const webidl = require('internal/webidl');
+const webidl = require('../internal/webidl');
 
 const kIsEventTarget = SymbolFor('nodejs.event_target');
 const kIsNodeEventTarget = Symbol('kIsNodeEventTarget');
@@ -72,7 +72,7 @@ const kRemoveListener = Symbol('kRemoveListener');
 const kIsNodeStyleListener = Symbol('kIsNodeStyleListener');
 const kTrustEvent = Symbol('kTrustEvent');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../internal/perf/utils');
 
 const kType = Symbol('type');
 const kDetail = Symbol('detail');
diff --git a/lib/internal/file.js b/lib/internal/file.js
index 1fc08c45a9..eee4f4d8dd 100644
--- a/lib/internal/file.js
+++ b/lib/internal/file.js
@@ -9,24 +9,24 @@ const {
 
 const {
   Blob,
-} = require('internal/blob');
+} = require('../internal/blob');
 
 const {
   customInspectSymbol: kInspect,
   kEnumerableProperty,
   kEmptyObject,
   toUSVString,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   codes: {
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   inspect,
-} = require('internal/util/inspect');
+} = require('../internal/util/inspect');
 
 class File extends Blob {
   /** @type {string} */
diff --git a/lib/internal/freeze_intrinsics.js b/lib/internal/freeze_intrinsics.js
index 2017b8f66e..c27db35cd0 100644
--- a/lib/internal/freeze_intrinsics.js
+++ b/lib/internal/freeze_intrinsics.js
@@ -135,8 +135,8 @@ const {
 } = globalThis;
 
 module.exports = function() {
-  const { Console } = require('internal/console/constructor');
-  const console = require('internal/console/global');
+  const { Console } = require('../internal/console/constructor');
+  const console = require('../internal/console/global');
   const {
     clearImmediate,
     clearInterval,
diff --git a/lib/internal/fs/cp/cp-sync.js b/lib/internal/fs/cp/cp-sync.js
index 348d45adcd..c45fa48c96 100644
--- a/lib/internal/fs/cp/cp-sync.js
+++ b/lib/internal/fs/cp/cp-sync.js
@@ -2,8 +2,8 @@
 
 // This file is a modified version of the fs-extra's copySync method.
 
-const { areIdentical, isSrcSubdir } = require('internal/fs/cp/cp');
-const { codes } = require('internal/errors');
+const { areIdentical, isSrcSubdir } = require('../../../internal/fs/cp/cp');
+const { codes } = require('../../../internal/errors');
 const {
   os: {
     errno: {
diff --git a/lib/internal/fs/cp/cp.js b/lib/internal/fs/cp/cp.js
index 130bf98ae7..ebaab969fb 100644
--- a/lib/internal/fs/cp/cp.js
+++ b/lib/internal/fs/cp/cp.js
@@ -23,7 +23,7 @@ const {
     ERR_FS_CP_UNKNOWN,
     ERR_FS_EISDIR,
   },
-} = require('internal/errors');
+} = require('../../../internal/errors');
 const {
   os: {
     errno: {
diff --git a/lib/internal/fs/dir.js b/lib/internal/fs/dir.js
index 1118ff5f67..17a164e65b 100644
--- a/lib/internal/fs/dir.js
+++ b/lib/internal/fs/dir.js
@@ -19,20 +19,20 @@ const {
     ERR_DIR_CONCURRENT_OPERATION,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const { FSReqCallback } = binding;
-const internalUtil = require('internal/util');
+const internalUtil = require('../../internal/util');
 const {
   getDirent,
   getOptions,
   getValidatedPath,
   handleErrorFromBinding,
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 const {
   validateFunction,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const kDirHandle = Symbol('kDirHandle');
 const kDirPath = Symbol('kDirPath');
diff --git a/lib/internal/fs/glob.js b/lib/internal/fs/glob.js
index 323ef2a25d..0a91c9b570 100644
--- a/lib/internal/fs/glob.js
+++ b/lib/internal/fs/glob.js
@@ -4,11 +4,11 @@ const { join, resolve } = require('path');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   ArrayFrom,
@@ -25,7 +25,7 @@ const {
 
 let minimatch;
 function lazyMinimatch() {
-  minimatch ??= require('internal/deps/minimatch/index');
+  minimatch ??= require('../../internal/deps/minimatch/index');
   return minimatch;
 }
 
diff --git a/lib/internal/fs/promises.js b/lib/internal/fs/promises.js
index f58dfae182..563328cbca 100644
--- a/lib/internal/fs/promises.js
+++ b/lib/internal/fs/promises.js
@@ -39,9 +39,9 @@ const {
   },
   AbortError,
   aggregateTwoErrors,
-} = require('internal/errors');
-const { isArrayBufferView } = require('internal/util/types');
-const { rimrafPromises } = require('internal/fs/rimraf');
+} = require('../../internal/errors');
+const { isArrayBufferView } = require('../../internal/util/types');
+const { rimrafPromises } = require('../../internal/fs/rimraf');
 const {
   constants: {
     kIoMaxLength,
@@ -71,8 +71,8 @@ const {
   validateRmdirOptions,
   validateStringAfterArrayBufferView,
   warnOnNonPortableTemplate,
-} = require('internal/fs/utils');
-const { opendir } = require('internal/fs/dir');
+} = require('../../internal/fs/utils');
+const { opendir } = require('../../internal/fs/dir');
 const {
   parseFileMode,
   validateAbortSignal,
@@ -83,19 +83,19 @@ const {
   validateObject,
   validateString,
   kValidateObjectAllowNullable,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const pathModule = require('path');
 const {
   kEmptyObject,
   lazyDOMException,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 const EventEmitter = require('events');
 const { StringDecoder } = require('string_decoder');
-const { kFSWatchStart, watch } = require('internal/fs/watchers');
-const nonNativeWatcher = require('internal/fs/recursive_watch');
-const { isIterable } = require('internal/streams/utils');
-const assert = require('internal/assert');
+const { kFSWatchStart, watch } = require('../../internal/fs/watchers');
+const nonNativeWatcher = require('../../internal/fs/recursive_watch');
+const { isIterable } = require('../../internal/streams/utils');
+const assert = require('../../internal/assert');
 
 const kHandle = Symbol('kHandle');
 const kFd = Symbol('kFd');
@@ -108,10 +108,10 @@ const kUnref = Symbol('kUnref');
 const kLocked = Symbol('kLocked');
 
 const { kUsePromises } = binding;
-const { Interface } = require('internal/readline/interface');
+const { Interface } = require('../../internal/readline/interface');
 const {
   kDeserialize, kTransfer, kTransferList, markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const getDirectoryEntriesPromise = promisify(getDirents);
 const validateRmOptionsPromise = promisify(validateRmOptions);
@@ -121,13 +121,13 @@ const isOSX = process.platform === 'darwin';
 
 let cpPromises;
 function lazyLoadCpPromises() {
-  return cpPromises ??= require('internal/fs/cp/cp').cpFn;
+  return cpPromises ??= require('../../internal/fs/cp/cp').cpFn;
 }
 
 // Lazy loaded to avoid circular dependency.
 let fsStreams;
 function lazyFsStreams() {
-  return fsStreams ??= require('internal/fs/streams');
+  return fsStreams ??= require('../../internal/fs/streams');
 }
 
 class FileHandle extends EventEmitter {
@@ -278,7 +278,7 @@ class FileHandle extends EventEmitter {
     if (options.type !== 'bytes') {
       const {
         newReadableStreamFromStreamBase,
-      } = require('internal/webstreams/adapters');
+      } = require('../../internal/webstreams/adapters');
       readable = newReadableStreamFromStreamBase(
         this[kHandle],
         undefined,
@@ -286,7 +286,7 @@ class FileHandle extends EventEmitter {
     } else {
       const {
         ReadableStream,
-      } = require('internal/webstreams/readablestream');
+      } = require('../../internal/webstreams/readablestream');
 
       const readFn = FunctionPrototypeBind(this.read, this);
       const ondone = FunctionPrototypeBind(this[kUnref], this);
@@ -315,7 +315,7 @@ class FileHandle extends EventEmitter {
 
     const {
       readableStreamCancel,
-    } = require('internal/webstreams/readablestream');
+    } = require('../../internal/webstreams/readablestream');
     this[kRef]();
     this.once('close', () => {
       readableStreamCancel(readable);
diff --git a/lib/internal/fs/read/context.js b/lib/internal/fs/read/context.js
index b1a5d6ae03..2cd18e09a8 100644
--- a/lib/internal/fs/read/context.js
+++ b/lib/internal/fs/read/context.js
@@ -11,7 +11,7 @@ const {
     kReadFileBufferLength,
     kReadFileUnknownBufferLength,
   },
-} = require('internal/fs/utils');
+} = require('../../../internal/fs/utils');
 
 const { Buffer } = require('buffer');
 
@@ -20,7 +20,7 @@ const { FSReqCallback, close, read } = internalBinding('fs');
 const {
   AbortError,
   aggregateTwoErrors,
-} = require('internal/errors');
+} = require('../../../internal/errors');
 
 function readFileAfterRead(err, bytesRead) {
   const context = this.context;
diff --git a/lib/internal/fs/recursive_watch.js b/lib/internal/fs/recursive_watch.js
index 54298832da..caadfbba60 100644
--- a/lib/internal/fs/recursive_watch.js
+++ b/lib/internal/fs/recursive_watch.js
@@ -12,17 +12,17 @@ const {
 } = primordials;
 
 const { EventEmitter } = require('events');
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const {
   AbortError,
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
-const { getValidatedPath } = require('internal/fs/utils');
-const { kFSWatchStart, StatWatcher } = require('internal/fs/watchers');
-const { kEmptyObject } = require('internal/util');
-const { validateBoolean, validateAbortSignal } = require('internal/validators');
+} = require('../../internal/errors');
+const { getValidatedPath } = require('../../internal/fs/utils');
+const { kFSWatchStart, StatWatcher } = require('../../internal/fs/watchers');
+const { kEmptyObject } = require('../../internal/util');
+const { validateBoolean, validateAbortSignal } = require('../../internal/validators');
 const {
   basename: pathBasename,
   join: pathJoin,
@@ -266,7 +266,7 @@ class FSWatcher extends EventEmitter {
       } : (resolve, reject) => {
         const onAbort = () => reject(new AbortError(undefined, { cause: signal.reason }));
         if (signal.aborted) return onAbort();
-        kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+        kResistStopPropagation ??= require('../../internal/event_target').kResistStopPropagation;
         signal.addEventListener('abort', onAbort, { __proto__: null, once: true, [kResistStopPropagation]: true });
         this.once('change', (eventType, filename) => {
           signal.removeEventListener('abort', onAbort);
diff --git a/lib/internal/fs/rimraf.js b/lib/internal/fs/rimraf.js
index 877f238011..ab856a205a 100644
--- a/lib/internal/fs/rimraf.js
+++ b/lib/internal/fs/rimraf.js
@@ -30,7 +30,7 @@ const {
 } = fs;
 const { sep } = require('path');
 const { setTimeout } = require('timers');
-const { sleep } = require('internal/util');
+const { sleep } = require('../../internal/util');
 const notEmptyErrorCodes = new SafeSet(['ENOTEMPTY', 'EEXIST', 'EPERM']);
 const retryErrorCodes = new SafeSet(
   ['EBUSY', 'EMFILE', 'ENFILE', 'ENOTEMPTY', 'EPERM']);
diff --git a/lib/internal/fs/streams.js b/lib/internal/fs/streams.js
index 43f06d0104..1ca6a4fe21 100644
--- a/lib/internal/fs/streams.js
+++ b/lib/internal/fs/streams.js
@@ -17,28 +17,28 @@ const {
   ERR_OUT_OF_RANGE,
   ERR_STREAM_DESTROYED,
   ERR_SYSTEM_ERROR,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const {
   deprecate,
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   validateBoolean,
   validateFunction,
   validateInteger,
-} = require('internal/validators');
-const { errorOrDestroy } = require('internal/streams/destroy');
+} = require('../../internal/validators');
+const { errorOrDestroy } = require('../../internal/streams/destroy');
 const fs = require('fs');
-const { kRef, kUnref, FileHandle } = require('internal/fs/promises');
+const { kRef, kUnref, FileHandle } = require('../../internal/fs/promises');
 const { Buffer } = require('buffer');
 const {
   copyObject,
   getOptions,
   getValidatedFd,
   validatePath,
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 const { Readable, Writable, finished } = require('stream');
-const { toPathIfFileURL } = require('internal/url');
+const { toPathIfFileURL } = require('../../internal/url');
 const kIoDone = Symbol('kIoDone');
 const kIsPerformingIO = Symbol('kIsPerformingIO');
 
diff --git a/lib/internal/fs/sync_write_stream.js b/lib/internal/fs/sync_write_stream.js
index f8fbade883..12f815b005 100644
--- a/lib/internal/fs/sync_write_stream.js
+++ b/lib/internal/fs/sync_write_stream.js
@@ -4,7 +4,7 @@ const {
   ObjectSetPrototypeOf,
   ReflectApply,
 } = primordials;
-const { kEmptyObject } = require('internal/util');
+const { kEmptyObject } = require('../../internal/util');
 
 const { Writable } = require('stream');
 const { closeSync, writeSync } = require('fs');
diff --git a/lib/internal/fs/utils.js b/lib/internal/fs/utils.js
index 611b6c2420..d9c30258f5 100644
--- a/lib/internal/fs/utils.js
+++ b/lib/internal/fs/utils.js
@@ -25,7 +25,7 @@ const {
   uncurryThis,
 } = primordials;
 
-const permission = require('internal/process/permission');
+const permission = require('../../internal/process/permission');
 
 const { Buffer } = require('buffer');
 const {
@@ -39,18 +39,18 @@ const {
   },
   hideStackFrames,
   uvException,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   isArrayBufferView,
   isBigInt64Array,
   isDate,
   isUint8Array,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 const {
   kEmptyObject,
   once,
-} = require('internal/util');
-const { toPathIfFileURL } = require('internal/url');
+} = require('../../internal/util');
+const { toPathIfFileURL } = require('../../internal/url');
 const {
   validateAbortSignal,
   validateBoolean,
@@ -59,11 +59,11 @@ const {
   validateInteger,
   validateObject,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const pathModule = require('path');
 const kType = Symbol('type');
 const kStats = Symbol('stats');
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const {
   fs: {
diff --git a/lib/internal/fs/watchers.js b/lib/internal/fs/watchers.js
index 99212fa713..75cf68e54a 100644
--- a/lib/internal/fs/watchers.js
+++ b/lib/internal/fs/watchers.js
@@ -13,11 +13,11 @@ const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   createDeferredPromise,
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   kFsStatsFieldsNumber,
@@ -31,12 +31,12 @@ const { EventEmitter } = require('events');
 const {
   getStatsFromBinding,
   getValidatedPath,
-} = require('internal/fs/utils');
+} = require('../../internal/fs/utils');
 
 const {
   defaultTriggerAsyncIdScope,
   symbols: { owner_symbol },
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 
 const { toNamespacedPath } = require('path');
 
@@ -45,7 +45,7 @@ const {
   validateBoolean,
   validateObject,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Buffer: {
@@ -53,7 +53,7 @@ const {
   },
 } = require('buffer');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kOldStatus = Symbol('kOldStatus');
 const kUseBigint = Symbol('kUseBigint');
@@ -333,7 +333,7 @@ async function* watch(filename, options = kEmptyObject) {
 
   try {
     if (signal) {
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../../internal/event_target').kResistStopPropagation;
       signal.addEventListener('abort', oncancel, { __proto__: null, once: true, [kResistStopPropagation]: true });
     }
     handle.onchange = (status, eventType, filename) => {
diff --git a/lib/internal/heap_utils.js b/lib/internal/heap_utils.js
index 3e789845c7..501cdf9fa5 100644
--- a/lib/internal/heap_utils.js
+++ b/lib/internal/heap_utils.js
@@ -6,11 +6,11 @@ const {
 const {
   kUpdateTimer,
   onStreamRead,
-} = require('internal/stream_base_commons');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+} = require('../internal/stream_base_commons');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
 const { Readable } = require('stream');
-const { validateObject, validateBoolean } = require('internal/validators');
-const { kEmptyObject } = require('internal/util');
+const { validateObject, validateBoolean } = require('../internal/validators');
+const { kEmptyObject } = require('../internal/util');
 
 const kHandle = Symbol('kHandle');
 
diff --git a/lib/internal/histogram.js b/lib/internal/histogram.js
index 079fbce50d..9ebc030db6 100644
--- a/lib/internal/histogram.js
+++ b/lib/internal/histogram.js
@@ -17,7 +17,7 @@ const {
 const {
   customInspectSymbol: kInspect,
   kEmptyObject,
-} = require('internal/util');
+} = require('../internal/util');
 
 const { inspect } = require('util');
 
@@ -29,13 +29,13 @@ const {
     ERR_INVALID_THIS,
     ERR_OUT_OF_RANGE,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateInteger,
   validateNumber,
   validateObject,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const kDestroy = Symbol('kDestroy');
 const kHandle = Symbol('kHandle');
@@ -46,7 +46,7 @@ const {
   kClone,
   kDeserialize,
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 function isHistogram(object) {
   return object?.[kHandle] !== undefined;
diff --git a/lib/internal/http.js b/lib/internal/http.js
index b20b3cd229..f2fba6234b 100644
--- a/lib/internal/http.js
+++ b/lib/internal/http.js
@@ -7,12 +7,12 @@ const {
   DatePrototypeToUTCString,
 } = primordials;
 
-const { setUnrefTimeout } = require('internal/timers');
+const { setUnrefTimeout } = require('../internal/timers');
 const { trace, isTraceCategoryEnabled } = internalBinding('trace_events');
 const {
   CHAR_LOWERCASE_B,
   CHAR_LOWERCASE_E,
-} = require('internal/constants');
+} = require('../internal/constants');
 
 let utcCache;
 
diff --git a/lib/internal/http2/compat.js b/lib/internal/http2/compat.js
index 2ab9c70ccd..f6ea82743d 100644
--- a/lib/internal/http2/compat.js
+++ b/lib/internal/http2/compat.js
@@ -18,7 +18,7 @@ const {
   Symbol,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const Stream = require('stream');
 const { Readable } = Stream;
 const {
@@ -51,20 +51,20 @@ const {
     ERR_STREAM_WRITE_AFTER_END,
   },
   hideStackFrames,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateFunction,
   validateString,
   validateLinkHeaderValue,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   kSocket,
   kRequest,
   kProxySocket,
   assertValidPseudoHeader,
   getAuthority,
-} = require('internal/http2/util');
+} = require('../../internal/http2/util');
 const { _checkIsHttpToken: checkIsHttpToken } = require('_http_common');
 
 const kBeginSend = Symbol('begin-send');
diff --git a/lib/internal/http2/core.js b/lib/internal/http2/core.js
index 1a689859af..e18238e4fd 100644
--- a/lib/internal/http2/core.js
+++ b/lib/internal/http2/core.js
@@ -38,7 +38,7 @@ const {
   customInspectSymbol: kInspect,
   kEmptyObject,
   promisify,
-} = require('internal/util');
+} = require('../../internal/util');
 
 assertCrypto();
 
@@ -46,8 +46,8 @@ const assert = require('assert');
 const EventEmitter = require('events');
 const fs = require('fs');
 const http = require('http');
-const { readUInt16BE, readUInt32BE } = require('internal/buffer');
-const { URL, getURLOrigin } = require('internal/url');
+const { readUInt16BE, readUInt32BE } = require('../../internal/buffer');
+const { URL, getURLOrigin } = require('../../internal/url');
 const net = require('net');
 const { Duplex } = require('stream');
 const tls = require('tls');
@@ -58,7 +58,7 @@ const {
   _checkIsHttpToken: checkIsHttpToken,
 } = require('_http_common');
 const { kServerResponse } = require('_http_server');
-const JSStreamSocket = require('internal/js_stream_socket');
+const JSStreamSocket = require('../../internal/js_stream_socket');
 
 const {
   defaultTriggerAsyncIdScope,
@@ -66,7 +66,7 @@ const {
     async_id_symbol,
     owner_symbol,
   },
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 const {
   aggregateTwoErrors,
   codes: {
@@ -117,7 +117,7 @@ const {
   },
   hideStackFrames,
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   isUint32,
   validateAbortSignal,
@@ -129,14 +129,14 @@ const {
   validateNumber,
   validateString,
   validateUint32,
-} = require('internal/validators');
-const fsPromisesInternal = require('internal/fs/promises');
-const { utcDate } = require('internal/http');
+} = require('../../internal/validators');
+const fsPromisesInternal = require('../../internal/fs/promises');
+const { utcDate } = require('../../internal/http');
 const {
   Http2ServerRequest,
   Http2ServerResponse,
   onServerStream,
-} = require('internal/http2/compat');
+} = require('../../internal/http2/compat');
 
 const {
   assertIsObject,
@@ -160,7 +160,7 @@ const {
   toHeaderObject,
   updateOptionsBuffer,
   updateSettingsBuffer,
-} = require('internal/http2/util');
+} = require('../../internal/http2/util');
 const {
   writeGeneric,
   writevGeneric,
@@ -171,10 +171,10 @@ const {
   kHandle,
   kSession,
   setStreamTimeout,
-} = require('internal/stream_base_commons');
-const { kTimeout } = require('internal/timers');
-const { isArrayBufferView } = require('internal/util/types');
-const { format } = require('internal/util/inspect');
+} = require('../../internal/stream_base_commons');
+const { kTimeout } = require('../../internal/timers');
+const { isArrayBufferView } = require('../../internal/util/types');
+const { format } = require('../../internal/util/inspect');
 
 const { FileHandle } = internalBinding('fs');
 const binding = internalBinding('http2');
@@ -187,7 +187,7 @@ const { UV_EOF } = internalBinding('uv');
 
 const { StreamPipe } = internalBinding('stream_pipe');
 const { _connectionListener: httpConnectionListener } = http;
-let debug = require('internal/util/debuglog').debuglog('http2', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('http2', (fn) => {
   debug = fn;
 });
 const debugEnabled = debug.enabled;
diff --git a/lib/internal/http2/util.js b/lib/internal/http2/util.js
index 6d4a7f94b3..d861c3027a 100644
--- a/lib/internal/http2/util.js
+++ b/lib/internal/http2/util.js
@@ -32,7 +32,7 @@ const {
   getMessage,
   hideStackFrames,
   kIsNodeError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const kSensitiveHeaders = Symbol('nodejs.http2.sensitiveHeaders');
 const kSocket = Symbol('socket');
diff --git a/lib/internal/js_stream_socket.js b/lib/internal/js_stream_socket.js
index 70d6d03069..c1ce65932b 100644
--- a/lib/internal/js_stream_socket.js
+++ b/lib/internal/js_stream_socket.js
@@ -5,18 +5,18 @@ const {
 } = primordials;
 
 const { setImmediate } = require('timers');
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 const { Socket } = require('net');
 const { JSStream } = internalBinding('js_stream');
 const uv = internalBinding('uv');
-let debug = require('internal/util/debuglog').debuglog(
+let debug = require('../internal/util/debuglog').debuglog(
   'stream_socket',
   (fn) => {
     debug = fn;
   },
 );
-const { owner_symbol } = require('internal/async_hooks').symbols;
-const { ERR_STREAM_WRAP } = require('internal/errors').codes;
+const { owner_symbol } = require('../internal/async_hooks').symbols;
+const { ERR_STREAM_WRAP } = require('../internal/errors').codes;
 
 const kCurrentWriteRequest = Symbol('kCurrentWriteRequest');
 const kCurrentShutdownRequest = Symbol('kCurrentShutdownRequest');
@@ -104,7 +104,7 @@ class JSStreamSocket extends Socket {
   }
 
   // Allow legacy requires in the test suite to keep working:
-  //   const { StreamWrap } = require('internal/js_stream_socket')
+  //   const { StreamWrap } = require('../internal/js_stream_socket')
   static get StreamWrap() {
     return JSStreamSocket;
   }
diff --git a/lib/internal/main/check_syntax.js b/lib/internal/main/check_syntax.js
index 9a19c1809f..e2260f1073 100644
--- a/lib/internal/main/check_syntax.js
+++ b/lib/internal/main/check_syntax.js
@@ -3,23 +3,23 @@
 // If user passed `-c` or `--check` arguments to Node, check its syntax
 // instead of actually running the file.
 
-const { getOptionValue } = require('internal/options');
-const { URL, pathToFileURL } = require('internal/url');
+const { getOptionValue } = require('../../internal/options');
+const { URL, pathToFileURL } = require('../../internal/url');
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 const {
   readStdin,
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
 const {
   Module: {
     _resolveFilename: resolveCJSModuleName,
   },
   wrapSafe,
-} = require('internal/modules/cjs/loader');
+} = require('../../internal/modules/cjs/loader');
 
 // TODO(joyeecheung): not every one of these are necessary
 prepareMainThreadExecution(true);
@@ -50,7 +50,7 @@ function loadESMIfNeeded(cb) {
   const hasModulePreImport = getOptionValue('--import').length > 0;
 
   if (hasModulePreImport) {
-    const { loadESM } = require('internal/process/esm_loader');
+    const { loadESM } = require('../../internal/process/esm_loader');
     loadESM(cb);
     return;
   }
@@ -63,8 +63,8 @@ async function checkSyntax(source, filename) {
     isModule = getOptionValue('--input-type') === 'module' ||
       (getOptionValue('--experimental-default-type') === 'module' && getOptionValue('--input-type') !== 'commonjs');
   } else {
-    const { defaultResolve } = require('internal/modules/esm/resolve');
-    const { defaultGetFormat } = require('internal/modules/esm/get_format');
+    const { defaultResolve } = require('../../internal/modules/esm/resolve');
+    const { defaultGetFormat } = require('../../internal/modules/esm/get_format');
     const { url } = await defaultResolve(pathToFileURL(filename).toString());
     const format = await defaultGetFormat(new URL(url));
     isModule = format === 'module';
@@ -76,7 +76,7 @@ async function checkSyntax(source, filename) {
     return;
   }
 
-  const { loadESM } = require('internal/process/esm_loader');
-  const { handleMainPromise } = require('internal/modules/run_main');
+  const { loadESM } = require('../../internal/process/esm_loader');
+  const { handleMainPromise } = require('../../internal/modules/run_main');
   handleMainPromise(loadESM((loader) => wrapSafe(filename, source)));
 }
diff --git a/lib/internal/main/embedding.js b/lib/internal/main/embedding.js
index a1076ccb82..604e2722fc 100644
--- a/lib/internal/main/embedding.js
+++ b/lib/internal/main/embedding.js
@@ -2,10 +2,10 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 const { isExperimentalSeaWarningNeeded } = internalBinding('sea');
-const { emitExperimentalWarning } = require('internal/util');
-const { embedderRequire, embedderRunCjs } = require('internal/util/embedding');
+const { emitExperimentalWarning } = require('../../internal/util');
+const { embedderRequire, embedderRunCjs } = require('../../internal/util/embedding');
 const { runEmbedderEntryPoint } = internalBinding('mksnapshot');
 
 prepareMainThreadExecution(false, true);
diff --git a/lib/internal/main/eval_stdin.js b/lib/internal/main/eval_stdin.js
index d71751e781..757985e356 100644
--- a/lib/internal/main/eval_stdin.js
+++ b/lib/internal/main/eval_stdin.js
@@ -5,15 +5,15 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 const {
   evalModule,
   evalScript,
   readStdin,
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
 prepareMainThreadExecution();
 markBootstrapComplete();
diff --git a/lib/internal/main/eval_string.js b/lib/internal/main/eval_string.js
index 908532b0b1..c6df7bf534 100644
--- a/lib/internal/main/eval_string.js
+++ b/lib/internal/main/eval_string.js
@@ -12,11 +12,11 @@ const {
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
-const { evalModule, evalScript } = require('internal/process/execution');
-const { addBuiltinLibsToObject } = require('internal/modules/helpers');
+} = require('../../internal/process/pre_execution');
+const { evalModule, evalScript } = require('../../internal/process/execution');
+const { addBuiltinLibsToObject } = require('../../internal/modules/helpers');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 prepareMainThreadExecution();
 addBuiltinLibsToObject(globalThis, '<eval>');
diff --git a/lib/internal/main/inspect.js b/lib/internal/main/inspect.js
index a60e4aa40b..660bd88085 100644
--- a/lib/internal/main/inspect.js
+++ b/lib/internal/main/inspect.js
@@ -5,7 +5,7 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 prepareMainThreadExecution();
 
@@ -14,5 +14,5 @@ markBootstrapComplete();
 
 // Start the debugger agent.
 process.nextTick(() => {
-  require('internal/debugger/inspect').start();
+  require('../../internal/debugger/inspect').start();
 });
diff --git a/lib/internal/main/mksnapshot.js b/lib/internal/main/mksnapshot.js
index 3470171683..88b08a5c9f 100644
--- a/lib/internal/main/mksnapshot.js
+++ b/lib/internal/main/mksnapshot.js
@@ -9,7 +9,7 @@ const {
   SafeSet,
 } = primordials;
 
-const { BuiltinModule: { normalizeRequirableId } } = require('internal/bootstrap/realm');
+const { BuiltinModule: { normalizeRequirableId } } = require('../../internal/bootstrap/realm');
 const {
   runEmbedderEntryPoint,
   compileSerializeMain,
@@ -18,11 +18,11 @@ const {
 
 const { isExperimentalSeaWarningNeeded } = internalBinding('sea');
 
-const { emitExperimentalWarning } = require('internal/util');
+const { emitExperimentalWarning } = require('../../internal/util');
 
 const {
   getOptionValue,
-} = require('internal/options');
+} = require('../../internal/options');
 
 const {
   initializeCallbacks,
@@ -30,11 +30,11 @@ const {
     addSerializeCallback,
     addDeserializeCallback,
   },
-} = require('internal/v8/startup_snapshot');
+} = require('../../internal/v8/startup_snapshot');
 
 const {
   prepareMainThreadExecution,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 const path = require('path');
 
diff --git a/lib/internal/main/print_help.js b/lib/internal/main/print_help.js
index edb861668c..1e413d889a 100644
--- a/lib/internal/main/print_help.js
+++ b/lib/internal/main/print_help.js
@@ -22,7 +22,7 @@ const hasCrypto = Boolean(process.versions.openssl);
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 const typeLookup = [];
 for (const key of ObjectKeys(types))
@@ -198,7 +198,7 @@ function format(
 }
 
 function print(stream) {
-  const { options, aliases } = require('internal/options');
+  const { options, aliases } = require('../../internal/options');
 
   // Use 75 % of the available width, and at least 70 characters.
   const width = MathMax(70, (stream.columns || 0) * 0.75);
diff --git a/lib/internal/main/prof_process.js b/lib/internal/main/prof_process.js
index 612e3b469d..fdd1413ea0 100644
--- a/lib/internal/main/prof_process.js
+++ b/lib/internal/main/prof_process.js
@@ -3,8 +3,8 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 prepareMainThreadExecution();
 markBootstrapComplete();
-require('internal/v8_prof_processor');
+require('../../internal/v8_prof_processor');
diff --git a/lib/internal/main/repl.js b/lib/internal/main/repl.js
index da1764a9c8..6aa2bf380e 100644
--- a/lib/internal/main/repl.js
+++ b/lib/internal/main/repl.js
@@ -6,15 +6,15 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 const {
   evalScript,
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
-const console = require('internal/console/global');
+const console = require('../../internal/console/global');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 
 const { exitCodes: { kInvalidCommandLineArgument } } = internalBinding('errors');
 
@@ -23,7 +23,7 @@ prepareMainThreadExecution();
 markBootstrapComplete();
 
 if (process.env.NODE_REPL_EXTERNAL_MODULE) {
-  require('internal/modules/cjs/loader')
+  require('../../internal/modules/cjs/loader')
     .Module
     ._load(process.env.NODE_REPL_EXTERNAL_MODULE, undefined, true);
 } else {
@@ -35,12 +35,12 @@ if (process.env.NODE_REPL_EXTERNAL_MODULE) {
     process.exit(kInvalidCommandLineArgument);
   }
 
-  const esmLoader = require('internal/process/esm_loader');
+  const esmLoader = require('../../internal/process/esm_loader');
   esmLoader.loadESM(() => {
     console.log(`Welcome to Node.js ${process.version}.\n` +
       'Type ".help" for more information.');
 
-    const cliRepl = require('internal/repl');
+    const cliRepl = require('../../internal/repl');
     cliRepl.createInternalRepl(process.env, (err, repl) => {
       if (err) {
         throw err;
diff --git a/lib/internal/main/run_main_module.js b/lib/internal/main/run_main_module.js
index 5d09203b8c..458e05c570 100644
--- a/lib/internal/main/run_main_module.js
+++ b/lib/internal/main/run_main_module.js
@@ -5,8 +5,8 @@ const { RegExpPrototypeExec } = primordials;
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
-const { getOptionValue } = require('internal/options');
+} = require('../../internal/process/pre_execution');
+const { getOptionValue } = require('../../internal/options');
 
 const mainEntry = prepareMainThreadExecution(true);
 
@@ -16,7 +16,7 @@ markBootstrapComplete();
 RegExpPrototypeExec(/^/, '');
 
 if (getOptionValue('--experimental-default-type') === 'module') {
-  require('internal/modules/run_main').executeUserEntryPoint(mainEntry);
+  require('../../internal/modules/run_main').executeUserEntryPoint(mainEntry);
 } else {
   /**
    * To support legacy monkey-patching of `Module.runMain`, we call `runMain` here to have the CommonJS loader begin
@@ -25,5 +25,5 @@ if (getOptionValue('--experimental-default-type') === 'module') {
    * before the main entry point is loaded by doing so via scripts loaded through `--require`. This monkey-patchability
    * is undesirable and is removed in `--experimental-default-type=module` mode.
    */
-  require('internal/modules/cjs/loader').Module.runMain(mainEntry);
+  require('../../internal/modules/cjs/loader').Module.runMain(mainEntry);
 }
diff --git a/lib/internal/main/test_runner.js b/lib/internal/main/test_runner.js
index 7e6f3079a5..809b011654 100644
--- a/lib/internal/main/test_runner.js
+++ b/lib/internal/main/test_runner.js
@@ -2,23 +2,23 @@
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
-const { getOptionValue } = require('internal/options');
-const { isUsingInspector } = require('internal/util/inspector');
-const { run } = require('internal/test_runner/runner');
-const { setupTestReporters } = require('internal/test_runner/utils');
+} = require('../../internal/process/pre_execution');
+const { getOptionValue } = require('../../internal/options');
+const { isUsingInspector } = require('../../internal/util/inspector');
+const { run } = require('../../internal/test_runner/runner');
+const { setupTestReporters } = require('../../internal/test_runner/utils');
 const { exitCodes: { kGenericUserError } } = internalBinding('errors');
 const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   NumberParseInt,
   RegExpPrototypeExec,
   StringPrototypeSplit,
 } = primordials;
-let debug = require('internal/util/debuglog').debuglog('test_runner', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('test_runner', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/main/watch_mode.js b/lib/internal/main/watch_mode.js
index 4fae636322..86e23e89c3 100644
--- a/lib/internal/main/watch_mode.js
+++ b/lib/internal/main/watch_mode.js
@@ -12,15 +12,15 @@ const {
 const {
   prepareMainThreadExecution,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 const {
   triggerUncaughtException,
   exitCodes: { kNoFailure },
 } = internalBinding('errors');
-const { getOptionValue } = require('internal/options');
-const { emitExperimentalWarning } = require('internal/util');
-const { FilesWatcher } = require('internal/watch_mode/files_watcher');
-const { green, blue, red, white, clear } = require('internal/util/colors');
+const { getOptionValue } = require('../../internal/options');
+const { emitExperimentalWarning } = require('../../internal/util');
+const { FilesWatcher } = require('../../internal/watch_mode/files_watcher');
+const { green, blue, red, white, clear } = require('../../internal/util/colors');
 
 const { spawn } = require('child_process');
 const { inspect } = require('util');
diff --git a/lib/internal/main/worker_thread.js b/lib/internal/main/worker_thread.js
index 0dda4c760e..0a4b3efabc 100644
--- a/lib/internal/main/worker_thread.js
+++ b/lib/internal/main/worker_thread.js
@@ -21,14 +21,14 @@ const {
   prepareWorkerThreadExecution,
   setupUserModules,
   markBootstrapComplete,
-} = require('internal/process/pre_execution');
+} = require('../../internal/process/pre_execution');
 
 const {
   threadId,
   getEnvMessagePort,
 } = internalBinding('worker');
 
-const workerIo = require('internal/worker/io');
+const workerIo = require('../../internal/worker/io');
 const {
   messageTypes: {
     // Messages that may be received by workers
@@ -46,13 +46,13 @@ const {
 
 const {
   onGlobalUncaughtException,
-} = require('internal/process/execution');
+} = require('../../internal/process/execution');
 
-let debug = require('internal/util/debuglog').debuglog('worker', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('worker', (fn) => {
   debug = fn;
 });
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const { exitCodes: { kGenericUserError } } = internalBinding('errors');
 
 prepareWorkerThreadExecution();
@@ -66,7 +66,7 @@ const port = getEnvMessagePort();
 // spawned by our child_process module. In the work threads, mark the
 // related IPC properties as unavailable.
 if (process.env.NODE_CHANNEL_FD) {
-  const workerThreadSetup = require('internal/process/worker_thread_only');
+  const workerThreadSetup = require('../../internal/process/worker_thread_only');
   ObjectDefineProperty(process, 'channel', {
     __proto__: null,
     enumerable: false,
@@ -110,7 +110,7 @@ port.on('message', (message) => {
       publicWorker.workerData = workerData;
     }
 
-    require('internal/worker').assignEnvironmentData(environmentData);
+    require('../../internal/worker').assignEnvironmentData(environmentData);
 
     if (SharedArrayBuffer !== undefined) {
       // The counter is only passed to the workers created by the main thread,
@@ -131,11 +131,11 @@ port.on('message', (message) => {
     }
 
     if (manifestSrc) {
-      require('internal/process/policy').setup(manifestSrc, manifestURL);
+      require('../../internal/process/policy').setup(manifestSrc, manifestURL);
     }
     const isLoaderWorker =
       doEval === 'internal' &&
-      filename === require('internal/modules/esm/utils').loaderWorkerId;
+      filename === require('../../internal/modules/esm/utils').loaderWorkerId;
     setupUserModules(isLoaderWorker);
 
     if (!hasStdin)
@@ -153,7 +153,7 @@ port.on('message', (message) => {
       }
 
       case 'classic': {
-        const { evalScript } = require('internal/process/execution');
+        const { evalScript } = require('../../internal/process/execution');
         const name = '[worker eval]';
         // This is necessary for CJS module compilation.
         // TODO: pass this with something really internal.
@@ -169,7 +169,7 @@ port.on('message', (message) => {
       }
 
       case 'module': {
-        const { evalModule } = require('internal/process/execution');
+        const { evalModule } = require('../../internal/process/execution');
         PromisePrototypeThen(evalModule(filename), undefined, (e) => {
           workerOnGlobalUncaughtException(e, true);
         });
@@ -181,7 +181,7 @@ port.on('message', (message) => {
         // runMain here might be monkey-patched by users in --require.
         // XXX: the monkey-patchability here should probably be deprecated.
         ArrayPrototypeSplice(process.argv, 1, 0, filename);
-        const CJSLoader = require('internal/modules/cjs/loader');
+        const CJSLoader = require('../../internal/modules/cjs/loader');
         CJSLoader.Module.runMain(filename);
         break;
       }
@@ -231,7 +231,7 @@ function workerOnGlobalUncaughtException(error, fromPromise) {
 
   let serialized;
   try {
-    const { serializeError } = require('internal/error_serdes');
+    const { serializeError } = require('../../internal/error_serdes');
     serialized = serializeError(error);
   } catch {
     // Continue regardless of error.
@@ -245,7 +245,7 @@ function workerOnGlobalUncaughtException(error, fromPromise) {
   else
     port.postMessage({ type: COULD_NOT_SERIALIZE_ERROR });
 
-  const { clearAsyncIdStack } = require('internal/async_hooks');
+  const { clearAsyncIdStack } = require('../../internal/async_hooks');
   clearAsyncIdStack();
 
   process.exit();
diff --git a/lib/internal/mime.js b/lib/internal/mime.js
index 332ed8b536..35312f4076 100644
--- a/lib/internal/mime.js
+++ b/lib/internal/mime.js
@@ -14,7 +14,7 @@ const {
 } = primordials;
 const {
   ERR_INVALID_MIME_SYNTAX,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
 const NOT_HTTP_TOKEN_CODE_POINT = /[^!#$%&'*+\-.^_`|~A-Za-z0-9]/g;
 const NOT_HTTP_QUOTED_STRING_CODE_POINT = /[^\t\u0020-~\u0080-\u00FF]/g;
diff --git a/lib/internal/modules/cjs/loader.js b/lib/internal/modules/cjs/loader.js
index 8be147c8e2..9da0add880 100644
--- a/lib/internal/modules/cjs/loader.js
+++ b/lib/internal/modules/cjs/loader.js
@@ -72,20 +72,20 @@ module.exports = {
   initializeCJS,
 };
 
-const { BuiltinModule } = require('internal/bootstrap/realm');
+const { BuiltinModule } = require('../../../internal/bootstrap/realm');
 const {
   maybeCacheSourceMap,
-} = require('internal/source_map/source_map_cache');
-const { pathToFileURL, fileURLToPath, isURL } = require('internal/url');
+} = require('../../../internal/source_map/source_map_cache');
+const { pathToFileURL, fileURLToPath, isURL } = require('../../../internal/url');
 const {
   pendingDeprecate,
   emitExperimentalWarning,
   kEmptyObject,
   setOwnProperty,
   getLazy,
-} = require('internal/util');
-const { internalCompileFunction } = require('internal/vm');
-const assert = require('internal/assert');
+} = require('../../../internal/util');
+const { internalCompileFunction } = require('../../../internal/vm');
+const assert = require('../../../internal/assert');
 const fs = require('fs');
 const path = require('path');
 const { internalModuleStat } = internalBinding('fs');
@@ -104,19 +104,19 @@ const {
   normalizeReferrerURL,
   stripBOM,
   toRealPath,
-} = require('internal/modules/helpers');
-const packageJsonReader = require('internal/modules/package_json_reader');
-const { getOptionValue, getEmbedderOptions } = require('internal/options');
+} = require('../../../internal/modules/helpers');
+const packageJsonReader = require('../../../internal/modules/package_json_reader');
+const { getOptionValue, getEmbedderOptions } = require('../../../internal/options');
 const policy = getLazy(
-  () => (getOptionValue('--experimental-policy') ? require('internal/process/policy') : null),
+  () => (getOptionValue('--experimental-policy') ? require('../../../internal/process/policy') : null),
 );
 const shouldReportRequiredModules = getLazy(() => process.env.WATCH_REPORT_DEPENDENCIES);
 
 const getCascadedLoader = getLazy(
-  () => require('internal/process/esm_loader').esmLoader,
+  () => require('../../../internal/process/esm_loader').esmLoader,
 );
 
-const permission = require('internal/process/permission');
+const permission = require('../../../internal/process/permission');
 
 // Whether any user-provided CJS modules had been loaded (executed).
 // Used for internal assertions.
@@ -130,19 +130,19 @@ const {
     ERR_UNKNOWN_BUILTIN_MODULE,
   },
   setArrowMessage,
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
+} = require('../../../internal/errors');
+const { validateString } = require('../../../internal/validators');
 
 const {
   CHAR_BACKWARD_SLASH,
   CHAR_COLON,
   CHAR_DOT,
   CHAR_FORWARD_SLASH,
-} = require('internal/constants');
+} = require('../../../internal/constants');
 
 const {
   isProxy,
-} = require('internal/util/types');
+} = require('../../../internal/util/types');
 
 const { kEvaluated } = internalBinding('module_wrap');
 const isWindows = process.platform === 'win32';
@@ -348,7 +348,7 @@ function setModuleParent(value) {
   moduleParentCache.set(this, value);
 }
 
-let debug = require('internal/util/debuglog').debuglog('module', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('module', (fn) => {
   debug = fn;
 });
 
@@ -387,7 +387,7 @@ function initializeCJS() {
 
   // TODO(joyeecheung): deprecate this in favor of a proper hook?
   Module.runMain =
-    require('internal/modules/run_main').executeUserEntryPoint;
+    require('../../../internal/modules/run_main').executeUserEntryPoint;
 }
 
 // Given a module name, and a list of paths to test, returns the first
@@ -548,7 +548,7 @@ function trySelf(parentPath, request) {
   }
 
   try {
-    const { packageExportsResolve } = require('internal/modules/esm/resolve');
+    const { packageExportsResolve } = require('../../../internal/modules/esm/resolve');
     return finalizeEsmResolution(packageExportsResolve(
       pathToFileURL(pkgPath + '/package.json'), expansion, pkg,
       pathToFileURL(parentPath), getCjsConditions()), parentPath, pkgPath);
@@ -581,7 +581,7 @@ function resolveExports(nmPath, request) {
   const pkg = _readPackage(pkgPath);
   if (pkg.exists && pkg.exports != null) {
     try {
-      const { packageExportsResolve } = require('internal/modules/esm/resolve');
+      const { packageExportsResolve } = require('../../../internal/modules/esm/resolve');
       return finalizeEsmResolution(packageExportsResolve(
         pathToFileURL(pkgPath + '/package.json'), '.' + expansion, pkg, null,
         getCjsConditions()), null, pkgPath);
@@ -1096,7 +1096,7 @@ Module._resolveFilename = function(request, parent, isMain, options) {
     const pkg = packageJsonReader.readPackageScope(parentPath) || { __proto__: null };
     if (pkg.data?.imports != null) {
       try {
-        const { packageImportsResolve } = require('internal/modules/esm/resolve');
+        const { packageImportsResolve } = require('../../../internal/modules/esm/resolve');
         return finalizeEsmResolution(
           packageImportsResolve(request, pathToFileURL(parentPath),
                                 getCjsConditions()), parentPath,
@@ -1150,7 +1150,7 @@ Module._resolveFilename = function(request, parent, isMain, options) {
  * @throws {Error} If the module cannot be found
  */
 function finalizeEsmResolution(resolved, parentPath, pkgPath) {
-  const { encodedSepRegEx } = require('internal/modules/esm/resolve');
+  const { encodedSepRegEx } = require('../../../internal/modules/esm/resolve');
   if (RegExpPrototypeExec(encodedSepRegEx, resolved) !== null) {
     throw new ERR_INVALID_MODULE_SPECIFIER(
       resolved, 'must not include encoded "/" or "\\" characters', parentPath);
@@ -1307,7 +1307,7 @@ function wrapSafe(filename, content, cjsModuleInstance, codeCache) {
     return result.function;
   } catch (err) {
     if (process.mainModule === cjsModuleInstance) {
-      const { enrichCJSError } = require('internal/modules/esm/translators');
+      const { enrichCJSError } = require('../../../internal/modules/esm/translators');
       enrichCJSError(err, content);
     }
     throw err;
diff --git a/lib/internal/modules/esm/assert.js b/lib/internal/modules/esm/assert.js
index ce3280de84..98d7635a00 100644
--- a/lib/internal/modules/esm/assert.js
+++ b/lib/internal/modules/esm/assert.js
@@ -7,14 +7,14 @@ const {
   ObjectValues,
   ObjectPrototypeHasOwnProperty,
 } = primordials;
-const { validateString } = require('internal/validators');
+const { validateString } = require('../../../internal/validators');
 
 const {
   ERR_IMPORT_ASSERTION_TYPE_FAILED,
   ERR_IMPORT_ASSERTION_TYPE_MISSING,
   ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED,
   ERR_IMPORT_ATTRIBUTE_UNSUPPORTED,
-} = require('internal/errors').codes;
+} = require('../../../internal/errors').codes;
 
 // The HTML spec has an implied default type of `'javascript'`.
 const kImplicitAssertType = 'javascript';
diff --git a/lib/internal/modules/esm/create_dynamic_module.js b/lib/internal/modules/esm/create_dynamic_module.js
index d4f5a85db9..4b13db7225 100644
--- a/lib/internal/modules/esm/create_dynamic_module.js
+++ b/lib/internal/modules/esm/create_dynamic_module.js
@@ -7,7 +7,7 @@ const {
   SafeSet,
 } = primordials;
 
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
 
@@ -68,7 +68,7 @@ import.meta.done();
   if (imports.length) {
     reflect.imports = { __proto__: null };
   }
-  const { registerModule } = require('internal/modules/esm/utils');
+  const { registerModule } = require('../../../internal/modules/esm/utils');
   registerModule(m, {
     __proto__: null,
     initializeImportMeta: (meta, wrap) => {
diff --git a/lib/internal/modules/esm/fetch_module.js b/lib/internal/modules/esm/fetch_module.js
index 21b7456899..ea930f32a7 100644
--- a/lib/internal/modules/esm/fetch_module.js
+++ b/lib/internal/modules/esm/fetch_module.js
@@ -14,8 +14,8 @@ const {
   ERR_NETWORK_IMPORT_DISALLOWED,
   ERR_NETWORK_IMPORT_BAD_RESPONSE,
   ERR_MODULE_NOT_FOUND,
-} = require('internal/errors').codes;
-const { URL } = require('internal/url');
+} = require('../../../internal/errors').codes;
+const { URL } = require('../../../internal/url');
 const net = require('net');
 const { once } = require('events');
 const { compose } = require('stream');
diff --git a/lib/internal/modules/esm/formats.js b/lib/internal/modules/esm/formats.js
index 2d69a3e93c..e25756bfbf 100644
--- a/lib/internal/modules/esm/formats.js
+++ b/lib/internal/modules/esm/formats.js
@@ -1,8 +1,8 @@
 'use strict';
 
 const { RegExpPrototypeExec } = primordials;
-const { getOptionValue } = require('internal/options');
-const { getValidatedPath } = require('internal/fs/utils');
+const { getOptionValue } = require('../../../internal/options');
+const { getValidatedPath } = require('../../../internal/fs/utils');
 const pathModule = require('path');
 const fsBindings = internalBinding('fs');
 const { fs: fsConstants } = internalBinding('constants');
diff --git a/lib/internal/modules/esm/get_format.js b/lib/internal/modules/esm/get_format.js
index 56d002ca08..6bfea8514d 100644
--- a/lib/internal/modules/esm/get_format.js
+++ b/lib/internal/modules/esm/get_format.js
@@ -9,21 +9,21 @@ const {
   StringPrototypeCharCodeAt,
   StringPrototypeSlice,
 } = primordials;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 const {
   extensionFormatMap,
   getFormatOfExtensionlessFile,
   mimeToFormat,
-} = require('internal/modules/esm/formats');
+} = require('../../../internal/modules/esm/formats');
 
 const experimentalNetworkImports =
   getOptionValue('--experimental-network-imports');
 const defaultTypeFlag = getOptionValue('--experimental-default-type');
 // The next line is where we flip the default to ES modules someday.
 const defaultType = defaultTypeFlag === 'module' ? 'module' : 'commonjs';
-const { getPackageType } = require('internal/modules/esm/resolve');
-const { fileURLToPath } = require('internal/url');
-const { ERR_UNKNOWN_FILE_EXTENSION } = require('internal/errors').codes;
+const { getPackageType } = require('../../../internal/modules/esm/resolve');
+const { fileURLToPath } = require('../../../internal/url');
+const { ERR_UNKNOWN_FILE_EXTENSION } = require('../../../internal/errors').codes;
 
 const protocolHandlers = {
   '__proto__': null,
@@ -139,7 +139,7 @@ function getFileProtocolModuleFormat(url, context, ignoreErrors) {
  */
 function getHttpProtocolModuleFormat(url, context) {
   if (experimentalNetworkImports) {
-    const { fetchModule } = require('internal/modules/esm/fetch_module');
+    const { fetchModule } = require('../../../internal/modules/esm/fetch_module');
     return PromisePrototypeThen(
       PromiseResolve(fetchModule(url, context)),
       (entry) => {
diff --git a/lib/internal/modules/esm/hooks.js b/lib/internal/modules/esm/hooks.js
index cb2bc456db..acd7d16624 100644
--- a/lib/internal/modules/esm/hooks.js
+++ b/lib/internal/modules/esm/hooks.js
@@ -31,37 +31,37 @@ const {
   ERR_LOADER_CHAIN_INCOMPLETE,
   ERR_METHOD_NOT_IMPLEMENTED,
   ERR_WORKER_UNSERIALIZABLE_ERROR,
-} = require('internal/errors').codes;
+} = require('../../../internal/errors').codes;
 const { exitCodes: { kUnfinishedTopLevelAwait } } = internalBinding('errors');
-const { URL } = require('internal/url');
+const { URL } = require('../../../internal/url');
 const { canParse: URLCanParse } = internalBinding('url');
 const { receiveMessageOnPort } = require('worker_threads');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../../internal/util/types');
 const {
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../../internal/validators');
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../../internal/util');
 
 const {
   defaultResolve,
   throwIfInvalidParentURL,
-} = require('internal/modules/esm/resolve');
+} = require('../../../internal/modules/esm/resolve');
 const {
   getDefaultConditions,
   loaderWorkerId,
-} = require('internal/modules/esm/utils');
-const { deserializeError } = require('internal/error_serdes');
+} = require('../../../internal/modules/esm/utils');
+const { deserializeError } = require('../../../internal/error_serdes');
 const {
   SHARED_MEMORY_BYTE_LENGTH,
   WORKER_TO_MAIN_THREAD_NOTIFICATION,
-} = require('internal/modules/esm/shared_constants');
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+} = require('../../../internal/modules/esm/shared_constants');
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
 let importMetaInitializer;
@@ -126,7 +126,7 @@ class Hooks {
      */
     load: [
       {
-        fn: require('internal/modules/esm/load').defaultLoad,
+        fn: require('../../../internal/modules/esm/load').defaultLoad,
         url: 'node:internal/modules/esm/load',
       },
     ],
@@ -145,7 +145,7 @@ class Hooks {
    * loader (user-land) to the worker.
    */
   async register(urlOrSpecifier, parentURL, data) {
-    const moduleLoader = require('internal/process/esm_loader').esmLoader;
+    const moduleLoader = require('../../../internal/process/esm_loader').esmLoader;
     const keyedExports = await moduleLoader.import(
       urlOrSpecifier,
       parentURL,
@@ -419,7 +419,7 @@ class Hooks {
     }
 
     if (format == null) {
-      require('internal/modules/esm/load').throwUnknownModuleFormat(url, format);
+      require('../../../internal/modules/esm/load').throwUnknownModuleFormat(url, format);
     }
 
     if (typeof format !== 'string') { // [2]
@@ -458,7 +458,7 @@ class Hooks {
   }
 
   importMetaInitialize(meta, context, loader) {
-    importMetaInitializer ??= require('internal/modules/esm/initialize_import_meta').initializeImportMeta;
+    importMetaInitializer ??= require('../../../internal/modules/esm/initialize_import_meta').initializeImportMeta;
     meta = importMetaInitializer(meta, context, loader);
     return meta;
   }
@@ -498,8 +498,8 @@ class HooksProxy {
   #isReady = false;
 
   constructor() {
-    const { InternalWorker } = require('internal/worker');
-    MessageChannel ??= require('internal/worker/io').MessageChannel;
+    const { InternalWorker } = require('../../../internal/worker');
+    MessageChannel ??= require('../../../internal/worker/io').MessageChannel;
 
     const lock = new SharedArrayBuffer(SHARED_MEMORY_BYTE_LENGTH);
     this.#lock = new Int32Array(lock);
@@ -519,7 +519,7 @@ class HooksProxy {
 
   waitForWorker() {
     if (!this.#isReady) {
-      const { kIsOnline } = require('internal/worker');
+      const { kIsOnline } = require('../../../internal/worker');
       if (!this.#worker[kIsOnline]) {
         debug('wait for signal from worker');
         AtomicsWait(this.#lock, WORKER_TO_MAIN_THREAD_NOTIFICATION, 0);
@@ -544,7 +544,7 @@ class HooksProxy {
   async makeAsyncRequest(method, transferList, ...args) {
     this.waitForWorker();
 
-    MessageChannel ??= require('internal/worker/io').MessageChannel;
+    MessageChannel ??= require('../../../internal/worker/io').MessageChannel;
     const asyncCommChannel = new MessageChannel();
 
     // Pass work to the worker.
@@ -639,7 +639,7 @@ class HooksProxy {
     }
   }
 
-  #importMetaInitializer = require('internal/modules/esm/initialize_import_meta').initializeImportMeta;
+  #importMetaInitializer = require('../../../internal/modules/esm/initialize_import_meta').initializeImportMeta;
 
   importMetaInitialize(meta, context, loader) {
     this.#importMetaInitializer(meta, context, loader);
diff --git a/lib/internal/modules/esm/initialize_import_meta.js b/lib/internal/modules/esm/initialize_import_meta.js
index f55f60a5b7..4d6be27300 100644
--- a/lib/internal/modules/esm/initialize_import_meta.js
+++ b/lib/internal/modules/esm/initialize_import_meta.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 const experimentalImportMetaResolve = getOptionValue('--experimental-import-meta-resolve');
 
 /**
diff --git a/lib/internal/modules/esm/load.js b/lib/internal/modules/esm/load.js
index 1881745a6d..c2e24aa7bd 100644
--- a/lib/internal/modules/esm/load.js
+++ b/lib/internal/modules/esm/load.js
@@ -5,28 +5,28 @@ const {
   RegExpPrototypeExec,
   decodeURIComponent,
 } = primordials;
-const { kEmptyObject } = require('internal/util');
+const { kEmptyObject } = require('../../../internal/util');
 
-const { defaultGetFormat } = require('internal/modules/esm/get_format');
-const { validateAttributes, emitImportAssertionWarning } = require('internal/modules/esm/assert');
-const { getOptionValue } = require('internal/options');
+const { defaultGetFormat } = require('../../../internal/modules/esm/get_format');
+const { validateAttributes, emitImportAssertionWarning } = require('../../../internal/modules/esm/assert');
+const { getOptionValue } = require('../../../internal/options');
 const { readFileSync } = require('fs');
 
 // Do not eagerly grab .manifest, it may be in TDZ
 const policy = getOptionValue('--experimental-policy') ?
-  require('internal/process/policy') :
+  require('../../../internal/process/policy') :
   null;
 const experimentalNetworkImports =
   getOptionValue('--experimental-network-imports');
 
 const { Buffer: { from: BufferFrom } } = require('buffer');
 
-const { URL } = require('internal/url');
+const { URL } = require('../../../internal/url');
 const {
   ERR_INVALID_URL,
   ERR_UNKNOWN_MODULE_FORMAT,
   ERR_UNSUPPORTED_ESM_URL_SCHEME,
-} = require('internal/errors').codes;
+} = require('../../../internal/errors').codes;
 
 const DATA_URL_PATTERN = /^[^/]+\/[^,;]+(?:[^,]*?)(;base64)?,([\s\S]*)$/;
 
@@ -40,7 +40,7 @@ async function getSource(url, context) {
   let responseURL = href;
   let source;
   if (protocol === 'file:') {
-    const { readFile: readFileAsync } = require('internal/fs/promises').exports;
+    const { readFile: readFileAsync } = require('../../../internal/fs/promises').exports;
     source = await readFileAsync(url);
   } else if (protocol === 'data:') {
     const match = RegExpPrototypeExec(DATA_URL_PATTERN, url.pathname);
@@ -53,7 +53,7 @@ async function getSource(url, context) {
     protocol === 'https:' ||
     protocol === 'http:'
   )) {
-    const { fetchModule } = require('internal/modules/esm/fetch_module');
+    const { fetchModule } = require('../../../internal/modules/esm/fetch_module');
     const res = await fetchModule(url, context);
     source = await res.body;
     responseURL = res.resolvedHREF;
diff --git a/lib/internal/modules/esm/loader.js b/lib/internal/modules/esm/loader.js
index 6044765c37..cbad256068 100644
--- a/lib/internal/modules/esm/loader.js
+++ b/lib/internal/modules/esm/loader.js
@@ -1,7 +1,7 @@
 'use strict';
 
 // This is needed to avoid cycles in esm/resolve <-> cjs/loader
-require('internal/modules/cjs/loader');
+require('../../../internal/modules/cjs/loader');
 
 const {
   ArrayPrototypeJoin,
@@ -19,13 +19,13 @@ const {
 const {
   ERR_REQUIRE_ESM,
   ERR_UNKNOWN_MODULE_FORMAT,
-} = require('internal/errors').codes;
-const { getOptionValue } = require('internal/options');
-const { pathToFileURL, isURL } = require('internal/url');
-const { emitExperimentalWarning } = require('internal/util');
+} = require('../../../internal/errors').codes;
+const { getOptionValue } = require('../../../internal/options');
+const { pathToFileURL, isURL } = require('../../../internal/url');
+const { emitExperimentalWarning } = require('../../../internal/util');
 const {
   getDefaultConditions,
-} = require('internal/modules/esm/utils');
+} = require('../../../internal/modules/esm/utils');
 let defaultResolve, defaultLoad, defaultLoadSync, importMetaInitializer;
 
 /**
@@ -33,7 +33,7 @@ let defaultResolve, defaultLoad, defaultLoadSync, importMetaInitializer;
  * @returns {import('./module_map.js').ResolveCache')}
  */
 function newResolveCache() {
-  const { ResolveCache } = require('internal/modules/esm/module_map');
+  const { ResolveCache } = require('../../../internal/modules/esm/module_map');
   return new ResolveCache();
 }
 
@@ -42,7 +42,7 @@ function newResolveCache() {
  * @returns {import('./module_map.js').LoadCache')}
  */
 function newLoadCache() {
-  const { LoadCache } = require('internal/modules/esm/module_map');
+  const { LoadCache } = require('../../../internal/modules/esm/module_map');
   return new LoadCache();
 }
 
@@ -51,7 +51,7 @@ function newLoadCache() {
  * @returns {import('./translators.js').Translators}
  */
 function getTranslators() {
-  const { translators } = require('internal/modules/esm/translators');
+  const { translators } = require('../../../internal/modules/esm/translators');
   return translators;
 }
 
@@ -199,7 +199,7 @@ class ModuleLoader {
   ) {
     const evalInstance = (url) => {
       const { ModuleWrap } = internalBinding('module_wrap');
-      const { registerModule } = require('internal/modules/esm/utils');
+      const { registerModule } = require('../../../internal/modules/esm/utils');
       const module = new ModuleWrap(url, undefined, source, 0, 0);
       registerModule(module, {
         __proto__: null,
@@ -211,7 +211,7 @@ class ModuleLoader {
 
       return module;
     };
-    const ModuleJob = require('internal/modules/esm/module_job');
+    const ModuleJob = require('../../../internal/modules/esm/module_job');
     const job = new ModuleJob(
       this, url, undefined, evalInstance, false, false);
     this.loadCache.set(url, undefined, job);
@@ -299,7 +299,7 @@ class ModuleLoader {
       process.send({ 'watch:import': [url] });
     }
 
-    const ModuleJob = require('internal/modules/esm/module_job');
+    const ModuleJob = require('../../../internal/modules/esm/module_job');
     const job = new ModuleJob(
       this,
       url,
@@ -384,7 +384,7 @@ class ModuleLoader {
    * repeating the same code block twice in those functions.
    */
   defaultResolve(originalSpecifier, parentURL, importAttributes) {
-    defaultResolve ??= require('internal/modules/esm/resolve').defaultResolve;
+    defaultResolve ??= require('../../../internal/modules/esm/resolve').defaultResolve;
 
     const context = {
       __proto__: null,
@@ -403,7 +403,7 @@ class ModuleLoader {
    * @returns {Promise<{ format: ModuleFormat, source: ModuleSource }>}
    */
   async load(url, context) {
-    defaultLoad ??= require('internal/modules/esm/load').defaultLoad;
+    defaultLoad ??= require('../../../internal/modules/esm/load').defaultLoad;
     const result = this.#customizations ?
       await this.#customizations.load(url, context) :
       await defaultLoad(url, context);
@@ -412,7 +412,7 @@ class ModuleLoader {
   }
 
   loadSync(url, context) {
-    defaultLoadSync ??= require('internal/modules/esm/load').defaultLoadSync;
+    defaultLoadSync ??= require('../../../internal/modules/esm/load').defaultLoadSync;
 
     let result = this.#customizations ?
       this.#customizations.loadSync(url, context) :
@@ -431,7 +431,7 @@ class ModuleLoader {
 
   validateLoadResult(url, format) {
     if (format == null) {
-      require('internal/modules/esm/load').throwUnknownModuleFormat(url, format);
+      require('../../../internal/modules/esm/load').throwUnknownModuleFormat(url, format);
     }
   }
 
@@ -439,7 +439,7 @@ class ModuleLoader {
     if (this.#customizations) {
       return this.#customizations.importMetaInitialize(meta, context, this);
     }
-    importMetaInitializer ??= require('internal/modules/esm/initialize_import_meta').initializeImportMeta;
+    importMetaInitializer ??= require('../../../internal/modules/esm/initialize_import_meta').initializeImportMeta;
     meta = importMetaInitializer(meta, context, this);
     return meta;
   }
@@ -532,7 +532,7 @@ function createModuleLoader(useCustomLoadersIfPresent = true) {
   if (useCustomLoadersIfPresent &&
       // Don't spawn a new worker if we're already in a worker thread created by instantiating CustomizedModuleLoader;
       // doing so would cause an infinite loop.
-      !require('internal/modules/esm/utils').isLoaderWorker()) {
+      !require('../../../internal/modules/esm/utils').isLoaderWorker()) {
     const userLoaderPaths = getOptionValue('--experimental-loader');
     if (userLoaderPaths.length > 0) {
       if (!emittedLoaderFlagWarning) {
@@ -568,7 +568,7 @@ function createModuleLoader(useCustomLoadersIfPresent = true) {
  */
 function getHooksProxy() {
   if (!hooksProxy) {
-    const { HooksProxy } = require('internal/modules/esm/hooks');
+    const { HooksProxy } = require('../../../internal/modules/esm/hooks');
     hooksProxy = new HooksProxy();
   }
 
@@ -605,7 +605,7 @@ function getHooksProxy() {
  * ```
  */
 function register(specifier, parentURL = undefined, options) {
-  const moduleLoader = require('internal/process/esm_loader').esmLoader;
+  const moduleLoader = require('../../../internal/process/esm_loader').esmLoader;
   if (parentURL != null && typeof parentURL === 'object' && !isURL(parentURL)) {
     options = parentURL;
     parentURL = options.parentURL;
diff --git a/lib/internal/modules/esm/module_job.js b/lib/internal/modules/esm/module_job.js
index 83c23456e0..2b07156cdc 100644
--- a/lib/internal/modules/esm/module_job.js
+++ b/lib/internal/modules/esm/module_job.js
@@ -21,11 +21,11 @@ const {
 
 const { ModuleWrap } = internalBinding('module_wrap');
 
-const { decorateErrorStack, kEmptyObject } = require('internal/util');
+const { decorateErrorStack, kEmptyObject } = require('../../../internal/util');
 const {
   getSourceMapsEnabled,
-} = require('internal/source_map/source_map_cache');
-const assert = require('internal/assert');
+} = require('../../../internal/source_map/source_map_cache');
+const assert = require('../../../internal/assert');
 const resolvedPromise = PromiseResolve();
 
 const noop = FunctionPrototype;
@@ -228,7 +228,7 @@ class ModuleJob {
         const packageConfig =
           StringPrototypeStartsWith(this.module.url, 'file://') &&
             RegExpPrototypeExec(/\.js(\?[^#]*)?(#.*)?$/, this.module.url) !== null &&
-            require('internal/modules/esm/resolve')
+            require('../../../internal/modules/esm/resolve')
               .getPackageScopeConfig(this.module.url);
         if (packageConfig.type === 'module') {
           e.message +=
diff --git a/lib/internal/modules/esm/module_map.js b/lib/internal/modules/esm/module_map.js
index eab00386c4..5e1f0df117 100644
--- a/lib/internal/modules/esm/module_map.js
+++ b/lib/internal/modules/esm/module_map.js
@@ -8,12 +8,12 @@ const {
   ObjectKeys,
   SafeMap,
 } = primordials;
-const { kImplicitAssertType } = require('internal/modules/esm/assert');
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+const { kImplicitAssertType } = require('../../../internal/modules/esm/assert');
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
-const { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;
-const { validateString } = require('internal/validators');
+const { ERR_INVALID_ARG_TYPE } = require('../../../internal/errors').codes;
+const { validateString } = require('../../../internal/validators');
 
 /**
  * Cache the results of the `resolve` step of the module resolution and loading process.
@@ -97,7 +97,7 @@ class LoadCache extends SafeMap {
     validateString(url, 'url');
     validateString(type, 'type');
 
-    const ModuleJob = require('internal/modules/esm/module_job');
+    const ModuleJob = require('../../../internal/modules/esm/module_job');
     if (job instanceof ModuleJob !== true &&
         typeof job !== 'function') {
       throw new ERR_INVALID_ARG_TYPE('job', 'ModuleJob', job);
diff --git a/lib/internal/modules/esm/package_config.js b/lib/internal/modules/esm/package_config.js
index 5da47764c9..0e82754c8f 100644
--- a/lib/internal/modules/esm/package_config.js
+++ b/lib/internal/modules/esm/package_config.js
@@ -3,8 +3,8 @@
 const {
   StringPrototypeEndsWith,
 } = primordials;
-const { URL, fileURLToPath } = require('internal/url');
-const packageJsonReader = require('internal/modules/package_json_reader');
+const { URL, fileURLToPath } = require('../../../internal/url');
+const packageJsonReader = require('../../../internal/modules/package_json_reader');
 
 /**
  * @typedef {object} PackageConfig
diff --git a/lib/internal/modules/esm/resolve.js b/lib/internal/modules/esm/resolve.js
index 58e7df07ca..7ce541cb8a 100644
--- a/lib/internal/modules/esm/resolve.js
+++ b/lib/internal/modules/esm/resolve.js
@@ -22,13 +22,13 @@ const {
   StringPrototypeSplit,
   StringPrototypeStartsWith,
 } = primordials;
-const internalFS = require('internal/fs/utils');
-const { BuiltinModule } = require('internal/bootstrap/realm');
+const internalFS = require('../../../internal/fs/utils');
+const { BuiltinModule } = require('../../../internal/bootstrap/realm');
 const { realpathSync } = require('fs');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../../internal/options');
 // Do not eagerly grab .manifest, it may be in TDZ
 const policy = getOptionValue('--experimental-policy') ?
-  require('internal/process/policy') :
+  require('../../../internal/process/policy') :
   null;
 const { sep, relative, toNamespacedPath, resolve } = require('path');
 const preserveSymlinks = getOptionValue('--preserve-symlinks');
@@ -36,8 +36,8 @@ const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');
 const experimentalNetworkImports =
   getOptionValue('--experimental-network-imports');
 const inputTypeFlag = getOptionValue('--input-type');
-const { URL, pathToFileURL, fileURLToPath, isURL } = require('internal/url');
-const { getCWDURL } = require('internal/util');
+const { URL, pathToFileURL, fileURLToPath, isURL } = require('../../../internal/url');
+const { getCWDURL } = require('../../../internal/util');
 const { canParse: URLCanParse } = internalBinding('url');
 const { legacyMainResolve: FSLegacyMainResolve } = internalBinding('fs');
 const {
@@ -52,12 +52,12 @@ const {
   ERR_PACKAGE_PATH_NOT_EXPORTED,
   ERR_UNSUPPORTED_DIR_IMPORT,
   ERR_NETWORK_IMPORT_DISALLOWED,
-} = require('internal/errors').codes;
+} = require('../../../internal/errors').codes;
 
-const { Module: CJSModule } = require('internal/modules/cjs/loader');
-const { getPackageScopeConfig } = require('internal/modules/esm/package_config');
-const { getConditionsSet } = require('internal/modules/esm/utils');
-const packageJsonReader = require('internal/modules/package_json_reader');
+const { Module: CJSModule } = require('../../../internal/modules/cjs/loader');
+const { getPackageScopeConfig } = require('../../../internal/modules/esm/package_config');
+const { getConditionsSet } = require('../../../internal/modules/esm/utils');
+const packageJsonReader = require('../../../internal/modules/package_json_reader');
 const { internalModuleStat } = internalBinding('fs');
 
 /**
@@ -235,7 +235,7 @@ function finalizeResolution(resolved, base, preserveSymlinks) {
   try {
     path = fileURLToPath(resolved);
   } catch (err) {
-    const { setOwnProperty } = require('internal/util');
+    const { setOwnProperty } = require('../../../internal/util');
     setOwnProperty(err, 'input', `${resolved}`);
     setOwnProperty(err, 'module', `${base}`);
     throw err;
@@ -1181,7 +1181,7 @@ module.exports = {
 // cycle
 const {
   defaultGetFormatWithoutErrors,
-} = require('internal/modules/esm/get_format');
+} = require('../../../internal/modules/esm/get_format');
 
 if (policy) {
   const $defaultResolve = defaultResolve;
diff --git a/lib/internal/modules/esm/translators.js b/lib/internal/modules/esm/translators.js
index 5627d98cf2..270f0aaee4 100644
--- a/lib/internal/modules/esm/translators.js
+++ b/lib/internal/modules/esm/translators.js
@@ -26,36 +26,36 @@ let _TYPES = null;
  */
 function lazyTypes() {
   if (_TYPES !== null) { return _TYPES; }
-  return _TYPES = require('internal/util/types');
+  return _TYPES = require('../../../internal/util/types');
 }
 
-const assert = require('internal/assert');
+const assert = require('../../../internal/assert');
 const { readFileSync } = require('fs');
 const { dirname, extname, isAbsolute } = require('path');
 const {
   hasEsmSyntax,
   loadBuiltinModule,
   stripBOM,
-} = require('internal/modules/helpers');
+} = require('../../../internal/modules/helpers');
 const {
   Module: CJSModule,
   cjsParseCache,
-} = require('internal/modules/cjs/loader');
-const { fileURLToPath, pathToFileURL, URL } = require('internal/url');
-let debug = require('internal/util/debuglog').debuglog('esm', (fn) => {
+} = require('../../../internal/modules/cjs/loader');
+const { fileURLToPath, pathToFileURL, URL } = require('../../../internal/url');
+let debug = require('../../../internal/util/debuglog').debuglog('esm', (fn) => {
   debug = fn;
 });
-const { emitExperimentalWarning, kEmptyObject, setOwnProperty } = require('internal/util');
+const { emitExperimentalWarning, kEmptyObject, setOwnProperty } = require('../../../internal/util');
 const {
   ERR_UNKNOWN_BUILTIN_MODULE,
   ERR_INVALID_RETURN_PROPERTY_VALUE,
-} = require('internal/errors').codes;
-const { maybeCacheSourceMap } = require('internal/source_map/source_map_cache');
+} = require('../../../internal/errors').codes;
+const { maybeCacheSourceMap } = require('../../../internal/source_map/source_map_cache');
 const moduleWrap = internalBinding('module_wrap');
 const { ModuleWrap } = moduleWrap;
-const asyncESM = require('internal/process/esm_loader');
-const { emitWarningSync } = require('internal/process/warning');
-const { internalCompileFunction } = require('internal/vm');
+const asyncESM = require('../../../internal/process/esm_loader');
+const { emitWarningSync } = require('../../../internal/process/warning');
+const { internalCompileFunction } = require('../../../internal/vm');
 
 /** @type {import('deps/cjs-module-lexer/lexer.js').parse} */
 let cjsParse;
@@ -66,15 +66,15 @@ let cjsParse;
  */
 async function initCJSParse() {
   if (typeof WebAssembly === 'undefined') {
-    cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;
+    cjsParse = require('../../../internal/deps/cjs-module-lexer/lexer').parse;
   } else {
     const { parse, init } =
-        require('internal/deps/cjs-module-lexer/dist/lexer');
+        require('../../../internal/deps/cjs-module-lexer/dist/lexer');
     try {
       await init();
       cjsParse = parse;
     } catch {
-      cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;
+      cjsParse = require('../../../internal/deps/cjs-module-lexer/lexer').parse;
     }
   }
 }
@@ -116,7 +116,7 @@ function assertBufferSource(body, allowString, hookName) {
 function stringify(body) {
   if (typeof body === 'string') { return body; }
   assertBufferSource(body, false, 'transformSource');
-  const { TextDecoder } = require('internal/encoding');
+  const { TextDecoder } = require('../../../internal/encoding');
   DECODER = DECODER === null ? new TextDecoder() : DECODER;
   return DECODER.decode(body);
 }
@@ -152,7 +152,7 @@ translators.set('module', async function moduleStrategy(url, source, isMain) {
   maybeCacheSourceMap(url, source);
   debug(`Translating StandardModule ${url}`);
   const module = new ModuleWrap(url, undefined, source, 0, 0);
-  const { registerModule } = require('internal/modules/esm/utils');
+  const { registerModule } = require('../../../internal/modules/esm/utils');
   registerModule(module, {
     __proto__: null,
     initializeImportMeta: (meta, wrap) => this.importMetaInitialize(meta, { url }),
diff --git a/lib/internal/modules/esm/utils.js b/lib/internal/modules/esm/utils.js
index cbb583ede5..e753a08d21 100644
--- a/lib/internal/modules/esm/utils.js
+++ b/lib/internal/modules/esm/utils.js
@@ -19,18 +19,18 @@ const {
 const {
   ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING,
   ERR_INVALID_ARG_VALUE,
-} = require('internal/errors').codes;
-const { getOptionValue } = require('internal/options');
+} = require('../../../internal/errors').codes;
+const { getOptionValue } = require('../../../internal/options');
 const {
   loadPreloadModules,
   initializeFrozenIntrinsics,
-} = require('internal/process/pre_execution');
-const { getCWDURL } = require('internal/util');
+} = require('../../../internal/process/pre_execution');
+const { getCWDURL } = require('../../../internal/util');
 const {
   setImportModuleDynamicallyCallback,
   setInitializeImportMetaObjectCallback,
 } = internalBinding('module_wrap');
-const assert = require('internal/assert');
+const assert = require('../../../internal/assert');
 
 let defaultConditions;
 /**
@@ -206,8 +206,8 @@ function isLoaderWorker() {
 async function initializeHooks() {
   const customLoaderURLs = getOptionValue('--experimental-loader');
 
-  const { Hooks } = require('internal/modules/esm/hooks');
-  const esmLoader = require('internal/process/esm_loader').esmLoader;
+  const { Hooks } = require('../../../internal/modules/esm/hooks');
+  const esmLoader = require('../../../internal/process/esm_loader').esmLoader;
 
   const hooks = new Hooks();
   esmLoader.setCustomizations(hooks);
diff --git a/lib/internal/modules/esm/worker.js b/lib/internal/modules/esm/worker.js
index 311d77fb09..f0776c098e 100644
--- a/lib/internal/modules/esm/worker.js
+++ b/lib/internal/modules/esm/worker.js
@@ -10,23 +10,23 @@ const {
   SafeSet,
   TypedArrayPrototypeGetBuffer,
 } = primordials;
-const assert = require('internal/assert');
+const assert = require('../../../internal/assert');
 const { clearImmediate, setImmediate } = require('timers');
 const {
   hasUncaughtExceptionCaptureCallback,
-} = require('internal/process/execution');
+} = require('../../../internal/process/execution');
 const {
   isArrayBuffer,
   isDataView,
   isTypedArray,
 } = require('util/types');
 
-const { receiveMessageOnPort } = require('internal/worker/io');
+const { receiveMessageOnPort } = require('../../../internal/worker/io');
 const {
   WORKER_TO_MAIN_THREAD_NOTIFICATION,
-} = require('internal/modules/esm/shared_constants');
-const { initializeHooks } = require('internal/modules/esm/utils');
-const { isMarkedAsUntransferable } = require('internal/buffer');
+} = require('../../../internal/modules/esm/shared_constants');
+const { initializeHooks } = require('../../../internal/modules/esm/utils');
+const { isMarkedAsUntransferable } = require('../../../internal/buffer');
 
 /**
  * Transfers an ArrayBuffer, TypedArray, or DataView to a worker thread.
@@ -64,7 +64,7 @@ function wrapMessage(status, body) {
   let serialized;
   let serializationFailed;
   try {
-    const { serializeError } = require('internal/error_serdes');
+    const { serializeError } = require('../../../internal/error_serdes');
     serialized = serializeError(body);
   } catch {
     serializationFailed = true;
diff --git a/lib/internal/modules/helpers.js b/lib/internal/modules/helpers.js
index 7f2959cc46..dba8b76826 100644
--- a/lib/internal/modules/helpers.js
+++ b/lib/internal/modules/helpers.js
@@ -17,17 +17,17 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_MANIFEST_DEPENDENCY_MISSING,
   ERR_UNKNOWN_BUILTIN_MODULE,
-} = require('internal/errors').codes;
-const { BuiltinModule } = require('internal/bootstrap/realm');
+} = require('../../internal/errors').codes;
+const { BuiltinModule } = require('../../internal/bootstrap/realm');
 
-const { validateString } = require('internal/validators');
+const { validateString } = require('../../internal/validators');
 const fs = require('fs'); // Import all of `fs` so that it can be monkey-patched.
-const internalFS = require('internal/fs/utils');
+const internalFS = require('../../internal/fs/utils');
 const path = require('path');
-const { pathToFileURL, fileURLToPath, URL } = require('internal/url');
+const { pathToFileURL, fileURLToPath, URL } = require('../../internal/url');
 
-const { getOptionValue } = require('internal/options');
-const { setOwnProperty } = require('internal/util');
+const { getOptionValue } = require('../../internal/options');
+const { setOwnProperty } = require('../../internal/util');
 
 const {
   privateSymbols: {
@@ -35,7 +35,7 @@ const {
   },
 } = internalBinding('util');
 
-let debug = require('internal/util/debuglog').debuglog('module', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('module', (fn) => {
   debug = fn;
 });
 
@@ -109,7 +109,7 @@ let $Module = null;
  * Import the Module class on first use.
  */
 function lazyModule() {
-  $Module = $Module || require('internal/modules/cjs/loader').Module;
+  $Module = $Module || require('../../internal/modules/cjs/loader').Module;
   return $Module;
 }
 
@@ -231,7 +231,7 @@ function stripBOM(content) {
  */
 function addBuiltinLibsToObject(object, dummyModuleName) {
   // Make built-in modules available directly (loaded lazily).
-  const Module = require('internal/modules/cjs/loader').Module;
+  const Module = require('../../internal/modules/cjs/loader').Module;
   const { builtinModules } = Module;
 
   // To require built-in modules in user-land and ignore modules whose
@@ -305,7 +305,7 @@ function normalizeReferrerURL(referrer) {
  */
 function hasEsmSyntax(code) {
   debug('Checking for ESM syntax');
-  const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
+  const parser = require('../../internal/deps/acorn/acorn/dist/acorn').Parser;
   let root;
   try {
     root = parser.parse(code, { sourceType: 'module', ecmaVersion: 'latest' });
diff --git a/lib/internal/modules/package_json_reader.js b/lib/internal/modules/package_json_reader.js
index 65f5ce3551..dacf7cdb38 100644
--- a/lib/internal/modules/package_json_reader.js
+++ b/lib/internal/modules/package_json_reader.js
@@ -11,13 +11,13 @@ const {
 } = primordials;
 const {
   ERR_INVALID_PACKAGE_CONFIG,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const { internalModuleReadJSON } = internalBinding('fs');
 const { resolve, sep, toNamespacedPath } = require('path');
-const permission = require('internal/process/permission');
-const { kEmptyObject, setOwnProperty } = require('internal/util');
+const permission = require('../../internal/process/permission');
+const { kEmptyObject, setOwnProperty } = require('../../internal/util');
 
-const { fileURLToPath, pathToFileURL } = require('internal/url');
+const { fileURLToPath, pathToFileURL } = require('../../internal/url');
 
 const cache = new SafeMap();
 
@@ -102,9 +102,9 @@ function read(jsonPath, { base, specifier, isESM } = kEmptyObject) {
     }
 
     if (manifest === undefined) {
-      const { getOptionValue } = require('internal/options');
+      const { getOptionValue } = require('../../internal/options');
       manifest = getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').manifest :
+        require('../../internal/process/policy').manifest :
         null;
     }
     if (manifest !== null) {
diff --git a/lib/internal/modules/run_main.js b/lib/internal/modules/run_main.js
index a9828286a9..159afab7b1 100644
--- a/lib/internal/modules/run_main.js
+++ b/lib/internal/modules/run_main.js
@@ -4,7 +4,7 @@ const {
   StringPrototypeEndsWith,
 } = primordials;
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 const path = require('path');
 
 /**
@@ -21,20 +21,20 @@ function resolveMainPath(main) {
   } else {
     // Extension searching for the main entry point is supported only in legacy mode.
     // Module._findPath is monkey-patchable here.
-    const { Module } = require('internal/modules/cjs/loader');
+    const { Module } = require('../../internal/modules/cjs/loader');
     mainPath = Module._findPath(path.resolve(main), null, true);
   }
   if (!mainPath) { return; }
 
   const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');
   if (!preserveSymlinksMain) {
-    const { toRealPath } = require('internal/modules/helpers');
+    const { toRealPath } = require('../../internal/modules/helpers');
     try {
       mainPath = toRealPath(mainPath);
     } catch (err) {
       if (defaultType === 'module' && err?.code === 'ENOENT') {
-        const { decorateErrorWithCommonJSHints } = require('internal/modules/esm/resolve');
-        const { getCWDURL } = require('internal/util');
+        const { decorateErrorWithCommonJSHints } = require('../../internal/modules/esm/resolve');
+        const { getCWDURL } = require('../../internal/util');
         decorateErrorWithCommonJSHints(err, mainPath, getCWDURL());
       }
       throw err;
@@ -67,7 +67,7 @@ function shouldUseESMLoader(mainPath) {
   if (mainPath && StringPrototypeEndsWith(mainPath, '.mjs')) { return true; }
   if (!mainPath || StringPrototypeEndsWith(mainPath, '.cjs')) { return false; }
 
-  const { readPackageScope } = require('internal/modules/package_json_reader');
+  const { readPackageScope } = require('../../internal/modules/package_json_reader');
   const pkg = readPackageScope(mainPath);
   // No need to guard `pkg` as it can only be an object or `false`.
   return pkg.data?.type === 'module' || getOptionValue('--experimental-default-type') === 'module';
@@ -78,8 +78,8 @@ function shouldUseESMLoader(mainPath) {
  * @param {string} mainPath - Absolute path for the main entry point
  */
 function runMainESM(mainPath) {
-  const { loadESM } = require('internal/process/esm_loader');
-  const { pathToFileURL } = require('internal/url');
+  const { loadESM } = require('../../internal/process/esm_loader');
+  const { pathToFileURL } = require('../../internal/url');
   const main = pathToFileURL(mainPath).href;
 
   handleMainPromise(loadESM((esmLoader) => {
@@ -94,7 +94,7 @@ function runMainESM(mainPath) {
 async function handleMainPromise(promise) {
   const {
     handleProcessExit,
-  } = require('internal/modules/esm/handle_process_exit');
+  } = require('../../internal/modules/esm/handle_process_exit');
   process.on('exit', handleProcessExit);
   try {
     return await promise;
@@ -118,7 +118,7 @@ function executeUserEntryPoint(main = process.argv[1]) {
     runMainESM(resolvedMain || main);
   } else {
     // Module._load is the monkey-patchable CJS module loader.
-    const { Module } = require('internal/modules/cjs/loader');
+    const { Module } = require('../../internal/modules/cjs/loader');
     Module._load(main, null, true);
   }
 }
diff --git a/lib/internal/navigator.js b/lib/internal/navigator.js
index 5971891ea7..3e94f2f2f0 100644
--- a/lib/internal/navigator.js
+++ b/lib/internal/navigator.js
@@ -7,11 +7,11 @@ const {
 
 const {
   ERR_ILLEGAL_CONSTRUCTOR,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
 const {
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   getAvailableParallelism,
diff --git a/lib/internal/net.js b/lib/internal/net.js
index 8b04d5f226..5cff4a580d 100644
--- a/lib/internal/net.js
+++ b/lib/internal/net.js
@@ -8,7 +8,7 @@ const {
 
 const Buffer = require('buffer').Buffer;
 const { writeBuffer } = internalBinding('fs');
-const errors = require('internal/errors');
+const errors = require('../internal/errors');
 
 // IPv4 Segment
 const v4Seg = '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])';
diff --git a/lib/internal/perf/event_loop_delay.js b/lib/internal/perf/event_loop_delay.js
index 8281ea105f..30a9ec8d69 100644
--- a/lib/internal/perf/event_loop_delay.js
+++ b/lib/internal/perf/event_loop_delay.js
@@ -10,7 +10,7 @@ const {
     ERR_ILLEGAL_CONSTRUCTOR,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   createELDHistogram,
@@ -19,21 +19,21 @@ const {
 const {
   validateInteger,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Histogram,
   kHandle,
   kMap,
-} = require('internal/histogram');
+} = require('../../internal/histogram');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const kEnabled = Symbol('kEnabled');
 
diff --git a/lib/internal/perf/nodetiming.js b/lib/internal/perf/nodetiming.js
index 11f877e5d8..c23ec48cf0 100644
--- a/lib/internal/perf/nodetiming.js
+++ b/lib/internal/perf/nodetiming.js
@@ -5,16 +5,16 @@ const {
   ObjectSetPrototypeOf,
 } = primordials;
 
-const { PerformanceEntry } = require('internal/perf/performance_entry');
+const { PerformanceEntry } = require('../../internal/perf/performance_entry');
 
 const {
   now,
   getMilestoneTimestamp,
-} = require('internal/perf/utils');
+} = require('../../internal/perf/utils');
 
 const {
   customInspectSymbol: kInspect,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const { inspect } = require('util');
 
diff --git a/lib/internal/perf/observe.js b/lib/internal/perf/observe.js
index 244d01f541..34e61477d1 100644
--- a/lib/internal/perf/observe.js
+++ b/lib/internal/perf/observe.js
@@ -38,7 +38,7 @@ const {
 const {
   isPerformanceEntry,
   createPerformanceNodeEntry,
-} = require('internal/perf/performance_entry');
+} = require('../../internal/perf/performance_entry');
 
 const {
   codes: {
@@ -47,13 +47,13 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateFunction,
   validateObject,
   validateInternalField,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   customInspectSymbol: kInspect,
@@ -61,7 +61,7 @@ const {
   lazyDOMException,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   setImmediate,
@@ -69,7 +69,7 @@ const {
 
 const { inspect } = require('util');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../../internal/perf/utils');
 
 const kBuffer = Symbol('kBuffer');
 const kDispatch = Symbol('kDispatch');
diff --git a/lib/internal/perf/performance.js b/lib/internal/perf/performance.js
index 0cc90bc95b..4aeea9affb 100644
--- a/lib/internal/perf/performance.js
+++ b/lib/internal/perf/performance.js
@@ -12,7 +12,7 @@ const {
     ERR_ILLEGAL_CONSTRUCTOR,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   EventTarget,
@@ -20,31 +20,31 @@ const {
   kTrustEvent,
   initEventTarget,
   defineEventHandler,
-} = require('internal/event_target');
+} = require('../../internal/event_target');
 
-const { now } = require('internal/perf/utils');
+const { now } = require('../../internal/perf/utils');
 
-const { markResourceTiming } = require('internal/perf/resource_timing');
+const { markResourceTiming } = require('../../internal/perf/resource_timing');
 
 const {
   mark,
   measure,
   clearMarkTimings,
-} = require('internal/perf/usertiming');
+} = require('../../internal/perf/usertiming');
 const {
   clearEntriesFromBuffer,
   filterBufferMapByNameAndType,
   setResourceTimingBufferSize,
   setDispatchBufferFull,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
-const { eventLoopUtilization } = require('internal/perf/event_loop_utilization');
-const nodeTiming = require('internal/perf/nodetiming');
-const timerify = require('internal/perf/timerify');
-const { customInspectSymbol: kInspect, kEnumerableProperty, kEmptyObject } = require('internal/util');
+const { eventLoopUtilization } = require('../../internal/perf/event_loop_utilization');
+const nodeTiming = require('../../internal/perf/nodetiming');
+const timerify = require('../../internal/perf/timerify');
+const { customInspectSymbol: kInspect, kEnumerableProperty, kEmptyObject } = require('../../internal/util');
 const { inspect } = require('util');
-const { validateInternalField } = require('internal/validators');
-const { convertToInt } = require('internal/webidl');
+const { validateInternalField } = require('../../internal/validators');
+const { convertToInt } = require('../../internal/webidl');
 
 const {
   getTimeOriginTimestamp,
diff --git a/lib/internal/perf/performance_entry.js b/lib/internal/perf/performance_entry.js
index 76af221a5d..de37260fdc 100644
--- a/lib/internal/perf/performance_entry.js
+++ b/lib/internal/perf/performance_entry.js
@@ -9,13 +9,13 @@ const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
   kEnumerableProperty,
-} = require('internal/util');
-const { validateInternalField } = require('internal/validators');
+} = require('../../internal/util');
+const { validateInternalField } = require('../../internal/validators');
 
 const { inspect } = require('util');
 
diff --git a/lib/internal/perf/resource_timing.js b/lib/internal/perf/resource_timing.js
index e7c2f1fa44..757a09a26a 100644
--- a/lib/internal/perf/resource_timing.js
+++ b/lib/internal/perf/resource_timing.js
@@ -10,12 +10,12 @@ const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   },
-} = require('internal/errors');
-const { PerformanceEntry, kSkipThrow } = require('internal/perf/performance_entry');
-const assert = require('internal/assert');
-const { enqueue, bufferResourceTiming } = require('internal/perf/observe');
-const { validateInternalField } = require('internal/validators');
-const { kEnumerableProperty } = require('internal/util');
+} = require('../../internal/errors');
+const { PerformanceEntry, kSkipThrow } = require('../../internal/perf/performance_entry');
+const assert = require('../../internal/assert');
+const { enqueue, bufferResourceTiming } = require('../../internal/perf/observe');
+const { validateInternalField } = require('../../internal/validators');
+const { kEnumerableProperty } = require('../../internal/util');
 
 const kCacheMode = Symbol('kCacheMode');
 const kRequestedUrl = Symbol('kRequestedUrl');
diff --git a/lib/internal/perf/timerify.js b/lib/internal/perf/timerify.js
index ad959aa42f..33acc76735 100644
--- a/lib/internal/perf/timerify.js
+++ b/lib/internal/perf/timerify.js
@@ -8,31 +8,31 @@ const {
   ReflectConstruct,
 } = primordials;
 
-const { createPerformanceNodeEntry } = require('internal/perf/performance_entry');
-const { now } = require('internal/perf/utils');
+const { createPerformanceNodeEntry } = require('../../internal/perf/performance_entry');
+const { now } = require('../../internal/perf/utils');
 
 const {
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isHistogram,
-} = require('internal/histogram');
+} = require('../../internal/histogram');
 
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   enqueue,
-} = require('internal/perf/observe');
+} = require('../../internal/perf/observe');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 function processComplete(name, start, args, histogram) {
   const duration = now() - start;
diff --git a/lib/internal/perf/usertiming.js b/lib/internal/perf/usertiming.js
index ff417d9470..cadcc53e13 100644
--- a/lib/internal/perf/usertiming.js
+++ b/lib/internal/perf/usertiming.js
@@ -9,17 +9,17 @@ const {
   SymbolToStringTag,
 } = primordials;
 
-const { PerformanceEntry, kSkipThrow } = require('internal/perf/performance_entry');
-const { now } = require('internal/perf/utils');
-const { enqueue, bufferUserTiming } = require('internal/perf/observe');
-const nodeTiming = require('internal/perf/nodetiming');
+const { PerformanceEntry, kSkipThrow } = require('../../internal/perf/performance_entry');
+const { now } = require('../../internal/perf/utils');
+const { enqueue, bufferUserTiming } = require('../../internal/perf/observe');
+const nodeTiming = require('../../internal/perf/nodetiming');
 
 const {
   validateNumber,
   validateObject,
   validateString,
   validateInternalField,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   codes: {
@@ -29,13 +29,13 @@ const {
     ERR_PERFORMANCE_INVALID_TIMESTAMP,
     ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
-const { structuredClone } = require('internal/structured_clone');
+const { structuredClone } = require('../../internal/structured_clone');
 const {
   lazyDOMException,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const kDetail = Symbol('kDetail');
 
diff --git a/lib/internal/policy/manifest.js b/lib/internal/policy/manifest.js
index fdba0c9bd9..bbe7d64ddf 100644
--- a/lib/internal/policy/manifest.js
+++ b/lib/internal/policy/manifest.js
@@ -21,15 +21,15 @@ const {
   ERR_MANIFEST_INVALID_RESOURCE_FIELD,
   ERR_MANIFEST_INVALID_SPECIFIER,
   ERR_MANIFEST_UNKNOWN_ONERROR,
-} = require('internal/errors').codes;
-let debug = require('internal/util/debuglog').debuglog('policy', (fn) => {
+} = require('../../internal/errors').codes;
+let debug = require('../../internal/util/debuglog').debuglog('policy', (fn) => {
   debug = fn;
 });
-const SRI = require('internal/policy/sri');
-const { URL } = require('internal/url');
+const SRI = require('../../internal/policy/sri');
+const { URL } = require('../../internal/url');
 const { internalVerifyIntegrity } = internalBinding('crypto');
 const kRelativeURLStringPattern = /^\.{0,2}\//;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../../internal/options');
 const shouldAbortOnUncaughtException = getOptionValue(
   '--abort-on-uncaught-exception',
 );
diff --git a/lib/internal/policy/sri.js b/lib/internal/policy/sri.js
index 675226a3a0..847eb9680b 100644
--- a/lib/internal/policy/sri.js
+++ b/lib/internal/policy/sri.js
@@ -15,7 +15,7 @@ const {
 
 const {
   ERR_SRI_PARSE,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const kWSP = '[\\x20\\x09]';
 const kVCHAR = '[\\x21-\\x7E]';
 const kHASH_ALGO = 'sha(?:256|384|512)';
diff --git a/lib/internal/process/esm_loader.js b/lib/internal/process/esm_loader.js
index a3451ddab3..db5c68a28f 100644
--- a/lib/internal/process/esm_loader.js
+++ b/lib/internal/process/esm_loader.js
@@ -4,12 +4,12 @@ const {
   SafePromiseAllReturnVoid,
 } = primordials;
 
-const { createModuleLoader } = require('internal/modules/esm/loader');
-const { getOptionValue } = require('internal/options');
+const { createModuleLoader } = require('../../internal/modules/esm/loader');
+const { getOptionValue } = require('../../internal/options');
 const {
   hasUncaughtExceptionCaptureCallback,
-} = require('internal/process/execution');
-const { kEmptyObject, getCWDURL } = require('internal/util');
+} = require('../../internal/process/execution');
+const { kEmptyObject, getCWDURL } = require('../../internal/util');
 
 let esmLoader;
 
diff --git a/lib/internal/process/execution.js b/lib/internal/process/execution.js
index 8ae6a1678a..5b58b3257d 100644
--- a/lib/internal/process/execution.js
+++ b/lib/internal/process/execution.js
@@ -13,7 +13,7 @@ const {
     ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET,
     ERR_EVAL_ESM_CANNOT_PRINT,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const { exitCodes: { kGenericUserError } } = internalBinding('errors');
 
 const {
@@ -24,7 +24,7 @@ const {
   afterHooksExist,
   emitAfter,
   popAsyncContext,
-} = require('internal/async_hooks');
+} = require('../../internal/async_hooks');
 
 // shouldAbortOnUncaughtToggle is a typed array for faster
 // communication with JS.
@@ -45,16 +45,16 @@ function evalModule(source, print) {
   if (print) {
     throw new ERR_EVAL_ESM_CANNOT_PRINT();
   }
-  const { loadESM } = require('internal/process/esm_loader');
-  const { handleMainPromise } = require('internal/modules/run_main');
+  const { loadESM } = require('../../internal/process/esm_loader');
+  const { handleMainPromise } = require('../../internal/modules/run_main');
   RegExpPrototypeExec(/^/, ''); // Necessary to reset RegExp statics before user code runs.
   return handleMainPromise(loadESM((loader) => loader.eval(source)));
 }
 
 function evalScript(name, body, breakFirstLine, print, shouldLoadESM = false) {
-  const CJSModule = require('internal/modules/cjs/loader').Module;
-  const { kVmBreakFirstLineSymbol } = require('internal/util');
-  const { pathToFileURL } = require('internal/url');
+  const CJSModule = require('../../internal/modules/cjs/loader').Module;
+  const { kVmBreakFirstLineSymbol } = require('../../internal/util');
+  const { pathToFileURL } = require('../../internal/url');
 
   const cwd = tryGetCwd();
   const origModule = globalThis.module;  // Set e.g. when called from the REPL.
@@ -63,8 +63,8 @@ function evalScript(name, body, breakFirstLine, print, shouldLoadESM = false) {
   module.filename = path.join(cwd, name);
   module.paths = CJSModule._nodeModulePaths(cwd);
 
-  const { handleMainPromise } = require('internal/modules/run_main');
-  const asyncESM = require('internal/process/esm_loader');
+  const { handleMainPromise } = require('../../internal/modules/run_main');
+  const asyncESM = require('../../internal/process/esm_loader');
   const baseUrl = pathToFileURL(module.filename).href;
   const { loadESM } = asyncESM;
 
@@ -90,7 +90,7 @@ function evalScript(name, body, breakFirstLine, print, shouldLoadESM = false) {
         },
       }));
     if (print) {
-      const { log } = require('internal/console/global');
+      const { log } = require('../../internal/console/global');
       log(result);
     }
 
diff --git a/lib/internal/process/per_thread.js b/lib/internal/process/per_thread.js
index ce4822af01..d3e882d719 100644
--- a/lib/internal/process/per_thread.js
+++ b/lib/internal/process/per_thread.js
@@ -40,13 +40,13 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_UNKNOWN_SIGNAL,
   },
-} = require('internal/errors');
-const format = require('internal/util/inspect').format;
+} = require('../../internal/errors');
+const format = require('../../internal/util/inspect').format;
 const {
   validateArray,
   validateNumber,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const constants = internalBinding('constants').os.signals;
 
 const kInternal = Symbol('internal properties');
@@ -181,7 +181,7 @@ function wrapProcessMethods(binding) {
   function exit(code) {
     const {
       handleProcessExit,
-    } = require('internal/modules/esm/handle_process_exit');
+    } = require('../../internal/modules/esm/handle_process_exit');
     process.off('exit', handleProcessExit);
 
     if (arguments.length !== 0) {
@@ -281,7 +281,7 @@ function buildAllowedFlags() {
     envSettings: { kAllowedInEnvvar },
     types: { kBoolean },
   } = internalBinding('options');
-  const { options, aliases } = require('internal/options');
+  const { options, aliases } = require('../../internal/options');
 
   const allowedNodeEnvironmentFlags = [];
   for (const { 0: name, 1: info } of options) {
@@ -411,7 +411,7 @@ function toggleTraceCategoryState(asyncHooksEnabled) {
   if (asyncHooksEnabled) {
     if (!traceEventsAsyncHook) {
       traceEventsAsyncHook =
-        require('internal/trace_events_async_hooks').createHook();
+        require('../../internal/trace_events_async_hooks').createHook();
     }
     traceEventsAsyncHook.enable();
   } else if (traceEventsAsyncHook) {
diff --git a/lib/internal/process/permission.js b/lib/internal/process/permission.js
index f17bfade51..b4c037d073 100644
--- a/lib/internal/process/permission.js
+++ b/lib/internal/process/permission.js
@@ -6,7 +6,7 @@ const {
 } = primordials;
 
 const permission = internalBinding('permission');
-const { validateString } = require('internal/validators');
+const { validateString } = require('../../internal/validators');
 const { resolve } = require('path');
 
 let experimentalPermission;
@@ -15,7 +15,7 @@ module.exports = ObjectFreeze({
   __proto__: null,
   isEnabled() {
     if (experimentalPermission === undefined) {
-      const { getOptionValue } = require('internal/options');
+      const { getOptionValue } = require('../../internal/options');
       experimentalPermission = getOptionValue('--experimental-permission');
     }
     return experimentalPermission;
diff --git a/lib/internal/process/policy.js b/lib/internal/process/policy.js
index 8e07cb9211..608bea2292 100644
--- a/lib/internal/process/policy.js
+++ b/lib/internal/process/policy.js
@@ -9,8 +9,8 @@ const {
 const {
   ERR_ACCESS_DENIED,
   ERR_MANIFEST_TDZ,
-} = require('internal/errors').codes;
-const { Manifest } = require('internal/policy/manifest');
+} = require('../../internal/errors').codes;
+const { Manifest } = require('../../internal/policy/manifest');
 let manifest;
 let manifestSrc;
 let manifestURL;
diff --git a/lib/internal/process/pre_execution.js b/lib/internal/process/pre_execution.js
index 917ba90a1c..58ec8ca0ec 100644
--- a/lib/internal/process/pre_execution.js
+++ b/lib/internal/process/pre_execution.js
@@ -26,15 +26,15 @@ const {
   getOptionValue,
   refreshOptions,
   getEmbedderOptions,
-} = require('internal/options');
-const { reconnectZeroFillToggle } = require('internal/buffer');
+} = require('../../internal/options');
+const { reconnectZeroFillToggle } = require('../../internal/buffer');
 const {
   defineOperation,
   exposeInterface,
   exposeLazyInterfaces,
   defineReplaceableLazyAttribute,
   setupCoverageHooks,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   ERR_INVALID_THIS,
@@ -42,14 +42,14 @@ const {
   ERR_NO_CRYPTO,
   ERR_MISSING_OPTION,
   ERR_ACCESS_DENIED,
-} = require('internal/errors').codes;
-const assert = require('internal/assert');
+} = require('../../internal/errors').codes;
+const assert = require('../../internal/assert');
 const {
   namespace: {
     addSerializeCallback,
     isBuildingSnapshot,
   },
-} = require('internal/v8/startup_snapshot');
+} = require('../../internal/v8/startup_snapshot');
 
 function prepareMainThreadExecution(expandArgv1 = false, initializeModules = true) {
   return prepareExecution({
@@ -92,7 +92,7 @@ function prepareExecution(options) {
   initializeSourceMapsHandlers();
   initializeDeprecations();
 
-  require('internal/dns/utils').initializeDns();
+  require('../../internal/dns/utils').initializeDns();
 
   setupSymbolDisposePolyfill();
 
@@ -101,7 +101,7 @@ function prepareExecution(options) {
     // Worker threads will get the manifest in the message handler.
     const policy = readPolicyFromDisk();
     if (policy) {
-      require('internal/process/policy')
+      require('../../internal/process/policy')
         .setup(policy.manifestSrc, policy.manifestURL);
     }
 
@@ -121,7 +121,7 @@ function prepareExecution(options) {
     initializeClusterIPC();
 
     // TODO(joyeecheung): do this for worker threads as well.
-    require('internal/v8/startup_snapshot').runDeserializeCallbacks();
+    require('../../internal/v8/startup_snapshot').runDeserializeCallbacks();
   } else {
     assert(!internalBinding('worker').isMainThread);
     // The setup should be called in LOAD_SCRIPT message handler.
@@ -163,7 +163,7 @@ function setupSymbolDisposePolyfill() {
 function setupUserModules(isLoaderWorker = false) {
   initializeCJSLoader();
   initializeESMLoader(isLoaderWorker);
-  const CJSLoader = require('internal/modules/cjs/loader');
+  const CJSLoader = require('../../internal/modules/cjs/loader');
   assert(!CJSLoader.hasLoadedAnyUserCJSModule);
   // Loader workers are responsible for doing this themselves.
   if (isLoaderWorker) {
@@ -189,7 +189,7 @@ function patchProcessObject(expandArgv1) {
   const binding = internalBinding('process_methods');
   binding.patchProcessObject(process);
 
-  require('internal/process/per_thread').refreshHrtimeBuffer();
+  require('../../internal/process/per_thread').refreshHrtimeBuffer();
 
   // Since we replace process.argv[0] below, preserve the original value in case the user needs it.
   ObjectDefineProperty(process, 'argv0', {
@@ -222,8 +222,8 @@ function patchProcessObject(expandArgv1) {
 
   // We need to initialize the global console here again with process.stdout
   // and friends for snapshot deserialization.
-  const globalConsole = require('internal/console/global');
-  const { initializeGlobalConsole } = require('internal/console/constructor');
+  const globalConsole = require('../../internal/console/global');
+  const { initializeGlobalConsole } = require('../../internal/console/constructor');
   initializeGlobalConsole(globalConsole);
 
   // TODO(joyeecheung): most of these should be deprecated and removed,
@@ -262,7 +262,7 @@ function setupWarningHandler() {
   const {
     onWarning,
     resetForSerialization,
-  } = require('internal/process/warning');
+  } = require('../../internal/process/warning');
   if (getOptionValue('--warnings') &&
     process.env.NODE_NO_WARNINGS !== '1') {
     process.on('warning', onWarning);
@@ -291,7 +291,7 @@ function setupUndici() {
       return undici;
     }
 
-    undici = require('internal/deps/undici/undici');
+    undici = require('../../internal/deps/undici/undici');
     return undici;
   }
 
@@ -325,7 +325,7 @@ function setupUndici() {
 
     // The WebAssembly Web API: https://webassembly.github.io/spec/web-api
     internalBinding('wasm_web_api').setImplementation((streamState, source) => {
-      require('internal/wasm_web_api').wasmStreamingCallback(streamState, source);
+      require('../../internal/wasm_web_api').wasmStreamingCallback(streamState, source);
     });
   }
 
@@ -391,7 +391,7 @@ function setupCustomEvent() {
       getOptionValue('--no-experimental-global-customevent')) {
     return;
   }
-  const { CustomEvent } = require('internal/event_target');
+  const { CustomEvent } = require('../../internal/event_target');
   exposeInterface(globalThis, 'CustomEvent', CustomEvent);
 }
 
@@ -399,7 +399,7 @@ function setupStacktracePrinterOnSigint() {
   if (!getOptionValue('--trace-sigint')) {
     return;
   }
-  const { SigintWatchdog } = require('internal/watchdog');
+  const { SigintWatchdog } = require('../../internal/watchdog');
 
   const watchdog = new SigintWatchdog();
   watchdog.start();
@@ -411,23 +411,23 @@ function initializeReport() {
     enumerable: true,
     configurable: true,
     get() {
-      const { report } = require('internal/process/report');
+      const { report } = require('../../internal/process/report');
       return report;
     },
   });
 }
 
 function setupDebugEnv() {
-  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);
+  require('../../internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);
   if (getOptionValue('--expose-internals')) {
-    require('internal/bootstrap/realm').BuiltinModule.exposeInternals();
+    require('../../internal/bootstrap/realm').BuiltinModule.exposeInternals();
   }
 }
 
 // This has to be called after initializeReport() is called
 function initializeReportSignalHandlers() {
   if (getOptionValue('--report-on-signal')) {
-    const { addSignalHandler } = require('internal/process/report');
+    const { addSignalHandler } = require('../../internal/process/report');
     addSignalHandler();
   }
 }
@@ -439,7 +439,7 @@ function initializeHeapSnapshotSignalHandlers() {
   if (!signal)
     return;
 
-  require('internal/validators').validateSignalName(signal);
+  require('../../internal/validators').validateSignalName(signal);
   const { writeHeapSnapshot } = require('v8');
 
   function doWriteHeapSnapshot() {
@@ -459,7 +459,7 @@ function initializeHeapSnapshotSignalHandlers() {
 
 function setupTraceCategoryState() {
   const { isTraceCategoryEnabled } = internalBinding('trace_events');
-  const { toggleTraceCategoryState } = require('internal/process/per_thread');
+  const { toggleTraceCategoryState } = require('../../internal/process/per_thread');
   toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));
 }
 
@@ -473,7 +473,7 @@ function setupInspectorHooks() {
     const {
       enable,
       disable,
-    } = require('internal/inspector_async_hook');
+    } = require('../../internal/inspector_async_hook');
     internalBinding('inspector').registerAsyncHook(enable, disable);
   }
 }
@@ -482,13 +482,13 @@ function setupInspectorHooks() {
 // this is used to deprecate APIs implemented in C++ where the deprecation
 // utilities are not easily accessible.
 function initializeDeprecations() {
-  const { deprecate } = require('internal/util');
+  const { deprecate } = require('../../internal/util');
   const pendingDeprecation = getOptionValue('--pending-deprecation');
 
   // DEP0103: access to `process.binding('util').isX` type checkers
   // TODO(addaleax): Turn into a full runtime deprecation.
   const utilBinding = internalBinding('util');
-  const types = require('internal/util/types');
+  const types = require('../../internal/util/types');
   for (const name of [
     'isArrayBuffer',
     'isArrayBufferView',
@@ -544,7 +544,7 @@ function initializeDeprecations() {
 
 function setupChildProcessIpcChannel() {
   if (process.env.NODE_CHANNEL_FD) {
-    const assert = require('internal/assert');
+    const assert = require('../../internal/assert');
 
     const fd = NumberParseInt(process.env.NODE_CHANNEL_FD, 10);
     assert(fd >= 0);
@@ -578,7 +578,7 @@ function initializePermission() {
     };
     process.emitWarning('Permission is an experimental feature',
                         'ExperimentalWarning');
-    const { has, deny } = require('internal/process/permission');
+    const { has, deny } = require('../../internal/process/permission');
     const warnFlags = [
       '--allow-child-process',
       '--allow-worker',
@@ -637,7 +637,7 @@ function readPolicyFromDisk() {
   if (experimentalPolicy) {
     process.emitWarning('Policies are experimental.',
                         'ExperimentalWarning');
-    const { pathToFileURL, URL } = require('internal/url');
+    const { pathToFileURL, URL } = require('../../internal/url');
     // URL here as it is slightly different parsing
     // no bare specifiers for now
     let manifestURL;
@@ -652,7 +652,7 @@ function readPolicyFromDisk() {
     const src = fs.readFileSync(manifestURL, 'utf8');
     const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');
     if (experimentalPolicyIntegrity) {
-      const SRI = require('internal/policy/sri');
+      const SRI = require('../../internal/policy/sri');
       const { createHash, timingSafeEqual } = require('crypto');
       const realIntegrities = new SafeMap();
       const integrityEntries = SRI.parse(experimentalPolicyIntegrity);
@@ -683,12 +683,12 @@ function readPolicyFromDisk() {
 }
 
 function initializeCJSLoader() {
-  const { initializeCJS } = require('internal/modules/cjs/loader');
+  const { initializeCJS } = require('../../internal/modules/cjs/loader');
   initializeCJS();
 }
 
 function initializeESMLoader(isLoaderWorker) {
-  const { initializeESM } = require('internal/modules/esm/utils');
+  const { initializeESM } = require('../../internal/modules/esm/utils');
   initializeESM(isLoaderWorker);
 
   // Patch the vm module when --experimental-vm-modules is on.
@@ -696,7 +696,7 @@ function initializeESMLoader(isLoaderWorker) {
   if (getOptionValue('--experimental-vm-modules')) {
     const {
       Module, SourceTextModule, SyntheticModule,
-    } = require('internal/vm/module');
+    } = require('../../internal/vm/module');
     const vm = require('vm');
     vm.Module = Module;
     vm.SourceTextModule = SourceTextModule;
@@ -707,7 +707,7 @@ function initializeESMLoader(isLoaderWorker) {
 function initializeSourceMapsHandlers() {
   const {
     setSourceMapsEnabled,
-  } = require('internal/source_map/source_map_cache');
+  } = require('../../internal/source_map/source_map_cache');
   setSourceMapsEnabled(getOptionValue('--enable-source-maps'));
 }
 
@@ -715,7 +715,7 @@ function initializeFrozenIntrinsics() {
   if (getOptionValue('--frozen-intrinsics')) {
     process.emitWarning('The --frozen-intrinsics flag is experimental',
                         'ExperimentalWarning');
-    require('internal/freeze_intrinsics')();
+    require('../../internal/freeze_intrinsics')();
   }
 }
 
@@ -727,7 +727,7 @@ function loadPreloadModules() {
       Module: {
         _preloadModules,
       },
-    } = require('internal/modules/cjs/loader');
+    } = require('../../internal/modules/cjs/loader');
     _preloadModules(preloadModules);
   }
 }
diff --git a/lib/internal/process/promises.js b/lib/internal/process/promises.js
index d80ce1ef76..cf0105255a 100644
--- a/lib/internal/process/promises.js
+++ b/lib/internal/process/promises.js
@@ -20,7 +20,7 @@ const {
   setPromiseRejectCallback,
 } = internalBinding('task_queue');
 
-const { deprecate } = require('internal/util');
+const { deprecate } = require('../../internal/util');
 
 const {
   noSideEffectsToString,
@@ -35,8 +35,8 @@ const {
     async_id_symbol: kAsyncIdSymbol,
     trigger_async_id_symbol: kTriggerAsyncIdSymbol,
   },
-} = require('internal/async_hooks');
-const { isErrorStackTraceLimitWritable } = require('internal/errors');
+} = require('../../internal/async_hooks');
+const { isErrorStackTraceLimitWritable } = require('../../internal/errors');
 
 // *Must* match Environment::TickInfo::Fields in src/env.h.
 const kHasRejectionToWarn = 1;
@@ -90,7 +90,7 @@ function isErrorLike(o) {
 }
 
 function getUnhandledRejectionsMode() {
-  const { getOptionValue } = require('internal/options');
+  const { getOptionValue } = require('../../internal/options');
   switch (getOptionValue('--unhandled-rejections')) {
     case 'none':
       return kIgnoreUnhandledRejections;
diff --git a/lib/internal/process/report.js b/lib/internal/process/report.js
index 9889f913c3..33c95095e6 100644
--- a/lib/internal/process/report.js
+++ b/lib/internal/process/report.js
@@ -1,14 +1,14 @@
 'use strict';
 const {
   ERR_SYNTHETIC,
-} = require('internal/errors').codes;
-const { getValidatedPath } = require('internal/fs/utils');
+} = require('../../internal/errors').codes;
+const { getValidatedPath } = require('../../internal/fs/utils');
 const {
   validateBoolean,
   validateObject,
   validateSignalName,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const nr = internalBinding('report');
 const {
   JSONParse,
diff --git a/lib/internal/process/signal.js b/lib/internal/process/signal.js
index 548f19a65c..a1ca04995b 100644
--- a/lib/internal/process/signal.js
+++ b/lib/internal/process/signal.js
@@ -7,7 +7,7 @@ const {
 
 const {
   errnoException,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const { signals } = internalBinding('constants').os;
 
diff --git a/lib/internal/process/task_queues.js b/lib/internal/process/task_queues.js
index bcb5eef841..c0adafd97d 100644
--- a/lib/internal/process/task_queues.js
+++ b/lib/internal/process/task_queues.js
@@ -20,7 +20,7 @@ const {
   hasRejectionToWarn,
   listenForRejections,
   processPromiseRejections,
-} = require('internal/process/promises');
+} = require('../../internal/process/promises');
 
 const {
   getDefaultTriggerAsyncId,
@@ -32,12 +32,12 @@ const {
   emitAfter,
   emitDestroy,
   symbols: { async_id_symbol, trigger_async_id_symbol },
-} = require('internal/async_hooks');
-const FixedQueue = require('internal/fixed_queue');
+} = require('../../internal/async_hooks');
+const FixedQueue = require('../../internal/fixed_queue');
 
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const { AsyncResource } = require('async_hooks');
 
diff --git a/lib/internal/process/warning.js b/lib/internal/process/warning.js
index 3ce00004da..7bea1fb495 100644
--- a/lib/internal/process/warning.js
+++ b/lib/internal/process/warning.js
@@ -8,14 +8,14 @@ const {
   String,
 } = primordials;
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
   },
   isErrorStackTraceLimitWritable,
-} = require('internal/errors');
-const { validateString } = require('internal/validators');
+} = require('../../internal/errors');
+const { validateString } = require('../../internal/validators');
 
 // Lazily loaded
 let fs;
@@ -37,7 +37,7 @@ function lazyOption() {
   // This will load `warningFile` only once. If the flag is not set,
   // `warningFile` will be set to an empty string.
   if (warningFile === undefined) {
-    options = require('internal/options');
+    options = require('../../internal/options');
     if (options.getOptionValue('--diagnostic-dir') !== '') {
       warningFile = options.getOptionValue('--diagnostic-dir');
     }
@@ -55,7 +55,7 @@ function lazyOption() {
 let error;
 function writeOut(message) {
   if (!error) {
-    error = require('internal/console/global').error;
+    error = require('../../internal/console/global').error;
   }
   error(message);
 }
diff --git a/lib/internal/process/worker_thread_only.js b/lib/internal/process/worker_thread_only.js
index 2f5a10c9d6..de56fe7d00 100644
--- a/lib/internal/process/worker_thread_only.js
+++ b/lib/internal/process/worker_thread_only.js
@@ -5,7 +5,7 @@
 
 const {
   codes: { ERR_WORKER_UNSUPPORTED_OPERATION },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 function unavailable(name) {
   function unavailableInWorker() {
diff --git a/lib/internal/promise_hooks.js b/lib/internal/promise_hooks.js
index b58f2ba1cc..bf1180206b 100644
--- a/lib/internal/promise_hooks.js
+++ b/lib/internal/promise_hooks.js
@@ -11,8 +11,8 @@ const {
 const { setPromiseHooks } = internalBinding('async_wrap');
 const { triggerUncaughtException } = internalBinding('errors');
 
-const { kEmptyObject } = require('internal/util');
-const { validatePlainFunction } = require('internal/validators');
+const { kEmptyObject } = require('../internal/util');
+const { validatePlainFunction } = require('../internal/validators');
 
 const hooks = {
   init: [],
diff --git a/lib/internal/querystring.js b/lib/internal/querystring.js
index 46fdf564db..7a2bb2c2c0 100644
--- a/lib/internal/querystring.js
+++ b/lib/internal/querystring.js
@@ -9,7 +9,7 @@ const {
   StringPrototypeToUpperCase,
 } = primordials;
 
-const { ERR_INVALID_URI } = require('internal/errors').codes;
+const { ERR_INVALID_URI } = require('../internal/errors').codes;
 
 const hexTable = new Array(256);
 for (let i = 0; i < 256; ++i)
diff --git a/lib/internal/readline/callbacks.js b/lib/internal/readline/callbacks.js
index 692048c915..48c725f991 100644
--- a/lib/internal/readline/callbacks.js
+++ b/lib/internal/readline/callbacks.js
@@ -9,14 +9,14 @@ const {
     ERR_INVALID_ARG_VALUE,
     ERR_INVALID_CURSOR_POS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   CSI,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 
 const {
   kClearLine,
diff --git a/lib/internal/readline/emitKeypressEvents.js b/lib/internal/readline/emitKeypressEvents.js
index 1ac1091d70..4fb4afdd1d 100644
--- a/lib/internal/readline/emitKeypressEvents.js
+++ b/lib/internal/readline/emitKeypressEvents.js
@@ -9,10 +9,10 @@ const {
   charLengthAt,
   CSI,
   emitKeys,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 const {
   kSawKeyPress,
-} = require('internal/readline/interface');
+} = require('../../internal/readline/interface');
 
 const { clearTimeout, setTimeout } = require('timers');
 const {
diff --git a/lib/internal/readline/interface.js b/lib/internal/readline/interface.js
index f7f06674ef..4d69ee6dde 100644
--- a/lib/internal/readline/interface.js
+++ b/lib/internal/readline/interface.js
@@ -33,7 +33,7 @@ const {
   SafeStringIterator,
 } = primordials;
 
-const { codes } = require('internal/errors');
+const { codes } = require('../../internal/errors');
 
 const {
   ERR_INVALID_ARG_VALUE,
@@ -45,27 +45,27 @@ const {
   validateNumber,
   validateString,
   validateUint32,
-} = require('internal/validators');
-const { kEmptyObject } = require('internal/util');
+} = require('../../internal/validators');
+const { kEmptyObject } = require('../../internal/util');
 const {
   inspect,
   getStringWidth,
   stripVTControlCharacters,
-} = require('internal/util/inspect');
+} = require('../../internal/util/inspect');
 const EventEmitter = require('events');
 const {
   charLengthAt,
   charLengthLeft,
   commonPrefix,
   kSubstringSearch,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 let emitKeypressEvents;
 let kFirstEventParam;
 const {
   clearScreenDown,
   cursorTo,
   moveCursor,
-} = require('internal/readline/callbacks');
+} = require('../../internal/readline/callbacks');
 
 const { StringDecoder } = require('string_decoder');
 
@@ -300,7 +300,7 @@ function InterfaceConstructor(input, output, completer, terminal) {
       }
     }
 
-    emitKeypressEvents ??= require('internal/readline/emitKeypressEvents');
+    emitKeypressEvents ??= require('../../internal/readline/emitKeypressEvents');
     emitKeypressEvents(input, this);
 
     // `input` usually refers to stdin
@@ -1354,7 +1354,7 @@ class Interface extends InterfaceConstructor {
    */
   [SymbolAsyncIterator]() {
     if (this[kLineObjectStream] === undefined) {
-      kFirstEventParam ??= require('internal/events/symbols').kFirstEventParam;
+      kFirstEventParam ??= require('../../internal/events/symbols').kFirstEventParam;
       this[kLineObjectStream] = EventEmitter.on(
         this, 'line', {
           close: ['close'],
diff --git a/lib/internal/readline/promises.js b/lib/internal/readline/promises.js
index 1a0c7b4c80..2951b22aa6 100644
--- a/lib/internal/readline/promises.js
+++ b/lib/internal/readline/promises.js
@@ -6,10 +6,10 @@ const {
   Promise,
 } = primordials;
 
-const { CSI } = require('internal/readline/utils');
-const { validateBoolean, validateInteger } = require('internal/validators');
-const { isWritable } = require('internal/streams/utils');
-const { codes: { ERR_INVALID_ARG_TYPE } } = require('internal/errors');
+const { CSI } = require('../../internal/readline/utils');
+const { validateBoolean, validateInteger } = require('../../internal/validators');
+const { isWritable } = require('../../internal/streams/utils');
+const { codes: { ERR_INVALID_ARG_TYPE } } = require('../../internal/errors');
 
 const {
   kClearToLineBeginning,
diff --git a/lib/internal/repl.js b/lib/internal/repl.js
index 2dc79b2784..51c1317421 100644
--- a/lib/internal/repl.js
+++ b/lib/internal/repl.js
@@ -7,7 +7,7 @@ const {
 } = primordials;
 
 const REPL = require('repl');
-const { kStandaloneREPL } = require('internal/repl/utils');
+const { kStandaloneREPL } = require('../internal/repl/utils');
 
 module.exports = { __proto__: REPL };
 module.exports.createInternalRepl = createRepl;
diff --git a/lib/internal/repl/await.js b/lib/internal/repl/await.js
index e4a0d9719d..89bf0faedf 100644
--- a/lib/internal/repl/await.js
+++ b/lib/internal/repl/await.js
@@ -18,9 +18,9 @@ const {
   SyntaxError,
 } = primordials;
 
-const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;
-const walk = require('internal/deps/acorn/acorn-walk/dist/walk');
-const { Recoverable } = require('internal/repl');
+const parser = require('../../internal/deps/acorn/acorn/dist/acorn').Parser;
+const walk = require('../../internal/deps/acorn/acorn-walk/dist/walk');
+const { Recoverable } = require('../../internal/repl');
 
 function isTopLevelDeclaration(state) {
   return state.ancestors[state.ancestors.length - 2] === state.body;
diff --git a/lib/internal/repl/history.js b/lib/internal/repl/history.js
index d8c3617063..d4aaf26b01 100644
--- a/lib/internal/repl/history.js
+++ b/lib/internal/repl/history.js
@@ -12,10 +12,10 @@ const { Interface } = require('readline');
 const path = require('path');
 const fs = require('fs');
 const os = require('os');
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
-const permission = require('internal/process/permission');
+const permission = require('../../internal/process/permission');
 const { clearTimeout, setTimeout } = require('timers');
 
 const noop = FunctionPrototype;
diff --git a/lib/internal/repl/utils.js b/lib/internal/repl/utils.js
index f3697aa9b6..8ac8dc903b 100644
--- a/lib/internal/repl/utils.js
+++ b/lib/internal/repl/utils.js
@@ -22,32 +22,32 @@ const {
 } = primordials;
 
 const { tokTypes: tt, Parser: AcornParser } =
-  require('internal/deps/acorn/acorn/dist/acorn');
+  require('../../internal/deps/acorn/acorn/dist/acorn');
 
-const { sendInspectorCommand } = require('internal/util/inspector');
+const { sendInspectorCommand } = require('../../internal/util/inspector');
 
 const {
   ERR_INSPECTOR_NOT_AVAILABLE,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 const {
   clearLine,
   clearScreenDown,
   cursorTo,
   moveCursor,
-} = require('internal/readline/callbacks');
+} = require('../../internal/readline/callbacks');
 
 const {
   commonPrefix,
   kSubstringSearch,
-} = require('internal/readline/utils');
+} = require('../../internal/readline/utils');
 
 const {
   getStringWidth,
   inspect,
-} = require('internal/util/inspect');
+} = require('../../internal/util/inspect');
 
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/socket_list.js b/lib/internal/socket_list.js
index 9949a6cde4..d01c010cb0 100644
--- a/lib/internal/socket_list.js
+++ b/lib/internal/socket_list.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('internal/errors').codes;
+const { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('../internal/errors').codes;
 
 const EventEmitter = require('events');
 
diff --git a/lib/internal/socketaddress.js b/lib/internal/socketaddress.js
index e432c8a7d7..cf61964209 100644
--- a/lib/internal/socketaddress.js
+++ b/lib/internal/socketaddress.js
@@ -16,26 +16,26 @@ const {
   validateString,
   validatePort,
   validateUint32,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
   kEmptyObject,
-} = require('internal/util');
+} = require('../internal/util');
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 const kHandle = Symbol('kHandle');
 const kDetail = Symbol('kDetail');
diff --git a/lib/internal/source_map/prepare_stack_trace.js b/lib/internal/source_map/prepare_stack_trace.js
index 860564f4a3..d4a8cc67a0 100644
--- a/lib/internal/source_map/prepare_stack_trace.js
+++ b/lib/internal/source_map/prepare_stack_trace.js
@@ -12,19 +12,19 @@ const {
   SafeStringIterator,
 } = primordials;
 
-let debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('source_map', (fn) => {
   debug = fn;
 });
-const { getStringWidth } = require('internal/util/inspect');
+const { getStringWidth } = require('../../internal/util/inspect');
 const { readFileSync } = require('fs');
-const { findSourceMap } = require('internal/source_map/source_map_cache');
+const { findSourceMap } = require('../../internal/source_map/source_map_cache');
 const {
   kNoOverride,
   overrideStackTrace,
   maybeOverridePrepareStackTrace,
   kIsNodeError,
-} = require('internal/errors');
-const { fileURLToPath } = require('internal/url');
+} = require('../../internal/errors');
+const { fileURLToPath } = require('../../internal/url');
 const { setGetSourceMapErrorSource } = internalBinding('errors');
 
 // Create a prettified stacktrace, inserting context from source maps
diff --git a/lib/internal/source_map/source_map.js b/lib/internal/source_map/source_map.js
index 9e63eabaac..1898f759a9 100644
--- a/lib/internal/source_map/source_map.js
+++ b/lib/internal/source_map/source_map.js
@@ -75,7 +75,7 @@ const {
   StringPrototypeCharAt,
 } = primordials;
 
-const { validateObject } = require('internal/validators');
+const { validateObject } = require('../../internal/validators');
 
 let base64Map;
 
diff --git a/lib/internal/source_map/source_map_cache.js b/lib/internal/source_map/source_map_cache.js
index 2813da21df..1c455de29f 100644
--- a/lib/internal/source_map/source_map_cache.js
+++ b/lib/internal/source_map/source_map_cache.js
@@ -12,22 +12,22 @@ const {
 
 // See https://sourcemaps.info/spec.html for SourceMap V3 specification.
 const { Buffer } = require('buffer');
-let debug = require('internal/util/debuglog').debuglog('source_map', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('source_map', (fn) => {
   debug = fn;
 });
 
-const { validateBoolean } = require('internal/validators');
+const { validateBoolean } = require('../../internal/validators');
 const {
   setSourceMapsEnabled: setSourceMapsNative,
   setPrepareStackTraceCallback,
 } = internalBinding('errors');
-const { getLazy } = require('internal/util');
+const { getLazy } = require('../../internal/util');
 
 // Since the CJS module cache is mutable, which leads to memory leaks when
 // modules are deleted, we use a WeakMap so that the source map cache will
 // be purged automatically:
 const getCjsSourceMapCache = getLazy(() => {
-  const { IterableWeakMap } = require('internal/util/iterable_weak_map');
+  const { IterableWeakMap } = require('../../internal/util/iterable_weak_map');
   return new IterableWeakMap();
 });
 
@@ -39,7 +39,7 @@ const kLeadingProtocol = /^\w+:\/\//;
 const kSourceMappingURLMagicComment = /\/[*/]#\s+sourceMappingURL=(?<sourceMappingURL>[^\s]+)/g;
 const kSourceURLMagicComment = /\/[*/]#\s+sourceURL=(?<sourceURL>[^\s]+)/g;
 
-const { fileURLToPath, pathToFileURL, URL } = require('internal/url');
+const { fileURLToPath, pathToFileURL, URL } = require('../../internal/url');
 
 let SourceMap;
 
@@ -56,13 +56,13 @@ function setSourceMapsEnabled(val) {
   if (val) {
     const {
       prepareStackTrace,
-    } = require('internal/source_map/prepare_stack_trace');
+    } = require('../../internal/source_map/prepare_stack_trace');
     setPrepareStackTraceCallback(prepareStackTrace);
   } else if (sourceMapsEnabled !== undefined) {
     // Reset prepare stack trace callback only when disabling source maps.
     const {
       prepareStackTrace,
-    } = require('internal/errors');
+    } = require('../../internal/errors');
     setPrepareStackTraceCallback(prepareStackTrace);
   }
 
@@ -105,7 +105,7 @@ function maybeCacheSourceMap(filename, content, cjsModuleInstance, isGeneratedSo
   const sourceMapsEnabled = getSourceMapsEnabled();
   if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;
   try {
-    const { normalizeReferrerURL } = require('internal/modules/helpers');
+    const { normalizeReferrerURL } = require('../../internal/modules/helpers');
     filename = normalizeReferrerURL(filename);
   } catch (err) {
     // This is most likely an invalid filename in sourceURL of [eval]-wrapper.
@@ -300,7 +300,7 @@ function findSourceMap(sourceURL) {
     sourceURL = pathToFileURL(sourceURL).href;
   }
   if (!SourceMap) {
-    SourceMap = require('internal/source_map/source_map').SourceMap;
+    SourceMap = require('../../internal/source_map/source_map').SourceMap;
   }
   let entry = esmSourceMapCache.get(sourceURL) ?? generatedSourceMapCache.get(sourceURL);
   if (entry === undefined) {
diff --git a/lib/internal/stream_base_commons.js b/lib/internal/stream_base_commons.js
index 1555956aff..6ac1ce0332 100644
--- a/lib/internal/stream_base_commons.js
+++ b/lib/internal/stream_base_commons.js
@@ -6,7 +6,7 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { FastBuffer } = require('internal/buffer');
+const { FastBuffer } = require('../internal/buffer');
 const {
   WriteWrap,
   kReadBytesOrError,
@@ -18,16 +18,16 @@ const {
 const { UV_EOF } = internalBinding('uv');
 const {
   errnoException,
-} = require('internal/errors');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+} = require('../internal/errors');
+const { owner_symbol } = require('../internal/async_hooks').symbols;
 const {
   kTimeout,
   setUnrefTimeout,
   getTimerDuration,
-} = require('internal/timers');
-const { isUint8Array } = require('internal/util/types');
+} = require('../internal/timers');
+const { isUint8Array } = require('../internal/util/types');
 const { clearTimeout } = require('timers');
-const { validateFunction } = require('internal/validators');
+const { validateFunction } = require('../internal/validators');
 
 const kMaybeDestroy = Symbol('kMaybeDestroy');
 const kUpdateTimer = Symbol('kUpdateTimer');
@@ -35,7 +35,7 @@ const kAfterAsyncWrite = Symbol('kAfterAsyncWrite');
 const kHandle = Symbol('kHandle');
 const kSession = Symbol('kSession');
 
-let debug = require('internal/util/debuglog').debuglog('stream', (fn) => {
+let debug = require('../internal/util/debuglog').debuglog('stream', (fn) => {
   debug = fn;
 });
 const kBuffer = Symbol('kBuffer');
diff --git a/lib/internal/streams/add-abort-signal.js b/lib/internal/streams/add-abort-signal.js
index 819be3ff63..56449ab13c 100644
--- a/lib/internal/streams/add-abort-signal.js
+++ b/lib/internal/streams/add-abort-signal.js
@@ -7,15 +7,15 @@ const {
 const {
   AbortError,
   codes,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   isNodeStream,
   isWebStream,
   kControllerErrorFunction,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
-const eos = require('internal/streams/end-of-stream');
+const eos = require('../../internal/streams/end-of-stream');
 const { ERR_INVALID_ARG_TYPE } = codes;
 let addAbortListener;
 
diff --git a/lib/internal/streams/buffer_list.js b/lib/internal/streams/buffer_list.js
index 4629bdbf16..eb24722c33 100644
--- a/lib/internal/streams/buffer_list.js
+++ b/lib/internal/streams/buffer_list.js
@@ -8,7 +8,7 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../../internal/util/inspect');
 
 module.exports = class BufferList {
   constructor() {
diff --git a/lib/internal/streams/compose.js b/lib/internal/streams/compose.js
index 22f010b983..ef95dc5e46 100644
--- a/lib/internal/streams/compose.js
+++ b/lib/internal/streams/compose.js
@@ -1,8 +1,8 @@
 'use strict';
 
-const { pipeline } = require('internal/streams/pipeline');
-const Duplex = require('internal/streams/duplex');
-const { destroyer } = require('internal/streams/destroy');
+const { pipeline } = require('../../internal/streams/pipeline');
+const Duplex = require('../../internal/streams/duplex');
+const { destroyer } = require('../../internal/streams/destroy');
 const {
   isNodeStream,
   isReadable,
@@ -11,15 +11,15 @@ const {
   isTransformStream,
   isWritableStream,
   isReadableStream,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 const {
   AbortError,
   codes: {
     ERR_INVALID_ARG_VALUE,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
-const eos = require('internal/streams/end-of-stream');
+} = require('../../internal/errors');
+const eos = require('../../internal/streams/end-of-stream');
 
 module.exports = function compose(...streams) {
   if (streams.length === 0) {
diff --git a/lib/internal/streams/destroy.js b/lib/internal/streams/destroy.js
index cfb49f2c7c..4f08479e0e 100644
--- a/lib/internal/streams/destroy.js
+++ b/lib/internal/streams/destroy.js
@@ -6,7 +6,7 @@ const {
     ERR_MULTIPLE_CALLBACK,
   },
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   Symbol,
 } = primordials;
@@ -15,7 +15,7 @@ const {
   isDestroyed,
   isFinished,
   isServerRequest,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
 const kDestroy = Symbol('kDestroy');
 const kConstruct = Symbol('kConstruct');
diff --git a/lib/internal/streams/duplex.js b/lib/internal/streams/duplex.js
index 799eb5a320..91f8f14666 100644
--- a/lib/internal/streams/duplex.js
+++ b/lib/internal/streams/duplex.js
@@ -35,8 +35,8 @@ const {
 
 module.exports = Duplex;
 
-const Readable = require('internal/streams/readable');
-const Writable = require('internal/streams/writable');
+const Readable = require('../../internal/streams/readable');
+const Writable = require('../../internal/streams/writable');
 
 ObjectSetPrototypeOf(Duplex.prototype, Readable.prototype);
 ObjectSetPrototypeOf(Duplex, Readable);
@@ -123,7 +123,7 @@ let webStreamsAdapters;
 // Lazy to avoid circular references
 function lazyWebStreams() {
   if (webStreamsAdapters === undefined)
-    webStreamsAdapters = require('internal/webstreams/adapters');
+    webStreamsAdapters = require('../../internal/webstreams/adapters');
   return webStreamsAdapters;
 }
 
@@ -141,7 +141,7 @@ let duplexify;
 
 Duplex.from = function(body) {
   if (!duplexify) {
-    duplexify = require('internal/streams/duplexify');
+    duplexify = require('../../internal/streams/duplexify');
   }
   return duplexify(body, 'body');
 };
diff --git a/lib/internal/streams/duplexify.js b/lib/internal/streams/duplexify.js
index 788bcb6324..042a9980f1 100644
--- a/lib/internal/streams/duplexify.js
+++ b/lib/internal/streams/duplexify.js
@@ -10,26 +10,26 @@ const {
   isDuplexNodeStream,
   isReadableStream,
   isWritableStream,
-} = require('internal/streams/utils');
-const eos = require('internal/streams/end-of-stream');
+} = require('../../internal/streams/utils');
+const eos = require('../../internal/streams/end-of-stream');
 const {
   AbortError,
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_RETURN_VALUE,
   },
-} = require('internal/errors');
-const { destroyer } = require('internal/streams/destroy');
-const Duplex = require('internal/streams/duplex');
-const Readable = require('internal/streams/readable');
-const Writable = require('internal/streams/writable');
-const { createDeferredPromise } = require('internal/util');
-const from = require('internal/streams/from');
+} = require('../../internal/errors');
+const { destroyer } = require('../../internal/streams/destroy');
+const Duplex = require('../../internal/streams/duplex');
+const Readable = require('../../internal/streams/readable');
+const Writable = require('../../internal/streams/writable');
+const { createDeferredPromise } = require('../../internal/util');
+const from = require('../../internal/streams/from');
 
 const {
   isBlob,
-} = require('internal/blob');
-const { AbortController } = require('internal/abort_controller');
+} = require('../../internal/blob');
+const { AbortController } = require('../../internal/abort_controller');
 
 const {
   FunctionPrototypeCall,
diff --git a/lib/internal/streams/end-of-stream.js b/lib/internal/streams/end-of-stream.js
index 663222e314..675b14f2ec 100644
--- a/lib/internal/streams/end-of-stream.js
+++ b/lib/internal/streams/end-of-stream.js
@@ -6,7 +6,7 @@
 const {
   AbortError,
   codes,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_STREAM_PREMATURE_CLOSE,
@@ -14,13 +14,13 @@ const {
 const {
   kEmptyObject,
   once,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   validateAbortSignal,
   validateFunction,
   validateObject,
   validateBoolean,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   Promise,
@@ -43,7 +43,7 @@ const {
   isNodeStream,
   willEmitClose: _willEmitClose,
   kIsClosedPromise,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 let addAbortListener;
 
 function isRequest(stream) {
diff --git a/lib/internal/streams/from.js b/lib/internal/streams/from.js
index c272a01f41..0bfa1a11fc 100644
--- a/lib/internal/streams/from.js
+++ b/lib/internal/streams/from.js
@@ -10,7 +10,7 @@ const { Buffer } = require('buffer');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_STREAM_NULL_VALUES,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 function from(Readable, iterable, opts) {
   let iterator;
diff --git a/lib/internal/streams/operators.js b/lib/internal/streams/operators.js
index 74c67b0280..5365dad830 100644
--- a/lib/internal/streams/operators.js
+++ b/lib/internal/streams/operators.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const { AbortController, AbortSignal } = require('internal/abort_controller');
+const { AbortController, AbortSignal } = require('../../internal/abort_controller');
 
 const {
   codes: {
@@ -10,19 +10,19 @@ const {
     ERR_OUT_OF_RANGE,
   },
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateAbortSignal,
   validateInteger,
   validateObject,
-} = require('internal/validators');
-const { kWeakHandler, kResistStopPropagation } = require('internal/event_target');
-const { finished } = require('internal/streams/end-of-stream');
-const staticCompose = require('internal/streams/compose');
+} = require('../../internal/validators');
+const { kWeakHandler, kResistStopPropagation } = require('../../internal/event_target');
+const { finished } = require('../../internal/streams/end-of-stream');
+const staticCompose = require('../../internal/streams/compose');
 const {
   addAbortSignalNoValidate,
-} = require('internal/streams/add-abort-signal');
-const { isWritable, isNodeStream } = require('internal/streams/utils');
+} = require('../../internal/streams/add-abort-signal');
+const { isWritable, isNodeStream } = require('../../internal/streams/utils');
 
 const {
   ArrayPrototypePush,
diff --git a/lib/internal/streams/passthrough.js b/lib/internal/streams/passthrough.js
index d37f9caf01..5127cc4e62 100644
--- a/lib/internal/streams/passthrough.js
+++ b/lib/internal/streams/passthrough.js
@@ -31,7 +31,7 @@ const {
 
 module.exports = PassThrough;
 
-const Transform = require('internal/streams/transform');
+const Transform = require('../../internal/streams/transform');
 ObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype);
 ObjectSetPrototypeOf(PassThrough, Transform);
 
diff --git a/lib/internal/streams/pipeline.js b/lib/internal/streams/pipeline.js
index aac7f65f04..87e3e971bf 100644
--- a/lib/internal/streams/pipeline.js
+++ b/lib/internal/streams/pipeline.js
@@ -10,10 +10,10 @@ const {
   SymbolDispose,
 } = primordials;
 
-const eos = require('internal/streams/end-of-stream');
-const { once } = require('internal/util');
-const destroyImpl = require('internal/streams/destroy');
-const Duplex = require('internal/streams/duplex');
+const eos = require('../../internal/streams/end-of-stream');
+const { once } = require('../../internal/util');
+const destroyImpl = require('../../internal/streams/destroy');
+const Duplex = require('../../internal/streams/duplex');
 const {
   aggregateTwoErrors,
   codes: {
@@ -24,12 +24,12 @@ const {
     ERR_STREAM_PREMATURE_CLOSE,
   },
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   validateFunction,
   validateAbortSignal,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   isIterable,
@@ -40,8 +40,8 @@ const {
   isWebStream,
   isReadableStream,
   isReadableFinished,
-} = require('internal/streams/utils');
-const { AbortController } = require('internal/abort_controller');
+} = require('../../internal/streams/utils');
+const { AbortController } = require('../../internal/abort_controller');
 
 let PassThrough;
 let Readable;
@@ -88,7 +88,7 @@ function makeAsyncIterable(val) {
 
 async function* fromReadable(val) {
   if (!Readable) {
-    Readable = require('internal/streams/readable');
+    Readable = require('../../internal/streams/readable');
   }
 
   yield* Readable.prototype[SymbolAsyncIterator].call(val);
@@ -311,7 +311,7 @@ function pipelineImpl(streams, callback, opts) {
         }
       } else {
         if (!PassThrough) {
-          PassThrough = require('internal/streams/passthrough');
+          PassThrough = require('../../internal/streams/passthrough');
         }
 
         // If the last argument to pipeline is not a stream
diff --git a/lib/internal/streams/readable.js b/lib/internal/streams/readable.js
index f551053bf7..9629f9cf81 100644
--- a/lib/internal/streams/readable.js
+++ b/lib/internal/streams/readable.js
@@ -40,23 +40,23 @@ module.exports = Readable;
 Readable.ReadableState = ReadableState;
 
 const EE = require('events');
-const { Stream, prependListener } = require('internal/streams/legacy');
+const { Stream, prependListener } = require('../../internal/streams/legacy');
 const { Buffer } = require('buffer');
 
 const {
   addAbortSignal,
-} = require('internal/streams/add-abort-signal');
-const eos = require('internal/streams/end-of-stream');
+} = require('../../internal/streams/add-abort-signal');
+const eos = require('../../internal/streams/end-of-stream');
 
-let debug = require('internal/util/debuglog').debuglog('stream', (fn) => {
+let debug = require('../../internal/util/debuglog').debuglog('stream', (fn) => {
   debug = fn;
 });
-const BufferList = require('internal/streams/buffer_list');
-const destroyImpl = require('internal/streams/destroy');
+const BufferList = require('../../internal/streams/buffer_list');
+const destroyImpl = require('../../internal/streams/destroy');
 const {
   getHighWaterMark,
   getDefaultHighWaterMark,
-} = require('internal/streams/state');
+} = require('../../internal/streams/state');
 
 const {
   aggregateTwoErrors,
@@ -69,14 +69,14 @@ const {
     ERR_UNKNOWN_ENCODING,
   },
   AbortError,
-} = require('internal/errors');
-const { validateObject } = require('internal/validators');
+} = require('../../internal/errors');
+const { validateObject } = require('../../internal/validators');
 
 const kPaused = Symbol('kPaused');
 const kState = Symbol('kState');
 
 const { StringDecoder } = require('string_decoder');
-const from = require('internal/streams/from');
+const from = require('../../internal/streams/from');
 
 ObjectSetPrototypeOf(Readable.prototype, Stream.prototype);
 ObjectSetPrototypeOf(Readable, Stream);
@@ -1445,7 +1445,7 @@ let webStreamsAdapters;
 // Lazy to avoid circular references
 function lazyWebStreams() {
   if (webStreamsAdapters === undefined)
-    webStreamsAdapters = require('internal/webstreams/adapters');
+    webStreamsAdapters = require('../../internal/webstreams/adapters');
   return webStreamsAdapters;
 }
 
diff --git a/lib/internal/streams/state.js b/lib/internal/streams/state.js
index 98f8d8a6cc..f60164e6b4 100644
--- a/lib/internal/streams/state.js
+++ b/lib/internal/streams/state.js
@@ -4,9 +4,9 @@ const {
   MathFloor,
   NumberIsInteger,
 } = primordials;
-const { validateInteger } = require('internal/validators');
+const { validateInteger } = require('../../internal/validators');
 
-const { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;
+const { ERR_INVALID_ARG_VALUE } = require('../../internal/errors').codes;
 
 let defaultHighWaterMarkBytes = 16 * 1024;
 let defaultHighWaterMarkObjectMode = 16;
diff --git a/lib/internal/streams/transform.js b/lib/internal/streams/transform.js
index 02646f4434..6c51b79443 100644
--- a/lib/internal/streams/transform.js
+++ b/lib/internal/streams/transform.js
@@ -71,9 +71,9 @@ const {
 module.exports = Transform;
 const {
   ERR_METHOD_NOT_IMPLEMENTED,
-} = require('internal/errors').codes;
-const Duplex = require('internal/streams/duplex');
-const { getHighWaterMark } = require('internal/streams/state');
+} = require('../../internal/errors').codes;
+const Duplex = require('../../internal/streams/duplex');
+const { getHighWaterMark } = require('../../internal/streams/state');
 ObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);
 ObjectSetPrototypeOf(Transform, Duplex);
 
diff --git a/lib/internal/streams/writable.js b/lib/internal/streams/writable.js
index b8f8b72ce8..7fbc834584 100644
--- a/lib/internal/streams/writable.js
+++ b/lib/internal/streams/writable.js
@@ -41,18 +41,18 @@ module.exports = Writable;
 Writable.WritableState = WritableState;
 
 const EE = require('events');
-const Stream = require('internal/streams/legacy').Stream;
+const Stream = require('../../internal/streams/legacy').Stream;
 const { Buffer } = require('buffer');
-const destroyImpl = require('internal/streams/destroy');
+const destroyImpl = require('../../internal/streams/destroy');
 
 const {
   addAbortSignal,
-} = require('internal/streams/add-abort-signal');
+} = require('../../internal/streams/add-abort-signal');
 
 const {
   getHighWaterMark,
   getDefaultHighWaterMark,
-} = require('internal/streams/state');
+} = require('../../internal/streams/state');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_METHOD_NOT_IMPLEMENTED,
@@ -63,7 +63,7 @@ const {
   ERR_STREAM_NULL_VALUES,
   ERR_STREAM_WRITE_AFTER_END,
   ERR_UNKNOWN_ENCODING,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 
 const { errorOrDestroy } = destroyImpl;
 
@@ -1126,7 +1126,7 @@ let webStreamsAdapters;
 // Lazy to avoid circular references
 function lazyWebStreams() {
   if (webStreamsAdapters === undefined)
-    webStreamsAdapters = require('internal/webstreams/adapters');
+    webStreamsAdapters = require('../../internal/webstreams/adapters');
   return webStreamsAdapters;
 }
 
diff --git a/lib/internal/structured_clone.js b/lib/internal/structured_clone.js
index 0392232bad..b1a1a3766d 100644
--- a/lib/internal/structured_clone.js
+++ b/lib/internal/structured_clone.js
@@ -2,12 +2,12 @@
 
 const {
   codes: { ERR_MISSING_ARGS },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   MessageChannel,
   receiveMessageOnPort,
-} = require('internal/worker/io');
+} = require('../internal/worker/io');
 
 let channel;
 function structuredClone(value, options = undefined) {
diff --git a/lib/internal/test/transfer.js b/lib/internal/test/transfer.js
index 72361fb221..9c4809c9a7 100644
--- a/lib/internal/test/transfer.js
+++ b/lib/internal/test/transfer.js
@@ -4,7 +4,7 @@ const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 process.emitWarning(
   'These APIs are for internal testing only. Do not use them.',
diff --git a/lib/internal/test_runner/coverage.js b/lib/internal/test_runner/coverage.js
index 7727ab0060..4d6acaa48f 100644
--- a/lib/internal/test_runner/coverage.js
+++ b/lib/internal/test_runner/coverage.js
@@ -22,10 +22,10 @@ const {
   opendirSync,
   readFileSync,
 } = require('fs');
-const { setupCoverageHooks } = require('internal/util');
+const { setupCoverageHooks } = require('../../internal/util');
 const { tmpdir } = require('os');
 const { join, resolve } = require('path');
-const { fileURLToPath } = require('internal/url');
+const { fileURLToPath } = require('../../internal/url');
 const kCoverageFileRegex = /^coverage-(\d+)-(\d{13})-(\d+)\.json$/;
 const kIgnoreRegex = /\/\* node:coverage ignore next (?<count>\d+ )?\*\//;
 const kLineEndingRegex = /\r?\n$/u;
diff --git a/lib/internal/test_runner/harness.js b/lib/internal/test_runner/harness.js
index 2f18b0bcf0..a19fb4a0e4 100644
--- a/lib/internal/test_runner/harness.js
+++ b/lib/internal/test_runner/harness.js
@@ -14,16 +14,16 @@ const {
   codes: {
     ERR_TEST_FAILURE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const { exitCodes: { kGenericUserError } } = internalBinding('errors');
 
-const { kEmptyObject } = require('internal/util');
-const { kCancelledByParent, Test, Suite } = require('internal/test_runner/test');
+const { kEmptyObject } = require('../../internal/util');
+const { kCancelledByParent, Test, Suite } = require('../../internal/test_runner/test');
 const {
   parseCommandLine,
   reporterScope,
   setupTestReporters,
-} = require('internal/test_runner/utils');
+} = require('../../internal/test_runner/utils');
 const { bigint: hrtime } = process.hrtime;
 
 const testResources = new SafeMap();
@@ -82,7 +82,7 @@ function configureCoverage(rootTest, globalOptions) {
     return null;
   }
 
-  const { setupCoverage } = require('internal/test_runner/coverage');
+  const { setupCoverage } = require('../../internal/test_runner/coverage');
 
   try {
     return setupCoverage();
diff --git a/lib/internal/test_runner/mock/mock.js b/lib/internal/test_runner/mock/mock.js
index 838a530ddd..16e14d4745 100644
--- a/lib/internal/test_runner/mock/mock.js
+++ b/lib/internal/test_runner/mock/mock.js
@@ -18,15 +18,15 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
-const { kEmptyObject } = require('internal/util');
+} = require('../../../internal/errors');
+const { kEmptyObject } = require('../../../internal/util');
 const {
   validateBoolean,
   validateFunction,
   validateInteger,
   validateObject,
-} = require('internal/validators');
-const { MockTimers } = require('internal/test_runner/mock/mock_timers');
+} = require('../../../internal/validators');
+const { MockTimers } = require('../../../internal/test_runner/mock/mock_timers');
 
 function kDefaultFunction() {}
 
diff --git a/lib/internal/test_runner/mock/mock_timers.js b/lib/internal/test_runner/mock/mock_timers.js
index 1ff6489885..e3b69e4861 100644
--- a/lib/internal/test_runner/mock/mock_timers.js
+++ b/lib/internal/test_runner/mock/mock_timers.js
@@ -2,7 +2,7 @@
 
 const {
   emitExperimentalWarning,
-} = require('internal/util');
+} = require('../../../internal/util');
 
 const {
   ArrayPrototypeAt,
@@ -21,7 +21,7 @@ const {
 const {
   validateAbortSignal,
   validateArray,
-} = require('internal/validators');
+} = require('../../../internal/validators');
 
 const {
   AbortError,
@@ -29,9 +29,9 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../../internal/errors');
 
-const PriorityQueue = require('internal/priority_queue');
+const PriorityQueue = require('../../../internal/priority_queue');
 const nodeTimers = require('timers');
 const nodeTimersPromises = require('timers/promises');
 const EventEmitter = require('events');
@@ -133,7 +133,7 @@ class MockTimers {
         emitter.emit('data', { __proto__: null, aborted: true, reason });
       };
 
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../../../internal/event_target').kResistStopPropagation;
       options.signal.addEventListener('abort', onAbort, {
         __proto__: null,
         once: true,
@@ -203,7 +203,7 @@ class MockTimers {
       }, ms);
 
       if (options?.signal) {
-        kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+        kResistStopPropagation ??= require('../../../internal/event_target').kResistStopPropagation;
         options.signal.addEventListener('abort', onabort, {
           __proto__: null,
           once: true,
diff --git a/lib/internal/test_runner/reporter/junit.js b/lib/internal/test_runner/reporter/junit.js
index b45c233861..fea5c886d4 100644
--- a/lib/internal/test_runner/reporter/junit.js
+++ b/lib/internal/test_runner/reporter/junit.js
@@ -12,7 +12,7 @@ const {
   StringPrototypeRepeat,
 } = primordials;
 
-const { inspectWithNoCustomRetry } = require('internal/errors');
+const { inspectWithNoCustomRetry } = require('../../../internal/errors');
 const { hostname } = require('os');
 
 const inspectOptions = { __proto__: null, colors: false, breakLength: Infinity };
diff --git a/lib/internal/test_runner/reporter/spec.js b/lib/internal/test_runner/reporter/spec.js
index 0c5a3e95c7..d81d659d17 100644
--- a/lib/internal/test_runner/reporter/spec.js
+++ b/lib/internal/test_runner/reporter/spec.js
@@ -12,11 +12,11 @@ const {
   StringPrototypeRepeat,
 } = primordials;
 const assert = require('assert');
-const Transform = require('internal/streams/transform');
-const { inspectWithNoCustomRetry } = require('internal/errors');
-const { green, blue, red, white, gray, shouldColorize } = require('internal/util/colors');
-const { kSubtestsFailed } = require('internal/test_runner/test');
-const { getCoverageReport } = require('internal/test_runner/utils');
+const Transform = require('../../../internal/streams/transform');
+const { inspectWithNoCustomRetry } = require('../../../internal/errors');
+const { green, blue, red, white, gray, shouldColorize } = require('../../../internal/util/colors');
+const { kSubtestsFailed } = require('../../../internal/test_runner/test');
+const { getCoverageReport } = require('../../../internal/test_runner/utils');
 const { relative } = require('path');
 
 const inspectOptions = { __proto__: null, colors: shouldColorize(process.stdout), breakLength: Infinity };
diff --git a/lib/internal/test_runner/reporter/tap.js b/lib/internal/test_runner/reporter/tap.js
index 1f60cfa619..3f235183d5 100644
--- a/lib/internal/test_runner/reporter/tap.js
+++ b/lib/internal/test_runner/reporter/tap.js
@@ -11,9 +11,9 @@ const {
   StringPrototypeReplaceAll,
   StringPrototypeRepeat,
 } = primordials;
-const { inspectWithNoCustomRetry } = require('internal/errors');
-const { isError, kEmptyObject } = require('internal/util');
-const { getCoverageReport } = require('internal/test_runner/utils');
+const { inspectWithNoCustomRetry } = require('../../../internal/errors');
+const { isError, kEmptyObject } = require('../../../internal/util');
+const { getCoverageReport } = require('../../../internal/test_runner/utils');
 const kDefaultIndent = '    '; // 4 spaces
 const kFrameStartRegExp = /^ {4}at /;
 const kLineBreakRegExp = /\n|\r\n/;
@@ -22,7 +22,7 @@ const inspectOptions = { __proto__: null, colors: false, breakLength: Infinity }
 let testModule; // Lazy loaded due to circular dependency.
 
 function lazyLoadTest() {
-  testModule ??= require('internal/test_runner/test');
+  testModule ??= require('../../../internal/test_runner/test');
   return testModule;
 }
 
diff --git a/lib/internal/test_runner/reporter/v8-serializer.js b/lib/internal/test_runner/reporter/v8-serializer.js
index cfeedfdff3..04a11e18df 100644
--- a/lib/internal/test_runner/reporter/v8-serializer.js
+++ b/lib/internal/test_runner/reporter/v8-serializer.js
@@ -5,7 +5,7 @@ const {
 } = primordials;
 const { DefaultSerializer } = require('v8');
 const { Buffer } = require('buffer');
-const { serializeError } = require('internal/error_serdes');
+const { serializeError } = require('../../../internal/error_serdes');
 
 
 module.exports = async function* v8Reporter(source) {
diff --git a/lib/internal/test_runner/runner.js b/lib/internal/test_runner/runner.js
index cc9bcc09b7..2f5b6da875 100644
--- a/lib/internal/test_runner/runner.js
+++ b/lib/internal/test_runner/runner.js
@@ -28,15 +28,15 @@ const {
 } = primordials;
 
 const { spawn } = require('child_process');
-const { finished } = require('internal/streams/end-of-stream');
+const { finished } = require('../../internal/streams/end-of-stream');
 const { resolve } = require('path');
 const { DefaultDeserializer, DefaultSerializer } = require('v8');
 // TODO(aduh95): switch to internal/readline/interface when backporting to Node.js 16.x is no longer a concern.
 const { createInterface } = require('readline');
-const { deserializeError } = require('internal/error_serdes');
+const { deserializeError } = require('../../internal/error_serdes');
 const { Buffer } = require('buffer');
-const { FilesWatcher } = require('internal/watch_mode/files_watcher');
-const console = require('internal/console/global');
+const { FilesWatcher } = require('../../internal/watch_mode/files_watcher');
+const console = require('../../internal/console/global');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
@@ -44,19 +44,19 @@ const {
     ERR_TEST_FAILURE,
     ERR_OUT_OF_RANGE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 const {
   validateArray,
   validateBoolean,
   validateFunction,
   validateObject,
   validateInteger,
-} = require('internal/validators');
-const { getInspectPort, isUsingInspector, isInspectorMessage } = require('internal/util/inspector');
-const { isRegExp } = require('internal/util/types');
-const { kEmptyObject } = require('internal/util');
-const { kEmitMessage } = require('internal/test_runner/tests_stream');
-const { createTestTree } = require('internal/test_runner/harness');
+} = require('../../internal/validators');
+const { getInspectPort, isUsingInspector, isInspectorMessage } = require('../../internal/util/inspector');
+const { isRegExp } = require('../../internal/util/types');
+const { kEmptyObject } = require('../../internal/util');
+const { kEmitMessage } = require('../../internal/test_runner/tests_stream');
+const { createTestTree } = require('../../internal/test_runner/harness');
 const {
   kAborted,
   kCancelledByParent,
@@ -64,14 +64,14 @@ const {
   kTestCodeFailure,
   kTestTimeoutFailure,
   Test,
-} = require('internal/test_runner/test');
+} = require('../../internal/test_runner/test');
 
 const {
   convertStringToRegExp,
   countCompletedTest,
   kDefaultPattern,
-} = require('internal/test_runner/utils');
-const { Glob } = require('internal/fs/glob');
+} = require('../../internal/test_runner/utils');
+const { Glob } = require('../../internal/fs/glob');
 const { once } = require('events');
 const {
   triggerUncaughtException,
@@ -424,7 +424,7 @@ function watchFiles(testFiles, opts) {
     }));
   });
   if (opts.signal) {
-    kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+    kResistStopPropagation ??= require('../../internal/event_target').kResistStopPropagation;
     opts.signal.addEventListener(
       'abort',
       () => opts.root.postRun(),
diff --git a/lib/internal/test_runner/test.js b/lib/internal/test_runner/test.js
index 4eb02c5d4e..828777aa43 100644
--- a/lib/internal/test_runner/test.js
+++ b/lib/internal/test_runner/test.js
@@ -27,36 +27,36 @@ const {
 const { getCallerLocation } = internalBinding('util');
 const { addAbortListener } = require('events');
 const { AsyncResource } = require('async_hooks');
-const { AbortController } = require('internal/abort_controller');
+const { AbortController } = require('../../internal/abort_controller');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_TEST_FAILURE,
   },
   AbortError,
-} = require('internal/errors');
-const { MockTracker } = require('internal/test_runner/mock/mock');
-const { TestsStream } = require('internal/test_runner/tests_stream');
+} = require('../../internal/errors');
+const { MockTracker } = require('../../internal/test_runner/mock/mock');
+const { TestsStream } = require('../../internal/test_runner/tests_stream');
 const {
   createDeferredCallback,
   countCompletedTest,
   isTestFailureError,
   parseCommandLine,
-} = require('internal/test_runner/utils');
+} = require('../../internal/test_runner/utils');
 const {
   createDeferredPromise,
   kEmptyObject,
   once: runOnce,
-} = require('internal/util');
-const { isPromise } = require('internal/util/types');
+} = require('../../internal/util');
+const { isPromise } = require('../../internal/util/types');
 const {
   validateAbortSignal,
   validateNumber,
   validateOneOf,
   validateUint32,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const { setTimeout } = require('timers');
-const { TIMEOUT_MAX } = require('internal/timers');
+const { TIMEOUT_MAX } = require('../../internal/timers');
 const { availableParallelism } = require('os');
 const { bigint: hrtime } = process.hrtime;
 const kCallbackAndPromisePresent = 'callbackAndPromisePresent';
@@ -306,7 +306,7 @@ class Test extends AsyncResource {
 
     validateAbortSignal(signal, 'options.signal');
     if (signal) {
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../../internal/event_target').kResistStopPropagation;
     }
 
     this.outerSignal?.addEventListener(
diff --git a/lib/internal/test_runner/tests_stream.js b/lib/internal/test_runner/tests_stream.js
index f7730caac0..aeab432352 100644
--- a/lib/internal/test_runner/tests_stream.js
+++ b/lib/internal/test_runner/tests_stream.js
@@ -4,7 +4,7 @@ const {
   ArrayPrototypeShift,
   Symbol,
 } = primordials;
-const Readable = require('internal/streams/readable');
+const Readable = require('../../internal/streams/readable');
 
 const kEmitMessage = Symbol('kEmitMessage');
 class TestsStream extends Readable {
diff --git a/lib/internal/test_runner/utils.js b/lib/internal/test_runner/utils.js
index b70ca649c8..ed52d6813c 100644
--- a/lib/internal/test_runner/utils.js
+++ b/lib/internal/test_runner/utils.js
@@ -23,10 +23,10 @@ const {
 const { AsyncResource } = require('async_hooks');
 const { relative } = require('path');
 const { createWriteStream } = require('fs');
-const { pathToFileURL } = require('internal/url');
-const { createDeferredPromise } = require('internal/util');
-const { getOptionValue } = require('internal/options');
-const { green, yellow, red, white, shouldColorize } = require('internal/util/colors');
+const { pathToFileURL } = require('../../internal/url');
+const { createDeferredPromise } = require('../../internal/util');
+const { getOptionValue } = require('../../internal/options');
+const { green, yellow, red, white, shouldColorize } = require('../../internal/util/colors');
 
 const {
   codes: {
@@ -34,7 +34,7 @@ const {
     ERR_TEST_FAILURE,
   },
   kIsNodeError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 const { compose } = require('stream');
 
 const coverageColors = {
@@ -144,7 +144,7 @@ async function getReportersMap(reporters, destinations, rootTest) {
         parentURL = 'file:///';
       }
 
-      const { esmLoader } = require('internal/process/esm_loader');
+      const { esmLoader } = require('../../internal/process/esm_loader');
       reporter = await esmLoader.import(name, parentURL, { __proto__: null });
     }
 
diff --git a/lib/internal/timers.js b/lib/internal/timers.js
index aa7d3ec69f..ab7f5f1c29 100644
--- a/lib/internal/timers.js
+++ b/lib/internal/timers.js
@@ -97,7 +97,7 @@ const {
   emitBefore,
   emitAfter,
   emitDestroy,
-} = require('internal/async_hooks');
+} = require('../internal/async_hooks');
 
 // Symbols for storing async id state.
 const async_id_symbol = Symbol('asyncId');
@@ -107,17 +107,17 @@ const kHasPrimitive = Symbol('kHasPrimitive');
 
 const {
   ERR_OUT_OF_RANGE,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 const {
   validateFunction,
   validateNumber,
-} = require('internal/validators');
+} = require('../internal/validators');
 
-const L = require('internal/linkedlist');
-const PriorityQueue = require('internal/priority_queue');
+const L = require('../internal/linkedlist');
+const PriorityQueue = require('../internal/priority_queue');
 
-const { inspect } = require('internal/util/inspect');
-let debug = require('internal/util/debuglog').debuglog('timer', (fn) => {
+const { inspect } = require('../internal/util/inspect');
+let debug = require('../internal/util/debuglog').debuglog('timer', (fn) => {
   debug = fn;
 });
 
diff --git a/lib/internal/tls/secure-context.js b/lib/internal/tls/secure-context.js
index 0fa3098ffa..06a509c8b0 100644
--- a/lib/internal/tls/secure-context.js
+++ b/lib/internal/tls/secure-context.js
@@ -15,26 +15,26 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   validateBuffer,
   validateInt32,
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   toBuf,
-} = require('internal/crypto/util');
+} = require('../../internal/crypto/util');
 
 const {
   crypto: {
diff --git a/lib/internal/tls/secure-pair.js b/lib/internal/tls/secure-pair.js
index 7e0a2f992a..62923a7085 100644
--- a/lib/internal/tls/secure-pair.js
+++ b/lib/internal/tls/secure-pair.js
@@ -1,7 +1,7 @@
 'use strict';
 
 const EventEmitter = require('events');
-const { kEmptyObject } = require('internal/util');
+const { kEmptyObject } = require('../../internal/util');
 const { Duplex } = require('stream');
 const _tls_wrap = require('_tls_wrap');
 const _tls_common = require('_tls_common');
diff --git a/lib/internal/trace_events_async_hooks.js b/lib/internal/trace_events_async_hooks.js
index a9f517ffc9..c7daeb1a47 100644
--- a/lib/internal/trace_events_async_hooks.js
+++ b/lib/internal/trace_events_async_hooks.js
@@ -13,7 +13,7 @@ const async_hooks = require('async_hooks');
 const {
   CHAR_LOWERCASE_B,
   CHAR_LOWERCASE_E,
-} = require('internal/constants');
+} = require('../internal/constants');
 
 // Use small letters such that chrome://tracing groups by the name.
 // The behavior is not only useful but the same as the events emitted using
diff --git a/lib/internal/tty.js b/lib/internal/tty.js
index 4d3c768f65..92d39cacab 100644
--- a/lib/internal/tty.js
+++ b/lib/internal/tty.js
@@ -29,7 +29,7 @@ const {
   StringPrototypeToLowerCase,
 } = primordials;
 
-const { validateInteger } = require('internal/validators');
+const { validateInteger } = require('../internal/validators');
 
 let OSRelease;
 
diff --git a/lib/internal/url.js b/lib/internal/url.js
index ca41c48582..c47b689d00 100644
--- a/lib/internal/url.js
+++ b/lib/internal/url.js
@@ -32,12 +32,12 @@ const {
   decodeURIComponent,
 } = primordials;
 
-const { inspect } = require('internal/util/inspect');
+const { inspect } = require('../internal/util/inspect');
 const {
   encodeStr,
   hexTable,
   isHexTable,
-} = require('internal/querystring');
+} = require('../internal/querystring');
 
 const {
   getConstructorOf,
@@ -45,11 +45,11 @@ const {
   toUSVString,
   kEnumerableProperty,
   SideEffectFreeRegExpPrototypeSymbolReplace,
-} = require('internal/util');
+} = require('../internal/util');
 
 const {
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../internal/worker/js_transferable');
 
 const {
   codes: {
@@ -65,7 +65,7 @@ const {
     ERR_MISSING_ARGS,
     ERR_NO_CRYPTO,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 const {
   CHAR_AMPERSAND,
   CHAR_BACKWARD_SLASH,
@@ -75,12 +75,12 @@ const {
   CHAR_LOWERCASE_Z,
   CHAR_PERCENT,
   CHAR_PLUS,
-} = require('internal/constants');
+} = require('../internal/constants');
 const path = require('path');
 
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const querystring = require('querystring');
 
@@ -143,13 +143,13 @@ let blob;
 let cryptoRandom;
 
 function lazyBlob() {
-  blob ??= require('internal/blob');
+  blob ??= require('../internal/blob');
   return blob;
 }
 
 function lazyCryptoRandom() {
   try {
-    cryptoRandom ??= require('internal/crypto/random');
+    cryptoRandom ??= require('../internal/crypto/random');
   } catch {
     // If Node.js built without crypto support, we'll fall
     // through here and handle it later.
diff --git a/lib/internal/util.js b/lib/internal/util.js
index 558a5da697..f5f56a2e9b 100644
--- a/lib/internal/util.js
+++ b/lib/internal/util.js
@@ -51,7 +51,7 @@ const {
   },
   uvErrmapGet,
   overrideStackTrace,
-} = require('internal/errors');
+} = require('../internal/errors');
 const { signals } = internalBinding('constants').os;
 const {
   isArrayBufferDetached: _isArrayBufferDetached,
@@ -64,7 +64,7 @@ const {
   toUSVString: _toUSVString,
 } = internalBinding('util');
 const { isNativeError, isPromise } = internalBinding('types');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../internal/options');
 
 const noCrypto = !process.versions.openssl;
 
@@ -119,7 +119,7 @@ function getDeprecationWarningEmitter(
       if (code !== undefined) {
         if (!codesWarned.has(code)) {
           const emitWarning = useEmitSync ?
-            require('internal/process/warning').emitWarningSync :
+            require('../internal/process/warning').emitWarningSync :
             process.emitWarning;
           emitWarning(msg, 'DeprecationWarning', code, deprecated);
           codesWarned.add(code);
@@ -160,7 +160,7 @@ function deprecate(fn, msg, code, useEmitSync) {
 
   // Lazy-load to avoid a circular dependency.
   if (validateString === undefined)
-    ({ validateString } = require('internal/validators'));
+    ({ validateString } = require('../internal/validators'));
 
   if (code !== undefined)
     validateString(code, 'code');
@@ -368,7 +368,7 @@ let cachedCWD;
  */
 function getCWDURL() {
   const { sep } = require('path');
-  const { pathToFileURL } = require('internal/url');
+  const { pathToFileURL } = require('../internal/url');
 
   let cwd;
 
@@ -405,7 +405,7 @@ let validateFunction;
 function promisify(original) {
   // Lazy-load to avoid a circular dependency.
   if (validateFunction === undefined)
-    ({ validateFunction } = require('internal/validators'));
+    ({ validateFunction } = require('../internal/validators'));
 
   validateFunction(original, 'original');
 
@@ -540,7 +540,7 @@ let validateUint32;
 function sleep(msec) {
   // Lazy-load to avoid a circular dependency.
   if (validateUint32 === undefined)
-    ({ validateUint32 } = require('internal/validators'));
+    ({ validateUint32 } = require('../internal/validators'));
 
   validateUint32(msec, 'msec');
   _sleep(msec);
@@ -806,11 +806,11 @@ function getLazy(initializer) {
 // Setup user-facing NODE_V8_COVERAGE environment variable that writes
 // ScriptCoverage objects to a specified directory.
 function setupCoverageHooks(dir) {
-  const cwd = require('internal/process/execution').tryGetCwd();
+  const cwd = require('../internal/process/execution').tryGetCwd();
   const { resolve } = require('path');
   const coverageDirectory = resolve(cwd, dir);
   const { sourceMapCacheToObject } =
-    require('internal/source_map/source_map_cache');
+    require('../internal/source_map/source_map_cache');
 
   if (process.features.inspector) {
     internalBinding('profiler').setCoverageDirectory(coverageDirectory);
diff --git a/lib/internal/util/colors.js b/lib/internal/util/colors.js
index 31e3e9b225..53fc2d81c4 100644
--- a/lib/internal/util/colors.js
+++ b/lib/internal/util/colors.js
@@ -2,7 +2,7 @@
 
 let internalTTy;
 function lazyInternalTTY() {
-  internalTTy ??= require('internal/tty');
+  internalTTy ??= require('../../internal/tty');
   return internalTTy;
 }
 
diff --git a/lib/internal/util/comparisons.js b/lib/internal/util/comparisons.js
index d86e59adae..efb1ab5c51 100644
--- a/lib/internal/util/comparisons.js
+++ b/lib/internal/util/comparisons.js
@@ -25,8 +25,8 @@ const {
 } = primordials;
 
 const { compare } = internalBinding('buffer');
-const assert = require('internal/assert');
-const types = require('internal/util/types');
+const assert = require('../../internal/assert');
+const types = require('../../internal/util/types');
 const {
   isAnyArrayBuffer,
   isArrayBufferView,
diff --git a/lib/internal/util/debuglog.js b/lib/internal/util/debuglog.js
index 854441216e..ecaca8f8d3 100644
--- a/lib/internal/util/debuglog.js
+++ b/lib/internal/util/debuglog.js
@@ -9,7 +9,7 @@ const {
   StringPrototypeToUpperCase,
 } = primordials;
 
-const { inspect, format, formatWithOptions } = require('internal/util/inspect');
+const { inspect, format, formatWithOptions } = require('../../internal/util/inspect');
 
 // `debugImpls` and `testEnabled` are deliberately not initialized so any call
 // to `debuglog()` before `initializeDebugEnv()` is called will throw.
@@ -47,7 +47,7 @@ const noop = () => {};
 
 let utilColors;
 function lazyUtilColors() {
-  utilColors ??= require('internal/util/colors');
+  utilColors ??= require('../../internal/util/colors');
   return utilColors;
 }
 
diff --git a/lib/internal/util/embedding.js b/lib/internal/util/embedding.js
index be310f401a..3225e5670c 100644
--- a/lib/internal/util/embedding.js
+++ b/lib/internal/util/embedding.js
@@ -1,7 +1,7 @@
 'use strict';
-const { BuiltinModule: { normalizeRequirableId } } = require('internal/bootstrap/realm');
-const { Module, wrapSafe } = require('internal/modules/cjs/loader');
-const { codes: { ERR_UNKNOWN_BUILTIN_MODULE } } = require('internal/errors');
+const { BuiltinModule: { normalizeRequirableId } } = require('../../internal/bootstrap/realm');
+const { Module, wrapSafe } = require('../../internal/modules/cjs/loader');
+const { codes: { ERR_UNKNOWN_BUILTIN_MODULE } } = require('../../internal/errors');
 const { getCodeCache, getCodePath, isSea } = internalBinding('sea');
 
 // This is roughly the same as:
diff --git a/lib/internal/util/inspect.js b/lib/internal/util/inspect.js
index 73da4446f8..ac7b5a4421 100644
--- a/lib/internal/util/inspect.js
+++ b/lib/internal/util/inspect.js
@@ -115,11 +115,11 @@ const {
   isError,
   join,
   removeColors,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   isStackOverflowError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   isAsyncFunction,
@@ -146,22 +146,22 @@ const {
   isNumberObject,
   isBooleanObject,
   isBigIntObject,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
-const { BuiltinModule } = require('internal/bootstrap/realm');
+const { BuiltinModule } = require('../../internal/bootstrap/realm');
 const {
   validateObject,
   validateString,
   kValidateObjectAllowArray,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 let hexSlice;
 let internalUrl;
 
 function pathToFileUrlHref(filepath) {
-  internalUrl ??= require('internal/url');
+  internalUrl ??= require('../../internal/url');
   return internalUrl.pathToFileURL(filepath).href;
 }
 
diff --git a/lib/internal/util/inspector.js b/lib/internal/util/inspector.js
index 6ff042af71..9b0f10ee06 100644
--- a/lib/internal/util/inspector.js
+++ b/lib/internal/util/inspector.js
@@ -11,8 +11,8 @@ const {
   SafeWeakMap,
 } = primordials;
 
-const { validatePort } = require('internal/validators');
-const permission = require('internal/process/permission');
+const { validatePort } = require('../../internal/validators');
+const permission = require('../../internal/process/permission');
 
 const kMinPort = 1024;
 const kMaxPort = 65535;
@@ -69,9 +69,9 @@ function isInspectorMessage(string) {
 // Create a special require function for the inspector command line API
 function installConsoleExtensions(commandLineApi) {
   if (commandLineApi.require) { return; }
-  const { tryGetCwd } = require('internal/process/execution');
-  const CJSModule = require('internal/modules/cjs/loader').Module;
-  const { makeRequireFunction } = require('internal/modules/helpers');
+  const { tryGetCwd } = require('../../internal/process/execution');
+  const CJSModule = require('../../internal/modules/cjs/loader').Module;
+  const { makeRequireFunction } = require('../../internal/modules/helpers');
   const consoleAPIModule = new CJSModule('<inspector console>');
   const cwd = tryGetCwd();
   consoleAPIModule.paths = [];
diff --git a/lib/internal/util/parse_args/parse_args.js b/lib/internal/util/parse_args/parse_args.js
index 6915f256d6..893d628cc2 100644
--- a/lib/internal/util/parse_args/parse_args.js
+++ b/lib/internal/util/parse_args/parse_args.js
@@ -25,7 +25,7 @@ const {
   validateString,
   validateStringArray,
   validateUnion,
-} = require('internal/validators');
+} = require('../../../internal/validators');
 
 const {
   findLongOptionForShort,
@@ -39,7 +39,7 @@ const {
   useDefaultValueOption,
   objectGetOwn,
   optionsGetOwn,
-} = require('internal/util/parse_args/utils');
+} = require('../../../internal/util/parse_args/utils');
 
 const {
   codes: {
@@ -48,11 +48,11 @@ const {
     ERR_PARSE_ARGS_UNKNOWN_OPTION,
     ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL,
   },
-} = require('internal/errors');
+} = require('../../../internal/errors');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../../../internal/util');
 
 
 function getMainArgs() {
diff --git a/lib/internal/util/parse_args/utils.js b/lib/internal/util/parse_args/utils.js
index 95f787daf1..dee177cd10 100644
--- a/lib/internal/util/parse_args/utils.js
+++ b/lib/internal/util/parse_args/utils.js
@@ -11,7 +11,7 @@ const {
 
 const {
   validateObject,
-} = require('internal/validators');
+} = require('../../../internal/validators');
 
 // These are internal utilities to make the parsing logic easier to read, and
 // add lots of detail for the curious. They are in a separate file to allow
diff --git a/lib/internal/util/types.js b/lib/internal/util/types.js
index e40700b38f..538c96ef95 100644
--- a/lib/internal/util/types.js
+++ b/lib/internal/util/types.js
@@ -85,7 +85,7 @@ ObjectDefineProperties(module.exports, {
       }
 
       if (!isKeyObject) {
-        ({ isKeyObject } = require('internal/crypto/keys'));
+        ({ isKeyObject } = require('../../internal/crypto/keys'));
       }
 
       return isKeyObject(obj);
@@ -101,7 +101,7 @@ ObjectDefineProperties(module.exports, {
       }
 
       if (!isCryptoKey) {
-        ({ isCryptoKey } = require('internal/crypto/keys'));
+        ({ isCryptoKey } = require('../../internal/crypto/keys'));
       }
 
       return isCryptoKey(obj);
diff --git a/lib/internal/v8/startup_snapshot.js b/lib/internal/v8/startup_snapshot.js
index 5de746293d..9618b72a08 100644
--- a/lib/internal/v8/startup_snapshot.js
+++ b/lib/internal/v8/startup_snapshot.js
@@ -2,14 +2,14 @@
 
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 const {
   codes: {
     ERR_NOT_BUILDING_SNAPSHOT,
     ERR_NOT_SUPPORTED_IN_SNAPSHOT,
     ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   setSerializeCallback,
@@ -95,7 +95,7 @@ function setDeserializeMainFunction(callback, data) {
     const {
       prepareMainThreadExecution,
       markBootstrapComplete,
-    } = require('internal/process/pre_execution');
+    } = require('../../internal/process/pre_execution');
 
     // This should be in sync with run_main_module.js until we make that
     // a built-in main function.
diff --git a/lib/internal/v8_prof_processor.js b/lib/internal/v8_prof_processor.js
index 1d4f33418f..797ffa2983 100644
--- a/lib/internal/v8_prof_processor.js
+++ b/lib/internal/v8_prof_processor.js
@@ -8,9 +8,9 @@ const {
 } = primordials;
 
 const Buffer = require('buffer').Buffer;
-const console = require('internal/console/global');
+const console = require('../internal/console/global');
 const vm = require('vm');
-const { SourceTextModule } = require('internal/vm/module');
+const { SourceTextModule } = require('../internal/vm/module');
 
 const { natives } = internalBinding('builtins');
 
diff --git a/lib/internal/validators.js b/lib/internal/validators.js
index 088a0a668b..f5571b3316 100644
--- a/lib/internal/validators.js
+++ b/lib/internal/validators.js
@@ -28,12 +28,12 @@ const {
     ERR_OUT_OF_RANGE,
     ERR_UNKNOWN_SIGNAL,
   },
-} = require('internal/errors');
-const { normalizeEncoding } = require('internal/util');
+} = require('../internal/errors');
+const { normalizeEncoding } = require('../internal/util');
 const {
   isAsyncFunction,
   isArrayBufferView,
-} = require('internal/util/types');
+} = require('../internal/util/types');
 const { signals } = internalBinding('constants').os;
 
 /**
diff --git a/lib/internal/vm.js b/lib/internal/vm.js
index f348ef6d2d..40ce46ef10 100644
--- a/lib/internal/vm.js
+++ b/lib/internal/vm.js
@@ -19,10 +19,10 @@ const {
   kValidateObjectAllowArray,
   kValidateObjectAllowNullable,
   validateInt32,
-} = require('internal/validators');
+} = require('../internal/validators');
 const {
   ERR_INVALID_ARG_TYPE,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
 function isContext(object) {
   validateObject(object, 'object', kValidateObjectAllowArray);
@@ -99,10 +99,10 @@ function internalCompileFunction(code, params, options) {
   if (importModuleDynamically !== undefined) {
     validateFunction(importModuleDynamically,
                      'options.importModuleDynamically');
-    const { importModuleDynamicallyWrap } = require('internal/vm/module');
+    const { importModuleDynamicallyWrap } = require('../internal/vm/module');
     const wrapped = importModuleDynamicallyWrap(importModuleDynamically);
     const func = result.function;
-    const { registerModule } = require('internal/modules/esm/utils');
+    const { registerModule } = require('../internal/modules/esm/utils');
     registerModule(func, {
       __proto__: null,
       importModuleDynamically: wrapped,
diff --git a/lib/internal/vm/module.js b/lib/internal/vm/module.js
index d9a073fd4d..b136c71512 100644
--- a/lib/internal/vm/module.js
+++ b/lib/internal/vm/module.js
@@ -1,6 +1,6 @@
 'use strict';
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 const {
   ArrayIsArray,
   ArrayPrototypeForEach,
@@ -20,13 +20,13 @@ const {
 const { isContext } = internalBinding('contextify');
 const {
   isModuleNamespaceObject,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 const {
   customInspectSymbol,
   emitExperimentalWarning,
   getConstructorOf,
   kEmptyObject,
-} = require('internal/util');
+} = require('../../internal/util');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
@@ -36,7 +36,7 @@ const {
   ERR_VM_MODULE_LINK_FAILURE,
   ERR_VM_MODULE_NOT_MODULE,
   ERR_VM_MODULE_STATUS,
-} = require('internal/errors').codes;
+} = require('../../internal/errors').codes;
 const {
   validateBoolean,
   validateBuffer,
@@ -45,7 +45,7 @@ const {
   validateObject,
   validateUint32,
   validateString,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const binding = internalBinding('module_wrap');
 const {
@@ -141,7 +141,7 @@ class Module {
     // This will take precedence over the referrer as the object being
     // passed into the callbacks.
     registry.callbackReferrer = this;
-    const { registerModule } = require('internal/modules/esm/utils');
+    const { registerModule } = require('../../internal/modules/esm/utils');
     registerModule(this[kWrap], registry);
 
     this[kContext] = context;
@@ -250,7 +250,7 @@ class Module {
     });
 
     // Lazy to avoid circular dependency
-    const { inspect } = require('internal/util/inspect');
+    const { inspect } = require('../../internal/util/inspect');
     return inspect(o, { ...options, customInspect: false });
   }
 }
diff --git a/lib/internal/wasm_web_api.js b/lib/internal/wasm_web_api.js
index 9c21864fa5..cb57de6b39 100644
--- a/lib/internal/wasm_web_api.js
+++ b/lib/internal/wasm_web_api.js
@@ -6,11 +6,11 @@ const {
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_WEBASSEMBLY_RESPONSE,
-} = require('internal/errors').codes;
+} = require('../internal/errors').codes;
 
 let undici;
 function lazyUndici() {
-  return undici ??= require('internal/deps/undici/undici');
+  return undici ??= require('../internal/deps/undici/undici');
 }
 
 // This is essentially an implementation of a v8::WasmStreamingCallback, except
diff --git a/lib/internal/watch_mode/files_watcher.js b/lib/internal/watch_mode/files_watcher.js
index 895c6ec138..cf1facbf81 100644
--- a/lib/internal/watch_mode/files_watcher.js
+++ b/lib/internal/watch_mode/files_watcher.js
@@ -8,13 +8,13 @@ const {
   StringPrototypeStartsWith,
 } = primordials;
 
-const { validateNumber, validateOneOf } = require('internal/validators');
-const { kEmptyObject } = require('internal/util');
-const { TIMEOUT_MAX } = require('internal/timers');
+const { validateNumber, validateOneOf } = require('../../internal/validators');
+const { kEmptyObject } = require('../../internal/util');
+const { TIMEOUT_MAX } = require('../../internal/timers');
 
 const EventEmitter = require('events');
 const { watch } = require('fs');
-const { fileURLToPath } = require('internal/url');
+const { fileURLToPath } = require('../../internal/url');
 const { resolve, dirname } = require('path');
 const { setTimeout } = require('timers');
 
diff --git a/lib/internal/webidl.js b/lib/internal/webidl.js
index 67c01418f1..f88d510130 100644
--- a/lib/internal/webidl.js
+++ b/lib/internal/webidl.js
@@ -17,8 +17,8 @@ const {
   codes: {
     ERR_INVALID_ARG_VALUE,
   },
-} = require('internal/errors');
-const { kEmptyObject } = require('internal/util');
+} = require('../internal/errors');
+const { kEmptyObject } = require('../internal/util');
 
 const converters = { __proto__: null };
 
diff --git a/lib/internal/webstreams/adapters.js b/lib/internal/webstreams/adapters.js
index 3e5fd69d4d..d8ac45d5d0 100644
--- a/lib/internal/webstreams/adapters.js
+++ b/lib/internal/webstreams/adapters.js
@@ -11,21 +11,21 @@ const {
   Uint8Array,
 } = primordials;
 
-const { TextEncoder } = require('internal/encoding');
+const { TextEncoder } = require('../../internal/encoding');
 
 const {
   ReadableStream,
   isReadableStream,
-} = require('internal/webstreams/readablestream');
+} = require('../../internal/webstreams/readablestream');
 
 const {
   WritableStream,
   isWritableStream,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
 const {
   CountQueuingStrategy,
-} = require('internal/webstreams/queuingstrategies');
+} = require('../../internal/webstreams/queuingstrategies');
 
 const {
   Writable,
@@ -39,7 +39,7 @@ const {
   isReadable,
   isWritable,
   isWritableEnded,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
 const {
   Buffer,
@@ -54,19 +54,19 @@ const {
     ERR_STREAM_PREMATURE_CLOSE,
   },
   AbortError,
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   createDeferredPromise,
   kEmptyObject,
   normalizeEncoding,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   validateBoolean,
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   WriteWrap,
@@ -76,7 +76,7 @@ const {
   streamBaseState,
 } = internalBinding('stream_wrap');
 
-const finished = require('internal/streams/end-of-stream');
+const finished = require('../../internal/streams/end-of-stream');
 
 const { UV_EOF } = internalBinding('uv');
 
diff --git a/lib/internal/webstreams/compression.js b/lib/internal/webstreams/compression.js
index 6cbaa3f325..ed348f978b 100644
--- a/lib/internal/webstreams/compression.js
+++ b/lib/internal/webstreams/compression.js
@@ -6,18 +6,18 @@ const {
 
 const {
   codes: { ERR_INVALID_ARG_VALUE },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   newReadableWritablePairFromDuplex,
-} = require('internal/webstreams/adapters');
+} = require('../../internal/webstreams/adapters');
 
-const { customInspect } = require('internal/webstreams/util');
+const { customInspect } = require('../../internal/webstreams/util');
 
 const {
   customInspectSymbol: kInspect,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 let zlib;
 function lazyZlib() {
diff --git a/lib/internal/webstreams/encoding.js b/lib/internal/webstreams/encoding.js
index b5533b4287..4ff351f06e 100644
--- a/lib/internal/webstreams/encoding.js
+++ b/lib/internal/webstreams/encoding.js
@@ -10,25 +10,25 @@ const {
 const {
   TextDecoder,
   TextEncoder,
-} = require('internal/encoding');
+} = require('../../internal/encoding');
 
 const {
   TransformStream,
-} = require('internal/webstreams/transformstream');
+} = require('../../internal/webstreams/transformstream');
 
-const { customInspect } = require('internal/webstreams/util');
+const { customInspect } = require('../../internal/webstreams/util');
 
 const {
   codes: {
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 /**
  * @typedef {import('./readablestream').ReadableStream} ReadableStream
diff --git a/lib/internal/webstreams/queuingstrategies.js b/lib/internal/webstreams/queuingstrategies.js
index cb2adefdac..382a2e25bc 100644
--- a/lib/internal/webstreams/queuingstrategies.js
+++ b/lib/internal/webstreams/queuingstrategies.js
@@ -10,20 +10,20 @@ const {
   codes: {
     ERR_MISSING_OPTION,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   customInspectSymbol: kInspect,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   customInspect,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   validateObject,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 /**
  * @callback QueuingStrategySize
diff --git a/lib/internal/webstreams/readablestream.js b/lib/internal/webstreams/readablestream.js
index 83b49028ea..cb277a35c8 100644
--- a/lib/internal/webstreams/readablestream.js
+++ b/lib/internal/webstreams/readablestream.js
@@ -34,7 +34,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -43,7 +43,7 @@ const {
 const {
   isArrayBufferView,
   isDataView,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   createDeferredPromise,
@@ -52,7 +52,7 @@ const {
   kEmptyObject,
   kEnumerableProperty,
   SideEffectFreeRegExpPrototypeSymbolReplace,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   validateAbortSignal,
@@ -60,22 +60,22 @@ const {
   validateObject,
   kValidateObjectAllowNullable,
   kValidateObjectAllowFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const {
   MessageChannel,
-} = require('internal/worker/io');
+} = require('../../internal/worker/io');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   queueMicrotask,
-} = require('internal/process/task_queues');
+} = require('../../internal/process/task_queues');
 
 const {
   kIsDisturbed,
@@ -83,11 +83,11 @@ const {
   kIsReadable,
   kIsClosedPromise,
   kControllerErrorFunction,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
 const {
   structuredClone,
-} = require('internal/structured_clone');
+} = require('../../internal/structured_clone');
 
 const {
   ArrayBufferViewGetBuffer,
@@ -115,7 +115,7 @@ const {
   iteratorNext,
   kType,
   kState,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   WritableStreamDefaultWriter,
@@ -130,11 +130,11 @@ const {
   writableStreamDefaultWriterCloseWithErrorPropagation,
   writableStreamDefaultWriterRelease,
   writableStreamDefaultWriterWrite,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
 const { Buffer } = require('buffer');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kCancel = Symbol('kCancel');
 const kClose = Symbol('kClose');
diff --git a/lib/internal/webstreams/transfer.js b/lib/internal/webstreams/transfer.js
index 136b0d81a9..a4486fd222 100644
--- a/lib/internal/webstreams/transfer.js
+++ b/lib/internal/webstreams/transfer.js
@@ -9,7 +9,7 @@ const {
 const {
   kState,
   setPromiseHandled,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   DOMException,
@@ -21,24 +21,24 @@ const {
   readableStreamDefaultControllerClose,
   readableStreamDefaultControllerError,
   readableStreamPipeTo,
-} = require('internal/webstreams/readablestream');
+} = require('../../internal/webstreams/readablestream');
 
 const {
   WritableStream,
   writableStreamDefaultControllerErrorIfNeeded,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
 const {
   createDeferredPromise,
-} = require('internal/util');
+} = require('../../internal/util');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const {
   markTransferMode,
   kClone,
   kDeserialize,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 // This class is a bit of a hack. The Node.js implementation of
 // DOMException is not transferable/cloneable. This provides us
diff --git a/lib/internal/webstreams/transformstream.js b/lib/internal/webstreams/transformstream.js
index 4d47856a6a..7839a8bbad 100644
--- a/lib/internal/webstreams/transformstream.js
+++ b/lib/internal/webstreams/transformstream.js
@@ -18,7 +18,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -29,14 +29,14 @@ const {
   customInspectSymbol: kInspect,
   kEmptyObject,
   kEnumerableProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspect,
@@ -47,7 +47,7 @@ const {
   nonOpFlush,
   kType,
   kState,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   ReadableStream,
@@ -57,14 +57,14 @@ const {
   readableStreamDefaultControllerError,
   readableStreamDefaultControllerGetDesiredSize,
   readableStreamDefaultControllerHasBackpressure,
-} = require('internal/webstreams/readablestream');
+} = require('../../internal/webstreams/readablestream');
 
 const {
   WritableStream,
   writableStreamDefaultControllerErrorIfNeeded,
-} = require('internal/webstreams/writablestream');
+} = require('../../internal/webstreams/writablestream');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kSkipThrow = Symbol('kSkipThrow');
 
diff --git a/lib/internal/webstreams/util.js b/lib/internal/webstreams/util.js
index 1979c55667..ad7bfda17c 100644
--- a/lib/internal/webstreams/util.js
+++ b/lib/internal/webstreams/util.js
@@ -24,7 +24,7 @@ const {
     ERR_OPERATION_FAILED,
     ERR_INVALID_STATE,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   copyArrayBuffer,
@@ -33,7 +33,7 @@ const {
 
 const {
   isPromise,
-} = require('internal/util/types');
+} = require('../../internal/util/types');
 
 const {
   inspect,
@@ -46,12 +46,12 @@ const {
   getPromiseDetails,
 } = internalBinding('util');
 
-const assert = require('internal/assert');
-const { isArrayBufferDetached } = require('internal/util');
+const assert = require('../../internal/assert');
+const { isArrayBufferDetached } = require('../../internal/util');
 
 const {
   validateFunction,
-} = require('internal/validators');
+} = require('../../internal/validators');
 
 const kState = Symbol('kState');
 const kType = Symbol('kType');
@@ -216,7 +216,7 @@ async function nonOpWrite() {}
 let transfer;
 function lazyTransfer() {
   if (transfer === undefined)
-    transfer = require('internal/webstreams/transfer');
+    transfer = require('../../internal/webstreams/transfer');
   return transfer;
 }
 
diff --git a/lib/internal/webstreams/writablestream.js b/lib/internal/webstreams/writablestream.js
index 2115aba36e..fcca4ab6af 100644
--- a/lib/internal/webstreams/writablestream.js
+++ b/lib/internal/webstreams/writablestream.js
@@ -22,7 +22,7 @@ const {
     ERR_INVALID_STATE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const {
   DOMException,
@@ -34,18 +34,18 @@ const {
   kEmptyObject,
   kEnumerableProperty,
   SideEffectFreeRegExpPrototypeSymbolReplace,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   MessageChannel,
-} = require('internal/worker/io');
+} = require('../../internal/worker/io');
 
 const {
   kDeserialize,
   kTransfer,
   kTransferList,
   markTransferMode,
-} = require('internal/worker/js_transferable');
+} = require('../../internal/worker/js_transferable');
 
 const {
   customInspect,
@@ -65,18 +65,18 @@ const {
   nonOpWrite,
   kType,
   kState,
-} = require('internal/webstreams/util');
+} = require('../../internal/webstreams/util');
 
 const {
   kIsClosedPromise,
   kControllerErrorFunction,
-} = require('internal/streams/utils');
+} = require('../../internal/streams/utils');
 
 const {
   AbortController,
-} = require('internal/abort_controller');
+} = require('../../internal/abort_controller');
 
-const assert = require('internal/assert');
+const assert = require('../../internal/assert');
 
 const kAbort = Symbol('kAbort');
 const kCloseSentinel = Symbol('kCloseSentinel');
diff --git a/lib/internal/worker.js b/lib/internal/worker.js
index b58cbe56d0..6d4fc0b7c3 100644
--- a/lib/internal/worker.js
+++ b/lib/internal/worker.js
@@ -26,13 +26,13 @@ const {
 } = primordials;
 
 const EventEmitter = require('events');
-const assert = require('internal/assert');
+const assert = require('../internal/assert');
 const path = require('path');
 const {
   internalEventLoopUtilization,
-} = require('internal/perf/event_loop_utilization');
+} = require('../internal/perf/event_loop_utilization');
 
-const errorCodes = require('internal/errors').codes;
+const errorCodes = require('../internal/errors').codes;
 const {
   ERR_WORKER_NOT_RUNNING,
   ERR_WORKER_PATH,
@@ -41,9 +41,9 @@ const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_ARG_VALUE,
 } = errorCodes;
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('../internal/options');
 
-const workerIo = require('internal/worker/io');
+const workerIo = require('../internal/worker/io');
 const {
   drainMessagePort,
   receiveMessageOnPort,
@@ -57,13 +57,13 @@ const {
   ReadableWorkerStdio,
   WritableWorkerStdio,
 } = workerIo;
-const { deserializeError } = require('internal/error_serdes');
-const { fileURLToPath, isURL, pathToFileURL } = require('internal/url');
-const { kEmptyObject } = require('internal/util');
-const { validateArray, validateString } = require('internal/validators');
+const { deserializeError } = require('../internal/error_serdes');
+const { fileURLToPath, isURL, pathToFileURL } = require('../internal/url');
+const { kEmptyObject } = require('../internal/util');
+const { validateArray, validateString } = require('../internal/validators');
 const {
   throwIfBuildingSnapshot,
-} = require('internal/v8/startup_snapshot');
+} = require('../internal/v8/startup_snapshot');
 const {
   ownsProcessState,
   isMainThread,
@@ -90,7 +90,7 @@ const kIsInternal = Symbol('kIsInternal');
 const kIsOnline = Symbol('kIsOnline');
 
 const SHARE_ENV = SymbolFor('nodejs.worker_threads.SHARE_ENV');
-let debug = require('internal/util/debuglog').debuglog('worker', (fn) => {
+let debug = require('../internal/util/debuglog').debuglog('worker', (fn) => {
   debug = fn;
 });
 
@@ -274,10 +274,10 @@ class Worker extends EventEmitter {
       environmentData,
       publicPort: port2,
       manifestURL: getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').url :
+        require('../internal/process/policy').url :
         null,
       manifestSrc: getOptionValue('--experimental-policy') ?
-        require('internal/process/policy').src :
+        require('../internal/process/policy').src :
         null,
       hasStdin: !!options.stdin,
     }, transferList);
@@ -446,7 +446,7 @@ class Worker extends EventEmitter {
     const {
       HeapSnapshotStream,
       getHeapSnapshotOptions,
-    } = require('internal/heap_utils');
+    } = require('../internal/heap_utils');
     const optionsArray = getHeapSnapshotOptions(options);
     const heapSnapshotTaker = this[kHandle]?.takeHeapSnapshot(optionsArray);
     return new Promise((resolve, reject) => {
diff --git a/lib/internal/worker/io.js b/lib/internal/worker/io.js
index 6f4348f11d..44a7b71aff 100644
--- a/lib/internal/worker/io.js
+++ b/lib/internal/worker/io.js
@@ -23,7 +23,7 @@ const {
   kEmptyObject,
   kEnumerableProperty,
   setOwnProperty,
-} = require('internal/util');
+} = require('../../internal/util');
 
 const {
   handle_onclose: handleOnCloseSymbol,
@@ -55,15 +55,15 @@ const {
   kCreateEvent,
   kNewListener,
   kRemoveListener,
-} = require('internal/event_target');
-const { inspect } = require('internal/util/inspect');
+} = require('../../internal/event_target');
+const { inspect } = require('../../internal/util/inspect');
 const {
   codes: {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_THIS,
     ERR_MISSING_ARGS,
   },
-} = require('internal/errors');
+} = require('../../internal/errors');
 
 const kData = Symbol('kData');
 const kHandle = Symbol('kHandle');
diff --git a/lib/module.js b/lib/module.js
index ee90e92f53..41b512087d 100644
--- a/lib/module.js
+++ b/lib/module.js
@@ -1,9 +1,9 @@
 'use strict';
 
-const { findSourceMap } = require('internal/source_map/source_map_cache');
-const { Module } = require('internal/modules/cjs/loader');
-const { register } = require('internal/modules/esm/loader');
-const { SourceMap } = require('internal/source_map/source_map');
+const { findSourceMap } = require('./internal/source_map/source_map_cache');
+const { Module } = require('./internal/modules/cjs/loader');
+const { register } = require('./internal/modules/esm/loader');
+const { SourceMap } = require('./internal/source_map/source_map');
 
 Module.findSourceMap = findSourceMap;
 Module.register = register;
diff --git a/lib/net.js b/lib/net.js
index 7f9b1e5c08..5813848523 100644
--- a/lib/net.js
+++ b/lib/net.js
@@ -42,7 +42,7 @@ const {
 
 const EventEmitter = require('events');
 const stream = require('stream');
-let debug = require('internal/util/debuglog').debuglog('net', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('net', (fn) => {
   debug = fn;
 });
 const {
@@ -52,8 +52,8 @@ const {
   isIPv6,
   normalizedArgsSymbol,
   makeSyncWrite,
-} = require('internal/net');
-const assert = require('internal/assert');
+} = require('./internal/net');
+const assert = require('./internal/assert');
 const {
   UV_EADDRINUSE,
   UV_EINVAL,
@@ -78,7 +78,7 @@ const {
   newAsyncId,
   defaultTriggerAsyncIdScope,
   symbols: { async_id_symbol, owner_symbol },
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 const {
   writevGeneric,
   writeGeneric,
@@ -90,7 +90,7 @@ const {
   kBuffer,
   kBufferCb,
   kBufferGen,
-} = require('internal/stream_base_commons');
+} = require('./internal/stream_base_commons');
 const {
   codes: {
     ERR_INVALID_ADDRESS_FAMILY,
@@ -111,10 +111,10 @@ const {
   exceptionWithHostPort,
   genericNodeError,
   uvExceptionWithHostPort,
-} = require('internal/errors');
-const { isUint8Array } = require('internal/util/types');
-const { queueMicrotask } = require('internal/process/task_queues');
-const { kEmptyObject, guessHandleType, promisify } = require('internal/util');
+} = require('./internal/errors');
+const { isUint8Array } = require('./internal/util/types');
+const { queueMicrotask } = require('./internal/process/task_queues');
+const { kEmptyObject, guessHandleType, promisify } = require('./internal/util');
 const {
   validateAbortSignal,
   validateBoolean,
@@ -123,9 +123,9 @@ const {
   validateNumber,
   validatePort,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 const kLastWriteQueueSize = Symbol('lastWriteQueueSize');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 
 // Lazy loaded to improve startup performance.
 let cluster;
@@ -136,7 +136,7 @@ let autoSelectFamilyDefault = getOptionValue('--network-family-autoselection');
 let autoSelectFamilyAttemptTimeoutDefault = 250;
 
 const { clearTimeout, setTimeout } = require('timers');
-const { kTimeout } = require('internal/timers');
+const { kTimeout } = require('./internal/timers');
 
 const DEFAULT_IPV4_ADDR = '0.0.0.0';
 const DEFAULT_IPV6_ADDR = '::';
@@ -155,8 +155,8 @@ const {
   hasObserver,
   startPerf,
   stopPerf,
-} = require('internal/perf/observe');
-const { getDefaultHighWaterMark } = require('internal/streams/state');
+} = require('./internal/perf/observe');
+const { getDefaultHighWaterMark } = require('./internal/streams/state');
 
 function getFlags(ipv6Only) {
   return ipv6Only === true ? TCPConstants.UV_TCP_IPV6ONLY : 0;
@@ -2371,11 +2371,11 @@ module.exports = {
   _normalizeArgs: normalizeArgs,
   _setSimultaneousAccepts,
   get BlockList() {
-    BlockList ??= require('internal/blocklist').BlockList;
+    BlockList ??= require('./internal/blocklist').BlockList;
     return BlockList;
   },
   get SocketAddress() {
-    SocketAddress ??= require('internal/socketaddress').SocketAddress;
+    SocketAddress ??= require('./internal/socketaddress').SocketAddress;
     return SocketAddress;
   },
   connect,
diff --git a/lib/os.js b/lib/os.js
index 1ad17c6351..7cf31bbd30 100644
--- a/lib/os.js
+++ b/lib/os.js
@@ -40,8 +40,8 @@ const {
     ERR_SYSTEM_ERROR,
   },
   hideStackFrames,
-} = require('internal/errors');
-const { validateInt32 } = require('internal/validators');
+} = require('./internal/errors');
+const { validateInt32 } = require('./internal/validators');
 
 const {
   getAvailableParallelism,
diff --git a/lib/path.js b/lib/path.js
index 1a2b3e38ec..37e837f5d3 100644
--- a/lib/path.js
+++ b/lib/path.js
@@ -41,11 +41,11 @@ const {
   CHAR_BACKWARD_SLASH,
   CHAR_COLON,
   CHAR_QUESTION_MARK,
-} = require('internal/constants');
+} = require('./internal/constants');
 const {
   validateObject,
   validateString,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const platformIsWin32 = (process.platform === 'win32');
 
diff --git a/lib/perf_hooks.js b/lib/perf_hooks.js
index 2b9bd92c82..92396ba90d 100644
--- a/lib/perf_hooks.js
+++ b/lib/perf_hooks.js
@@ -8,26 +8,26 @@ const {
   constants,
 } = internalBinding('performance');
 
-const { PerformanceEntry } = require('internal/perf/performance_entry');
-const { PerformanceResourceTiming } = require('internal/perf/resource_timing');
+const { PerformanceEntry } = require('./internal/perf/performance_entry');
+const { PerformanceResourceTiming } = require('./internal/perf/resource_timing');
 const {
   PerformanceObserver,
   PerformanceObserverEntryList,
-} = require('internal/perf/observe');
+} = require('./internal/perf/observe');
 const {
   PerformanceMark,
   PerformanceMeasure,
-} = require('internal/perf/usertiming');
+} = require('./internal/perf/usertiming');
 const {
   Performance,
   performance,
-} = require('internal/perf/performance');
+} = require('./internal/perf/performance');
 
 const {
   createHistogram,
-} = require('internal/histogram');
+} = require('./internal/histogram');
 
-const monitorEventLoopDelay = require('internal/perf/event_loop_delay');
+const monitorEventLoopDelay = require('./internal/perf/event_loop_delay');
 
 module.exports = {
   Performance,
diff --git a/lib/querystring.js b/lib/querystring.js
index c4cbca0c5a..c33c432f33 100644
--- a/lib/querystring.js
+++ b/lib/querystring.js
@@ -41,7 +41,7 @@ const {
   encodeStr,
   hexTable,
   isHexTable,
-} = require('internal/querystring');
+} = require('./internal/querystring');
 const QueryString = module.exports = {
   unescapeBuffer,
   // `unescape()` is a JS global, so we need to use a different local name
diff --git a/lib/readline.js b/lib/readline.js
index 5276d9401b..4256501f23 100644
--- a/lib/readline.js
+++ b/lib/readline.js
@@ -38,21 +38,21 @@ const {
   clearScreenDown,
   cursorTo,
   moveCursor,
-} = require('internal/readline/callbacks');
-const emitKeypressEvents = require('internal/readline/emitKeypressEvents');
+} = require('./internal/readline/callbacks');
+const emitKeypressEvents = require('./internal/readline/emitKeypressEvents');
 const promises = require('readline/promises');
 
 const {
   AbortError,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   inspect,
-} = require('internal/util/inspect');
+} = require('./internal/util/inspect');
 const {
   kEmptyObject,
   promisify,
-} = require('internal/util');
-const { validateAbortSignal } = require('internal/validators');
+} = require('./internal/util');
+const { validateAbortSignal } = require('./internal/validators');
 
 /**
  * @typedef {import('./stream.js').Readable} Readable
@@ -95,7 +95,7 @@ const {
   kWordLeft,
   kWordRight,
   kWriteToOutput,
-} = require('internal/readline/interface');
+} = require('./internal/readline/interface');
 let addAbortListener;
 
 function Interface(input, output, completer, terminal) {
diff --git a/lib/readline/promises.js b/lib/readline/promises.js
index 4c2ce90479..53fa4cebc7 100644
--- a/lib/readline/promises.js
+++ b/lib/readline/promises.js
@@ -7,22 +7,22 @@ const {
 
 const {
   Readline,
-} = require('internal/readline/promises');
+} = require('../internal/readline/promises');
 
 const {
   Interface: _Interface,
   kQuestion,
   kQuestionCancel,
-} = require('internal/readline/interface');
+} = require('../internal/readline/interface');
 
 const {
   AbortError,
-} = require('internal/errors');
-const { validateAbortSignal } = require('internal/validators');
+} = require('../internal/errors');
+const { validateAbortSignal } = require('../internal/validators');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../internal/util');
 let addAbortListener;
 
 class Interface extends _Interface {
diff --git a/lib/repl.js b/lib/repl.js
index 52f3026414..c25297895e 100644
--- a/lib/repl.js
+++ b/lib/repl.js
@@ -98,35 +98,35 @@ const {
   globalThis,
 } = primordials;
 
-const { BuiltinModule } = require('internal/bootstrap/realm');
+const { BuiltinModule } = require('./internal/bootstrap/realm');
 const {
   makeRequireFunction,
   addBuiltinLibsToObject,
-} = require('internal/modules/helpers');
+} = require('./internal/modules/helpers');
 const {
   isIdentifierStart,
   isIdentifierChar,
   parse: acornParse,
-} = require('internal/deps/acorn/acorn/dist/acorn');
-const acornWalk = require('internal/deps/acorn/acorn-walk/dist/walk');
+} = require('./internal/deps/acorn/acorn/dist/acorn');
+const acornWalk = require('./internal/deps/acorn/acorn-walk/dist/walk');
 const {
   decorateErrorStack,
   isError,
   deprecate,
   SideEffectFreeRegExpPrototypeSymbolReplace,
   SideEffectFreeRegExpPrototypeSymbolSplit,
-} = require('internal/util');
-const { inspect } = require('internal/util/inspect');
+} = require('./internal/util');
+const { inspect } = require('./internal/util/inspect');
 const vm = require('vm');
 const path = require('path');
 const fs = require('fs');
 const { Interface } = require('readline');
 const {
   commonPrefix,
-} = require('internal/readline/utils');
+} = require('./internal/readline/utils');
 const { Console } = require('console');
-const { shouldColorize } = require('internal/util/colors');
-const CJSModule = require('internal/modules/cjs/loader').Module;
+const { shouldColorize } = require('./internal/util/colors');
+const CJSModule = require('./internal/modules/cjs/loader').Module;
 let _builtinLibs = ArrayPrototypeFilter(
   CJSModule.builtinModules,
   (e) => !StringPrototypeStartsWith(e, '_'),
@@ -138,7 +138,7 @@ ArrayPrototypeForEach(
   (lib) => ArrayPrototypePush(nodeSchemeBuiltinLibs, `node:${lib}`),
 );
 const domain = require('domain');
-let debug = require('internal/util/debuglog').debuglog('repl', (fn) => {
+let debug = require('./internal/util/debuglog').debuglog('repl', (fn) => {
   debug = fn;
 });
 const {
@@ -150,13 +150,13 @@ const {
   },
   isErrorStackTraceLimitWritable,
   overrideStackTrace,
-} = require('internal/errors');
-const { sendInspectorCommand } = require('internal/util/inspector');
-const { getOptionValue } = require('internal/options');
+} = require('./internal/errors');
+const { sendInspectorCommand } = require('./internal/util/inspector');
+const { getOptionValue } = require('./internal/options');
 const {
   validateFunction,
   validateObject,
-} = require('internal/validators');
+} = require('./internal/validators');
 const experimentalREPLAwait = getOptionValue(
   '--experimental-repl-await',
 );
@@ -168,7 +168,7 @@ const {
   kStandaloneREPL,
   setupPreview,
   setupReverseSearch,
-} = require('internal/repl/utils');
+} = require('./internal/repl/utils');
 const {
   constants: {
     ALL_PROPERTIES,
@@ -181,10 +181,10 @@ const {
   stopSigintWatchdog,
 } = internalBinding('contextify');
 
-const history = require('internal/repl/history');
+const history = require('./internal/repl/history');
 const {
   extensionFormatMap,
-} = require('internal/modules/esm/formats');
+} = require('./internal/modules/esm/formats');
 
 let nextREPLResourceNumber = 1;
 // This prevents v8 code cache from getting confused and using a different
@@ -430,7 +430,7 @@ function REPLServer(prompt,
   }
 
   function defaultEval(code, context, file, cb) {
-    const asyncESM = require('internal/process/esm_loader');
+    const asyncESM = require('./internal/process/esm_loader');
 
     let result, script, wrappedErr;
     let err = null;
@@ -453,7 +453,7 @@ function REPLServer(prompt,
     // Shall be false in case `--no-experimental-repl-await` flag is used.
     if (experimentalREPLAwait && StringPrototypeIncludes(code, 'await')) {
       if (processTopLevelAwait === undefined) {
-        ({ processTopLevelAwait } = require('internal/repl/await'));
+        ({ processTopLevelAwait } = require('./internal/repl/await'));
       }
 
       try {
@@ -468,7 +468,7 @@ function REPLServer(prompt,
         if (e.name === 'SyntaxError') {
           let parentURL;
           try {
-            const { pathToFileURL } = require('internal/url');
+            const { pathToFileURL } = require('./internal/url');
             // Adding `/repl` prevents dynamic imports from loading relative
             // to the parent of `process.cwd()`.
             parentURL = pathToFileURL(path.join(process.cwd(), 'repl')).href;
@@ -509,7 +509,7 @@ function REPLServer(prompt,
     if (err === null) {
       let parentURL;
       try {
-        const { pathToFileURL } = require('internal/url');
+        const { pathToFileURL } = require('./internal/url');
         // Adding `/repl` prevents dynamic imports from loading relative
         // to the parent of `process.cwd()`.
         parentURL = pathToFileURL(path.join(process.cwd(), 'repl')).href;
diff --git a/lib/stream.js b/lib/stream.js
index cdbc1fe038..4ec8fe2939 100644
--- a/lib/stream.js
+++ b/lib/stream.js
@@ -29,29 +29,29 @@ const {
 
 const {
   promisify: { custom: customPromisify },
-} = require('internal/util');
+} = require('./internal/util');
 
 const {
   streamReturningOperators,
   promiseReturningOperators,
-} = require('internal/streams/operators');
+} = require('./internal/streams/operators');
 
 const {
   codes: {
     ERR_ILLEGAL_CONSTRUCTOR,
   },
-} = require('internal/errors');
-const compose = require('internal/streams/compose');
-const { setDefaultHighWaterMark, getDefaultHighWaterMark } = require('internal/streams/state');
-const { pipeline } = require('internal/streams/pipeline');
-const { destroyer } = require('internal/streams/destroy');
-const eos = require('internal/streams/end-of-stream');
-const internalBuffer = require('internal/buffer');
+} = require('./internal/errors');
+const compose = require('./internal/streams/compose');
+const { setDefaultHighWaterMark, getDefaultHighWaterMark } = require('./internal/streams/state');
+const { pipeline } = require('./internal/streams/pipeline');
+const { destroyer } = require('./internal/streams/destroy');
+const eos = require('./internal/streams/end-of-stream');
+const internalBuffer = require('./internal/buffer');
 
 const promises = require('stream/promises');
-const utils = require('internal/streams/utils');
+const utils = require('./internal/streams/utils');
 
-const Stream = module.exports = require('internal/streams/legacy').Stream;
+const Stream = module.exports = require('./internal/streams/legacy').Stream;
 
 Stream.isDestroyed = utils.isDestroyed;
 Stream.isDisturbed = utils.isDisturbed;
@@ -59,7 +59,7 @@ Stream.isErrored = utils.isErrored;
 Stream.isReadable = utils.isReadable;
 Stream.isWritable = utils.isWritable;
 
-Stream.Readable = require('internal/streams/readable');
+Stream.Readable = require('./internal/streams/readable');
 for (const key of ObjectKeys(streamReturningOperators)) {
   const op = streamReturningOperators[key];
   function fn(...args) {
@@ -96,12 +96,12 @@ for (const key of ObjectKeys(promiseReturningOperators)) {
     writable: true,
   });
 }
-Stream.Writable = require('internal/streams/writable');
-Stream.Duplex = require('internal/streams/duplex');
-Stream.Transform = require('internal/streams/transform');
-Stream.PassThrough = require('internal/streams/passthrough');
+Stream.Writable = require('./internal/streams/writable');
+Stream.Duplex = require('./internal/streams/duplex');
+Stream.Transform = require('./internal/streams/transform');
+Stream.PassThrough = require('./internal/streams/passthrough');
 Stream.pipeline = pipeline;
-const { addAbortSignal } = require('internal/streams/add-abort-signal');
+const { addAbortSignal } = require('./internal/streams/add-abort-signal');
 Stream.addAbortSignal = addAbortSignal;
 Stream.finished = eos;
 Stream.destroy = destroyer;
@@ -137,7 +137,7 @@ ObjectDefineProperty(eos, customPromisify, {
 // Backwards-compat with node 0.4.x
 Stream.Stream = Stream;
 
-Stream._isUint8Array = require('internal/util/types').isUint8Array;
+Stream._isUint8Array = require('./internal/util/types').isUint8Array;
 Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
   return new internalBuffer.FastBuffer(chunk.buffer,
                                        chunk.byteOffset,
diff --git a/lib/stream/consumers.js b/lib/stream/consumers.js
index 4566eff6a3..e720d77ae6 100644
--- a/lib/stream/consumers.js
+++ b/lib/stream/consumers.js
@@ -6,11 +6,11 @@ const {
 
 const {
   TextDecoder,
-} = require('internal/encoding');
+} = require('../internal/encoding');
 
 const {
   Blob,
-} = require('internal/blob');
+} = require('../internal/blob');
 
 const {
   Buffer,
diff --git a/lib/stream/promises.js b/lib/stream/promises.js
index a8b65d62b0..ff51ce044c 100644
--- a/lib/stream/promises.js
+++ b/lib/stream/promises.js
@@ -9,10 +9,10 @@ const {
   isIterable,
   isNodeStream,
   isWebStream,
-} = require('internal/streams/utils');
+} = require('../internal/streams/utils');
 
-const { pipelineImpl: pl } = require('internal/streams/pipeline');
-const { finished } = require('internal/streams/end-of-stream');
+const { pipelineImpl: pl } = require('../internal/streams/pipeline');
+const { finished } = require('../internal/streams/end-of-stream');
 
 require('stream');
 
diff --git a/lib/stream/web.js b/lib/stream/web.js
index 8278040f69..e8842cfbe2 100644
--- a/lib/stream/web.js
+++ b/lib/stream/web.js
@@ -3,13 +3,13 @@
 const {
   TransformStream,
   TransformStreamDefaultController,
-} = require('internal/webstreams/transformstream');
+} = require('../internal/webstreams/transformstream');
 
 const {
   WritableStream,
   WritableStreamDefaultController,
   WritableStreamDefaultWriter,
-} = require('internal/webstreams/writablestream');
+} = require('../internal/webstreams/writablestream');
 
 const {
   ReadableStream,
@@ -18,22 +18,22 @@ const {
   ReadableStreamBYOBRequest,
   ReadableByteStreamController,
   ReadableStreamDefaultController,
-} = require('internal/webstreams/readablestream');
+} = require('../internal/webstreams/readablestream');
 
 const {
   ByteLengthQueuingStrategy,
   CountQueuingStrategy,
-} = require('internal/webstreams/queuingstrategies');
+} = require('../internal/webstreams/queuingstrategies');
 
 const {
   TextEncoderStream,
   TextDecoderStream,
-} = require('internal/webstreams/encoding');
+} = require('../internal/webstreams/encoding');
 
 const {
   CompressionStream,
   DecompressionStream,
-} = require('internal/webstreams/compression');
+} = require('../internal/webstreams/compression');
 
 module.exports = {
   ReadableStream,
diff --git a/lib/string_decoder.js b/lib/string_decoder.js
index 2ed2de60de..4711f4457f 100644
--- a/lib/string_decoder.js
+++ b/lib/string_decoder.js
@@ -40,12 +40,12 @@ const {
   flush,
   encodings,
 } = internalBinding('string_decoder');
-const internalUtil = require('internal/util');
+const internalUtil = require('./internal/util');
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_THIS,
   ERR_UNKNOWN_ENCODING,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const isEncoding = Buffer[internalUtil.kIsEncodingSymbol];
 
 const kNativeDecoder = Symbol('kNativeDecoder');
diff --git a/lib/test.js b/lib/test.js
index d096cae23d..4abd19446c 100644
--- a/lib/test.js
+++ b/lib/test.js
@@ -1,7 +1,7 @@
 'use strict';
 const { ObjectAssign, ObjectDefineProperty } = primordials;
-const { test, describe, it, before, after, beforeEach, afterEach } = require('internal/test_runner/harness');
-const { run } = require('internal/test_runner/runner');
+const { test, describe, it, before, after, beforeEach, afterEach } = require('./internal/test_runner/harness');
+const { run } = require('./internal/test_runner/runner');
 
 module.exports = test;
 ObjectAssign(module.exports, {
@@ -23,7 +23,7 @@ ObjectDefineProperty(module.exports, 'mock', {
   enumerable: true,
   get() {
     if (lazyMock === undefined) {
-      const { MockTracker } = require('internal/test_runner/mock/mock');
+      const { MockTracker } = require('./internal/test_runner/mock/mock');
 
       lazyMock = new MockTracker();
     }
diff --git a/lib/test/reporters.js b/lib/test/reporters.js
index 06a0b27ee5..3574bed55b 100644
--- a/lib/test/reporters.js
+++ b/lib/test/reporters.js
@@ -14,7 +14,7 @@ ObjectDefineProperties(module.exports, {
     configurable: true,
     enumerable: true,
     get() {
-      dot ??= require('internal/test_runner/reporter/dot');
+      dot ??= require('../internal/test_runner/reporter/dot');
       return dot;
     },
   },
@@ -23,7 +23,7 @@ ObjectDefineProperties(module.exports, {
     configurable: true,
     enumerable: true,
     get() {
-      junit ??= require('internal/test_runner/reporter/junit');
+      junit ??= require('../internal/test_runner/reporter/junit');
       return junit;
     },
   },
@@ -32,7 +32,7 @@ ObjectDefineProperties(module.exports, {
     configurable: true,
     enumerable: true,
     value: function value() {
-      spec ??= require('internal/test_runner/reporter/spec');
+      spec ??= require('../internal/test_runner/reporter/spec');
       return ReflectConstruct(spec, arguments);
     },
   },
@@ -41,7 +41,7 @@ ObjectDefineProperties(module.exports, {
     configurable: true,
     enumerable: true,
     get() {
-      tap ??= require('internal/test_runner/reporter/tap');
+      tap ??= require('../internal/test_runner/reporter/tap');
       return tap;
     },
   },
diff --git a/lib/timers.js b/lib/timers.js
index ad58cf61f1..1014187271 100644
--- a/lib/timers.js
+++ b/lib/timers.js
@@ -32,7 +32,7 @@ const binding = internalBinding('timers');
 const {
   immediateInfo,
 } = binding;
-const L = require('internal/linkedlist');
+const L = require('./internal/linkedlist');
 const {
   async_id_symbol,
   Timeout,
@@ -51,15 +51,15 @@ const {
   active,
   unrefActive,
   insert,
-} = require('internal/timers');
+} = require('./internal/timers');
 const {
   promisify: { custom: customPromisify },
   deprecate,
-} = require('internal/util');
-let debug = require('internal/util/debuglog').debuglog('timer', (fn) => {
+} = require('./internal/util');
+let debug = require('./internal/util/debuglog').debuglog('timer', (fn) => {
   debug = fn;
 });
-const { validateFunction } = require('internal/validators');
+const { validateFunction } = require('./internal/validators');
 
 let timersPromises;
 
@@ -67,7 +67,7 @@ const {
   destroyHooksExist,
   // The needed emit*() functions.
   emitDestroy,
-} = require('internal/async_hooks');
+} = require('./internal/async_hooks');
 
 // This stores all the known timer async ids to allow users to clearTimeout and
 // clearInterval using those ids, to match the spec and the rest of the web
diff --git a/lib/timers/promises.js b/lib/timers/promises.js
index 2bf36d6cc5..90dfa72ce2 100644
--- a/lib/timers/promises.js
+++ b/lib/timers/promises.js
@@ -13,7 +13,7 @@ const {
   Timeout,
   Immediate,
   insert,
-} = require('internal/timers');
+} = require('../internal/timers');
 const {
   clearImmediate,
   clearInterval,
@@ -27,17 +27,17 @@ const {
     ERR_INVALID_ARG_TYPE,
     ERR_INVALID_THIS,
   },
-} = require('internal/errors');
+} = require('../internal/errors');
 
 const {
   validateAbortSignal,
   validateBoolean,
   validateObject,
-} = require('internal/validators');
+} = require('../internal/validators');
 
 const {
   kEmptyObject,
-} = require('internal/util');
+} = require('../internal/util');
 
 const kScheduler = Symbol('kScheduler');
 let kResistStopPropagation;
@@ -82,7 +82,7 @@ function setTimeout(after, value, options = kEmptyObject) {
     if (signal) {
       oncancel = FunctionPrototypeBind(cancelListenerHandler,
                                        timeout, clearTimeout, reject, signal);
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../internal/event_target').kResistStopPropagation;
       signal.addEventListener('abort', oncancel, { __proto__: null, [kResistStopPropagation]: true });
     }
   });
@@ -125,7 +125,7 @@ function setImmediate(value, options = kEmptyObject) {
       oncancel = FunctionPrototypeBind(cancelListenerHandler,
                                        immediate, clearImmediate, reject,
                                        signal);
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../internal/event_target').kResistStopPropagation;
       signal.addEventListener('abort', oncancel, { __proto__: null, [kResistStopPropagation]: true });
     }
   });
@@ -167,7 +167,7 @@ async function* setInterval(after, value, options = kEmptyObject) {
           callback = undefined;
         }
       };
-      kResistStopPropagation ??= require('internal/event_target').kResistStopPropagation;
+      kResistStopPropagation ??= require('../internal/event_target').kResistStopPropagation;
       signal.addEventListener('abort', onCancel, { __proto__: null, once: true, [kResistStopPropagation]: true });
     }
 
diff --git a/lib/tls.js b/lib/tls.js
index b78f56d49a..ccbf0801e2 100644
--- a/lib/tls.js
+++ b/lib/tls.js
@@ -50,22 +50,22 @@ const {
   ERR_TLS_CERT_ALTNAME_FORMAT,
   ERR_TLS_CERT_ALTNAME_INVALID,
   ERR_OUT_OF_RANGE,
-} = require('internal/errors').codes;
-const internalUtil = require('internal/util');
+} = require('./internal/errors').codes;
+const internalUtil = require('./internal/util');
 internalUtil.assertCrypto();
 const {
   isArrayBufferView,
   isUint8Array,
-} = require('internal/util/types');
+} = require('./internal/util/types');
 
 const net = require('net');
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 const { getRootCertificates, getSSLCiphers } = internalBinding('crypto');
 const { Buffer } = require('buffer');
 const { canonicalizeIP } = internalBinding('cares_wrap');
 const _tls_common = require('_tls_common');
 const _tls_wrap = require('_tls_wrap');
-const { createSecurePair } = require('internal/tls/secure-pair');
+const { createSecurePair } = require('./internal/tls/secure-pair');
 
 // Allow {CLIENT_RENEG_LIMIT} client-initiated session renegotiations
 // every {CLIENT_RENEG_WINDOW} seconds. An error event is emitted if more
diff --git a/lib/trace_events.js b/lib/trace_events.js
index 860543e30b..5eafcfec96 100644
--- a/lib/trace_events.js
+++ b/lib/trace_events.js
@@ -16,19 +16,19 @@ const kMaxTracingCount = 10;
 const {
   ERR_TRACE_EVENTS_CATEGORY_REQUIRED,
   ERR_TRACE_EVENTS_UNAVAILABLE,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 
-const { ownsProcessState } = require('internal/worker');
+const { ownsProcessState } = require('./internal/worker');
 if (!hasTracing || !ownsProcessState)
   throw new ERR_TRACE_EVENTS_UNAVAILABLE();
 
 const { CategorySet, getEnabledCategories } = internalBinding('trace_events');
-const { customInspectSymbol } = require('internal/util');
-const { format } = require('internal/util/inspect');
+const { customInspectSymbol } = require('./internal/util');
+const { format } = require('./internal/util/inspect');
 const {
   validateObject,
   validateStringArray,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const enabledTracingObjects = new SafeSet();
 
diff --git a/lib/tty.js b/lib/tty.js
index fb0319f93e..3c18d230e0 100644
--- a/lib/tty.js
+++ b/lib/tty.js
@@ -29,12 +29,12 @@ const {
 
 const net = require('net');
 const { TTY, isTTY } = internalBinding('tty_wrap');
-const errors = require('internal/errors');
+const errors = require('./internal/errors');
 const { ERR_INVALID_FD, ERR_TTY_INIT_FAILED } = errors.codes;
 const {
   getColorDepth,
   hasColors,
-} = require('internal/tty');
+} = require('./internal/tty');
 
 // Lazy loaded for startup performance.
 let readline;
diff --git a/lib/url.js b/lib/url.js
index b6b5376c37..a40ff686cf 100644
--- a/lib/url.js
+++ b/lib/url.js
@@ -29,22 +29,22 @@ const {
   decodeURIComponent,
 } = primordials;
 
-const { toASCII } = require('internal/idna');
-const { encodeStr, hexTable } = require('internal/querystring');
+const { toASCII } = require('./internal/idna');
+const { encodeStr, hexTable } = require('./internal/querystring');
 const querystring = require('querystring');
 
 const {
   ERR_INVALID_ARG_TYPE,
   ERR_INVALID_URL,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   validateString,
   validateObject,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 // This ensures setURLConstructor() is called before the native
 // URL::ToObject() method is used.
-const { spliceOne } = require('internal/util');
+const { spliceOne } = require('./internal/util');
 
 // WHATWG URL implementation provided by internal/url
 const {
@@ -58,11 +58,11 @@ const {
   unsafeProtocol,
   hostlessProtocol,
   slashedProtocol,
-} = require('internal/url');
+} = require('./internal/url');
 
 const bindingUrl = internalBinding('url');
 
-const { getOptionValue } = require('internal/options');
+const { getOptionValue } = require('./internal/options');
 
 // Original url.parse() API
 
@@ -119,7 +119,7 @@ const {
   CHAR_VERTICAL_LINE,
   CHAR_AT,
   CHAR_COLON,
-} = require('internal/constants');
+} = require('./internal/constants');
 
 let urlParseWarned = false;
 
diff --git a/lib/util.js b/lib/util.js
index 7fb7994e65..5fb6dc7dac 100644
--- a/lib/util.js
+++ b/lib/util.js
@@ -54,20 +54,20 @@ const {
   errnoException,
   exceptionWithHostPort,
   hideStackFrames,
-} = require('internal/errors');
+} = require('./internal/errors');
 const {
   format,
   formatWithOptions,
   inspect,
   stripVTControlCharacters,
-} = require('internal/util/inspect');
-const { debuglog } = require('internal/util/debuglog');
+} = require('./internal/util/inspect');
+const { debuglog } = require('./internal/util/debuglog');
 const {
   validateFunction,
   validateNumber,
-} = require('internal/validators');
+} = require('./internal/validators');
 const { isBuffer } = require('buffer').Buffer;
-const types = require('internal/util/types');
+const types = require('./internal/util/types');
 
 const {
   deprecate,
@@ -76,12 +76,12 @@ const {
   promisify,
   toUSVString,
   defineLazyProperties,
-} = require('internal/util');
+} = require('./internal/util');
 
 let abortController;
 
 function lazyAbortController() {
-  abortController ??= require('internal/abort_controller');
+  abortController ??= require('./internal/abort_controller');
   return abortController;
 }
 
@@ -218,7 +218,7 @@ let console;
  */
 function log(...args) {
   if (!console) {
-    console = require('internal/console/global');
+    console = require('./internal/console/global');
   }
   console.log('%s - %s', timestamp(), format(...args));
 }
@@ -365,7 +365,7 @@ module.exports = {
   isBuffer,
   isDeepStrictEqual(a, b) {
     if (internalDeepEqual === undefined) {
-      internalDeepEqual = require('internal/util/comparisons')
+      internalDeepEqual = require('./internal/util/comparisons')
         .isDeepStrictEqual;
     }
     return internalDeepEqual(a, b);
diff --git a/lib/util/types.js b/lib/util/types.js
index a48a552d6d..484de44987 100644
--- a/lib/util/types.js
+++ b/lib/util/types.js
@@ -1,3 +1,3 @@
 'use strict';
 
-module.exports = require('internal/util/types');
+module.exports = require('../internal/util/types');
diff --git a/lib/v8.js b/lib/v8.js
index 32dcd2cf0c..9ef586adaa 100644
--- a/lib/v8.js
+++ b/lib/v8.js
@@ -33,25 +33,25 @@ const {
 } = primordials;
 
 const { Buffer } = require('buffer');
-const { validateString, validateUint32 } = require('internal/validators');
+const { validateString, validateUint32 } = require('./internal/validators');
 const {
   Serializer,
   Deserializer,
 } = internalBinding('serdes');
 const {
   namespace: startupSnapshot,
-} = require('internal/v8/startup_snapshot');
+} = require('./internal/v8/startup_snapshot');
 
 let profiler = {};
 if (internalBinding('config').hasInspector) {
   profiler = internalBinding('profiler');
 }
 
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const { copy } = internalBinding('buffer');
-const { inspect } = require('internal/util/inspect');
-const { FastBuffer } = require('internal/buffer');
-const { getValidatedPath } = require('internal/fs/utils');
+const { inspect } = require('./internal/util/inspect');
+const { FastBuffer } = require('./internal/buffer');
+const { getValidatedPath } = require('./internal/fs/utils');
 const { toNamespacedPath } = require('path');
 const {
   createHeapSnapshotStream,
@@ -60,9 +60,9 @@ const {
 const {
   HeapSnapshotStream,
   getHeapSnapshotOptions,
-} = require('internal/heap_utils');
-const promiseHooks = require('internal/promise_hooks');
-const { getOptionValue } = require('internal/options');
+} = require('./internal/heap_utils');
+const promiseHooks = require('./internal/promise_hooks');
+const { getOptionValue } = require('./internal/options');
 const { JSONParse } = primordials;
 /**
  * Generates a snapshot of the current V8 heap
diff --git a/lib/vm.js b/lib/vm.js
index f134cdc983..687fe65d19 100644
--- a/lib/vm.js
+++ b/lib/vm.js
@@ -37,7 +37,7 @@ const {
 const {
   ERR_CONTEXT_NOT_INITIALIZED,
   ERR_INVALID_ARG_TYPE,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   validateBoolean,
   validateBuffer,
@@ -47,16 +47,16 @@ const {
   validateOneOf,
   validateString,
   validateUint32,
-} = require('internal/validators');
+} = require('./internal/validators');
 const {
   emitExperimentalWarning,
   kEmptyObject,
   kVmBreakFirstLineSymbol,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   internalCompileFunction,
   isContext,
-} = require('internal/vm');
+} = require('./internal/vm');
 const kParsingContext = Symbol('script parsing context');
 
 class Script extends ContextifyScript {
@@ -109,8 +109,8 @@ class Script extends ContextifyScript {
     }
 
     if (importModuleDynamically !== undefined) {
-      const { importModuleDynamicallyWrap } = require('internal/vm/module');
-      const { registerModule } = require('internal/modules/esm/utils');
+      const { importModuleDynamicallyWrap } = require('./internal/vm/module');
+      const { registerModule } = require('./internal/modules/esm/utils');
       registerModule(this, {
         __proto__: null,
         importModuleDynamically:
diff --git a/lib/wasi.js b/lib/wasi.js
index 6c700219a8..48936588d8 100644
--- a/lib/wasi.js
+++ b/lib/wasi.js
@@ -12,11 +12,11 @@ const {
 const {
   ERR_INVALID_ARG_VALUE,
   ERR_WASI_ALREADY_STARTED,
-} = require('internal/errors').codes;
+} = require('./internal/errors').codes;
 const {
   emitExperimentalWarning,
   kEmptyObject,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   validateArray,
   validateBoolean,
@@ -25,7 +25,7 @@ const {
   validateObject,
   validateString,
   validateUndefined,
-} = require('internal/validators');
+} = require('./internal/validators');
 const kExitCode = Symbol('kExitCode');
 const kSetMemory = Symbol('kSetMemory');
 const kStarted = Symbol('kStarted');
diff --git a/lib/worker_threads.js b/lib/worker_threads.js
index 084fa98908..e05ecc4687 100644
--- a/lib/worker_threads.js
+++ b/lib/worker_threads.js
@@ -8,7 +8,7 @@ const {
   getEnvironmentData,
   threadId,
   Worker,
-} = require('internal/worker');
+} = require('./internal/worker');
 
 const {
   MessagePort,
@@ -16,12 +16,12 @@ const {
   moveMessagePortToContext,
   receiveMessageOnPort,
   BroadcastChannel,
-} = require('internal/worker/io');
+} = require('./internal/worker/io');
 
 const {
   markAsUntransferable,
   isMarkedAsUntransferable,
-} = require('internal/buffer');
+} = require('./internal/buffer');
 
 module.exports = {
   isMainThread,
diff --git a/lib/zlib.js b/lib/zlib.js
index 2b90c6f91f..1e1b7ccb4c 100644
--- a/lib/zlib.js
+++ b/lib/zlib.js
@@ -52,27 +52,27 @@ const {
   },
   genericNodeError,
   hideStackFrames,
-} = require('internal/errors');
+} = require('./internal/errors');
 const { Transform, finished } = require('stream');
 const {
   deprecate,
-} = require('internal/util');
+} = require('./internal/util');
 const {
   isArrayBufferView,
   isAnyArrayBuffer,
   isUint8Array,
-} = require('internal/util/types');
+} = require('./internal/util/types');
 const binding = internalBinding('zlib');
-const assert = require('internal/assert');
+const assert = require('./internal/assert');
 const {
   Buffer,
   kMaxLength,
 } = require('buffer');
-const { owner_symbol } = require('internal/async_hooks').symbols;
+const { owner_symbol } = require('./internal/async_hooks').symbols;
 const {
   validateFunction,
   validateNumber,
-} = require('internal/validators');
+} = require('./internal/validators');
 
 const kFlushFlag = Symbol('kFlushFlag');
 const kError = Symbol('kError');
diff --git a/tools/node_modules/eslint/node_modules/eslint b/tools/node_modules/eslint/node_modules/eslint
deleted file mode 120000
index a96aa0ea9d..0000000000
--- a/tools/node_modules/eslint/node_modules/eslint
+++ /dev/null
@@ -1 +0,0 @@
-..
\ No newline at end of file
